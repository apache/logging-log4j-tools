<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Licensed to the Apache Software Foundation (ASF) under one or more
  ~ contributor license agreements.  See the NOTICE file distributed with
  ~ this work for additional information regarding copyright ownership.
  ~ The ASF licenses this file to you under the Apache License, Version 2.0
  ~ (the "License"); you may not use this file except in compliance with
  ~ the License.  You may obtain a copy of the License at
  ~
  ~      http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

  <!-- ██     ██  █████  ██████  ███    ██ ██ ███    ██  ██████  ██
       ██     ██ ██   ██ ██   ██ ████   ██ ██ ████   ██ ██       ██
       ██  █  ██ ███████ ██████  ██ ██  ██ ██ ██ ██  ██ ██   ███ ██
       ██ ███ ██ ██   ██ ██   ██ ██  ██ ██ ██ ██  ██ ██ ██    ██
        ███ ███  ██   ██ ██   ██ ██   ████ ██ ██   ████  ██████  ██

       `log4j-tools` project modules should use `log4j-tools-parent` as their parents, not this POM!
       This POM constitutes the BOM to be imported by applications using `log4j-tools` project modules. -->

  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.apache.logging</groupId>
    <artifactId>logging-parent</artifactId>
    <version>9</version>
  </parent>

  <groupId>org.apache.logging.log4j</groupId>
  <artifactId>log4j-tools-bom</artifactId>
  <version>${revision}</version>
  <packaging>pom</packaging>

  <url>https://github.com/apache/logging-log4j-tools</url>

  <inceptionYear>2022</inceptionYear>

  <organization>
    <name>Apache Software Foundation</name>
    <url>https://apache.org</url>
  </organization>

  <licenses>
    <license>
      <name>Apache License, Version 2.0</name>
      <url>https://www.apache.org/licenses/LICENSE-2.0.txt</url>
      <distribution>repo</distribution>
      <comments>A business-friendly OSS license</comments>
    </license>
  </licenses>

  <developers>

    <developer>
      <id>pkarwasz</id>
      <name>Piotr P. Karwasz</name>
      <email>pkarwasz@apache.org</email>
      <roles>
        <role>PMC Member</role>
      </roles>
      <timezone>Europe/Warsaw</timezone>
    </developer>

    <developer>
      <id>rgoers</id>
      <name>Ralph Goers</name>
      <email>rgoers@apache.org</email>
      <organization>Nextiva</organization>
      <roles>
        <role>PMC Member</role>
      </roles>
      <timezone>America/Phoenix</timezone>
    </developer>

    <developer>
      <id>vy</id>
      <name>Volkan Yazıcı</name>
      <email>vy@apache.org</email>
      <roles>
        <role>PMC Member</role>
      </roles>
      <timezone>Europe/Amsterdam</timezone>
    </developer>

  </developers>

  <modules>

    <!-- the parent POM must come first: -->
    <module>log4j-tools-parent</module>

    <!-- Modules here must have a corresponding entry in `dependencyManagement > dependencies` block below! -->
    <module>log4j-changelog</module>
    <module>log4j-changelog-maven-plugin</module>

  </modules>

  <scm>
    <connection>scm:git:git@github.com:apache/logging-log4j-tools.git</connection>
    <developerConnection>scm:git:git@github.com:apache/logging-log4j-tools.git</developerConnection>
    <tag>HEAD</tag>
    <url>https://github.com/apache/logging-log4j-tools</url>
  </scm>

  <issueManagement>
    <system>GitHub Issues</system>
    <url>https://github.com/apache/logging-log4j-tools/issues</url>
  </issueManagement>

  <ciManagement>
    <system>GitHub Actions</system>
    <url>https://github.com/apache/logging-log4j-tools/actions</url>
  </ciManagement>

  <distributionManagement>
    <!-- `repository` from parent `org.apache.logging:logging-parent` (id: `apache.releases.https`) -->
    <!-- `snapshotRepository` from parent `org.apache.logging:logging-parent` (id: `apache.snapshots.https`) -->
  </distributionManagement>

  <properties>

    <!-- project version -->
    <revision>0.4.0-SNAPSHOT</revision>

    <!-- `minimalJavaBuildVersion` is employed by `org.apache:apache`, which is the parent of `org.apache.logging:logging-parent`, which is the parent of us.
         `minimalJavaBuildVersion` is used for enforcing the compiler version.
         We will use `java.version` to enforce the target JVM byte code, which is 8. -->
    <minimalJavaBuildVersion>[17,18)</minimalJavaBuildVersion>
    <java.version>8</java.version>

    <!-- `project.build.outputTimestamp` is required for reproducible builds: https://maven.apache.org/guides/mini/guide-reproducible-builds.html -->
    <project.build.outputTimestamp>0</project.build.outputTimestamp>

    <!-- dependency versions -->
    <org.eclipse.jgit.version>6.6.0.202305301015-r</org.eclipse.jgit.version>

    <!-- plugin versions -->
    <beanshell-maven-plugin.version>1.4</beanshell-maven-plugin.version>
    <error-prone.version>2.20.0</error-prone.version>
    <findsecbugs-plugin.version>1.12.0</findsecbugs-plugin.version>
    <flatten-maven-plugin.version>1.5.0</flatten-maven-plugin.version>
    <log4j-changelog-maven-plugin.version>0.3.0</log4j-changelog-maven-plugin.version>
    <maven-deploy-plugin.version>3.0.0</maven-deploy-plugin.version>
    <sign-maven-plugin.version>1.0.1</sign-maven-plugin.version>
    <spotbugs-maven-plugin.version>4.7.3.5</spotbugs-maven-plugin.version>
    <xml-maven-plugin.version>1.1.0</xml-maven-plugin.version>

  </properties>

  <!-- `dependencyManagement` must only contain `log4j-tools` modules and nothing else!
       Modules here must have a corresponding entry in `modules` block above! -->
  <dependencyManagement>
    <dependencies>

      <dependency>
        <groupId>org.apache.logging.log4j</groupId>
        <artifactId>log4j-changelog</artifactId>
        <version>${project.version}</version>
      </dependency>

      <dependency>
        <groupId>org.apache.logging.log4j</groupId>
        <artifactId>log4j-changelog-maven-plugin</artifactId>
        <version>${project.version}</version>
      </dependency>

    </dependencies>
  </dependencyManagement>

  <build>

    <pluginManagement>
      <plugins>

        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>flatten-maven-plugin</artifactId>
          <version>${flatten-maven-plugin.version}</version>
          <configuration>
            <!-- Setting `outputDirectory` to `project.build.directory`, which is cleaned by `default-clean` execution of `clean:clean`.
                 This makes `flatten:clean` redundant. -->
            <outputDirectory>${project.build.directory}</outputDirectory>
          </configuration>
        </plugin>

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-plugin-plugin</artifactId>
          <version>${maven-plugin.version}</version>
        </plugin>

        <plugin>
          <groupId>com.github.spotbugs</groupId>
          <artifactId>spotbugs-maven-plugin</artifactId>
          <version>${spotbugs-maven-plugin.version}</version>
        </plugin>

      </plugins>
    </pluginManagement>

    <plugins>

      <!-- BOMs should ideally _only_ contain dependencies for modules of the project.
           No invasive properties or plugin/dependency management – either from the BOM itself or its parent.
           The following `flatten-maven-plugin` exactly performs that trimming operation. -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>flatten-maven-plugin</artifactId>
        <version>${flatten-maven-plugin.version}</version>
        <inherited>false</inherited>
        <executions>
          <execution>
            <id>flatten-bom</id>
            <goals>
              <goal>flatten</goal>
            </goals>
            <phase>process-resources</phase>
            <configuration>
              <flattenMode>bom</flattenMode>
              <!-- POM `ElementHandling` is pretty cryptic: https://www.mojohaus.org/flatten-maven-plugin/apidocs/org/codehaus/mojo/flatten/ElementHandling.html
                   Trial-and-error has shown that we should use either `remove` or `interpolate`.
                   `remove` simply removes the element.
                   `interpolate` takes the element from the original POM with variables interpolated.
                   Avoid using `resolve`, which uses the effective POM where inherited changes from the parent are also incorporated. -->
              <pomElements>
                <properties>remove</properties>
                <repositories>remove</repositories>
                <distributionManagement>remove</distributionManagement>
                <dependencyManagement>interpolate</dependencyManagement>
              </pomElements>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <release>${java.version}</release>
          <encoding>${project.build.sourceEncoding}</encoding>
          <compilerArgs>
            <arg>-Xlint:all</arg>
            <arg>-XDcompilePolicy=simple</arg>
            <arg>-Xplugin:ErrorProne</arg>
          </compilerArgs>
          <annotationProcessorPaths>
            <path>
              <groupId>com.google.errorprone</groupId>
              <artifactId>error_prone_core</artifactId>
              <version>${error-prone.version}</version>
            </path>
          </annotationProcessorPaths>
        </configuration>
      </plugin>

      <!-- Apache RAT (Release Audit Tool) check to verify licenses.
           `apache-rat-plugin`: https://creadur.apache.org/rat/apache-rat-plugin/
           Release Audit Tool: https://creadur.apache.org/rat/index.html -->
      <plugin>
        <groupId>org.apache.rat</groupId>
        <artifactId>apache-rat-plugin</artifactId>
        <configuration>
          <consoleOutput>true</consoleOutput>
          <excludes>
            <exclude>**/target/**/*</exclude>
            <exclude>.java-version</exclude>
            <exclude>.mvn/jvm.config</exclude>
            <exclude>**/*.txt</exclude>
            <!-- IntelliJ IDEA files: -->
            <exclude>.idea/**/*</exclude>
            <exclude>**/*.iml</exclude>
            <!-- License headers in GitHub templates pollute the prompt displayed to the user: -->
            <exclude>.github/ISSUE_TEMPLATE/*.md</exclude>
            <exclude>.github/pull_request_template.md</exclude>
          </excludes>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>check</goal>
            </goals>
            <phase>verify</phase>
          </execution>
        </executions>
      </plugin>

      <!-- Ensure that version for each dependency resolved during a build, is equal to or higher than all transitive dependency declarations.
           A failure here requires adding the dependency to the dependency management. -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <executions>
          <execution>
            <id>enforce-upper-bound-deps</id>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <rules>
                <requireUpperBoundDeps />
              </rules>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>com.github.spotbugs</groupId>
        <artifactId>spotbugs-maven-plugin</artifactId>
        <configuration>
          <plugins>
            <plugin>
              <groupId>com.h3xstream.findsecbugs</groupId>
              <artifactId>findsecbugs-plugin</artifactId>
              <version>${findsecbugs-plugin.version}</version>
            </plugin>
          </plugins>
        </configuration>
        <executions>
          <execution>
            <id>default-spotbugs</id>
            <goals>
              <goal>check</goal>
            </goals>
            <phase>verify</phase>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>xml-maven-plugin</artifactId>
        <version>${xml-maven-plugin.version}</version>
        <inherited>false</inherited>
        <executions>
          <execution>
            <goals>
              <goal>validate</goal>
            </goals>
            <configuration>
              <validationSets>
                <validationSet>
                  <dir>src/changelog</dir>
                  <includes>**/*.xml</includes>
                  <publicId>http://logging.apache.org/log4j/changelog</publicId>
                  <systemId>https://logging.apache.org/log4j/changelog-0.1.1.xsd</systemId>
                  <validating>true</validating>
                </validationSet>
              </validationSets>
            </configuration>
          </execution>
        </executions>
      </plugin>

    </plugins>

  </build>

  <profiles>

    <!-- `changelog-export` profile to export changelogs.
         It is manually enabled by users to generate release notes.
         See `RELEASING.adoc` for instructions. -->
    <profile>
      <id>changelog-export</id>
      <build>
        <defaultGoal>log4j-changelog:export</defaultGoal>
        <plugins>
          <plugin>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-changelog-maven-plugin</artifactId>
            <version>${log4j-changelog-maven-plugin.version}</version>
            <inherited>false</inherited>
            <configuration>
              <!-- `outputDirectory` was broken in 0.3.0, below line can be removed in 0.4.0 onwards: -->
              <outputDirectory>${project.build.directory}/generated-sources/site/release-notes</outputDirectory>
              <indexTemplates>
                <template>
                  <source>.index.md.ftl</source>
                </template>
              </indexTemplates>
              <changelogTemplates>
                <template>
                  <source>.release-notes.md.ftl</source>
                  <target>%v.md</target>
                </template>
              </changelogTemplates>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!-- `changelog-release` profile to move `src/changelog/.0.x.x` contents to their associated release directory.
         It is manually enabled by users to while cutting a release.
         See `RELEASING.adoc` for instructions. -->
    <profile>
      <id>changelog-release</id>
      <build>
        <defaultGoal>log4j-changelog:release</defaultGoal>
        <plugins>
          <plugin>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-changelog-maven-plugin</artifactId>
            <version>${log4j-changelog-maven-plugin.version}</version>
            <inherited>false</inherited>
            <configuration>
              <releaseVersion>${revision}</releaseVersion>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>distribution</id>
      <build>
        <defaultGoal>bsh:run</defaultGoal>
        <plugins>
          <plugin>
            <groupId>com.github.genthaler</groupId>
            <artifactId>beanshell-maven-plugin</artifactId>
            <version>${beanshell-maven-plugin.version}</version>
            <configuration>
              <script><![CDATA[import java.io.*;
                import java.nio.file.*;
                import java.util.*;
                import java.util.function.*;
                import java.util.stream.*;
                import java.util.zip.*;

                import org.eclipse.jgit.dircache.*;
                import org.eclipse.jgit.lib.Repository;
                import org.eclipse.jgit.storage.file.FileRepositoryBuilder;

                // Read tracked file paths
                SortedMap pathByFile = new TreeMap();
                Repository repo = new FileRepositoryBuilder().readEnvironment().findGitDir().build();
                DirCache repoCache = repo.readDirCache();
                String repoDirectoryParent = repo.getDirectory().getParent();
                for (int repoCacheEntryIndex = 0; repoCacheEntryIndex < repoCache.getEntryCount(); repoCacheEntryIndex++) {
                    DirCacheEntry repoCacheEntry = repoCache.getEntry(repoCacheEntryIndex);
                    String repoCacheEntryPath = repoCacheEntry.getPathString();
                    pathByFile.put(repoCacheEntryPath, new File(repoDirectoryParent, repoCacheEntryPath).toPath());
                }

                // Compress tracked files
                OutputStream outputStream = new FileOutputStream("target/src.zip");
                ZipOutputStream zipOutputStream = new ZipOutputStream(outputStream);
                try {
                    for (String file : pathByFile.keySet()) {
                        Path path = pathByFile.get(file);
                        ZipEntry zipEntry = new ZipEntry(file);
                        zipEntry.setTime(0);
                        zipOutputStream.putNextEntry(zipEntry);
                        zipOutputStream.write(Files.readAllBytes(path));
                        zipOutputStream.closeEntry();
                    }
                } finally {
                    zipOutputStream.close();
                }

                // Find JAR files along with the created `src.zip`
                Stream stream = Files.walk(new File(repoDirectoryParent).toPath(), 8, new FileVisitOption[0]);
                List paths;
                try {
                     paths = stream
                            .filter(new Predicate() {
                                public boolean test(Path path) {
                                    File file = path.toFile();
                                    return file.getParentFile().getName().equals("target") &&
                                            (file.getName().equals("src.zip") ||
                                                    file.getName().matches("^log4j-.*[0-9](-SNAPSHOT)?\\.jar$"));
                                }
                            })
                            .sorted()
                            .collect(Collectors.toList());
                } finally {
                    stream.close();
                }

                // Archive all found JAR files along with the `src.zip`
                OutputStream outputStream = new FileOutputStream("target/log4j-tools-${revision}.zip");
                ZipOutputStream zipOutputStream = new ZipOutputStream(outputStream);
                try {
                    for (Path path : paths) {
                        ZipEntry zipEntry = new ZipEntry(path.toFile().getName());
                        zipEntry.setTime(0);
                        zipOutputStream.putNextEntry(zipEntry);
                        zipOutputStream.write(Files.readAllBytes(path));
                        zipOutputStream.closeEntry();
                    }
                } finally {
                    zipOutputStream.close();
                }]]></script>
            </configuration>
            <dependencies>
              <dependency>
                <groupId>org.eclipse.jgit</groupId>
                <artifactId>org.eclipse.jgit</artifactId>
                <version>${org.eclipse.jgit.version}</version>
              </dependency>
            </dependencies>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!-- `deploy` profile activating deployment-specific configuration.
         It is manually enabled by `.github/workflows/build.yml` while releasing. -->
    <profile>

      <id>deploy</id>

      <properties>
        <deployAtEnd>true</deployAtEnd>
        <installAtEnd>true</installAtEnd>
        <skipTests>true</skipTests>
        <spotbugs.skip>true</spotbugs.skip>
        <spotless.check.skip>true</spotless.check.skip>
      </properties>

      <build>

        <defaultGoal>deploy</defaultGoal>

        <plugins>

          <plugin>
            <groupId>org.simplify4u.plugins</groupId>
            <artifactId>sign-maven-plugin</artifactId>
            <version>${sign-maven-plugin.version}</version>
            <executions>
              <execution>
                <goals>
                  <goal>sign</goal>
                </goals>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-source-plugin</artifactId>
            <executions>
              <execution>
                <id>attach-sources</id>
                <goals>
                  <goal>jar-no-fork</goal>
                </goals>
              </execution>
            </executions>
          </plugin>

        </plugins>

      </build>

    </profile>

  </profiles>

</project>
