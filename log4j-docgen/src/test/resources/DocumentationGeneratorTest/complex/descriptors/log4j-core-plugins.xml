<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Licensed to the Apache Software Foundation (ASF) under one or more
  ~ contributor license agreements.  See the NOTICE file distributed with
  ~ this work for additional information regarding copyright ownership.
  ~ The ASF licenses this file to you under the Apache License, Version 2.0
  ~ (the "License"); you may not use this file except in compliance with
  ~ the License.  You may obtain a copy of the License at
  ~
  ~      http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<pluginSet xmlns="https://logging.apache.org/xml/ns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="https://logging.apache.org/xml/ns https://logging.apache.org/xml/ns/log4j-plugins-0.1.0.xsd" version="0.1.0">
  <groupId>org.apache.logging.log4j</groupId>
  <artifactId>log4j-core</artifactId>
  <version>2.23.0</version>
  <description>The Apache Log4j Implementation</description>
  <scalars>
    <scalar className="com.conversantmedia.util.concurrent.SpinPolicy">
      <values>
        <value name="WAITING"></value>
        <value name="BLOCKING"></value>
        <value name="SPINNING"></value>
      </values>
    </scalar>
    <scalar className="java.lang.Class"></scalar>
    <scalar className="java.net.InetAddress"></scalar>
    <scalar className="java.net.URL"></scalar>
    <scalar className="java.nio.charset.Charset"></scalar>
    <scalar className="java.util.regex.Pattern"></scalar>
    <scalar className="org.apache.commons.csv.QuoteMode">
      <values>
        <value name="ALL"></value>
        <value name="ALL_NON_NULL"></value>
        <value name="MINIMAL"></value>
        <value name="NON_NUMERIC"></value>
        <value name="NONE"></value>
      </values>
    </scalar>
    <scalar className="org.apache.logging.log4j.Level"></scalar>
    <scalar className="org.apache.logging.log4j.core.Filter.Result">
      <values>
        <value name="ACCEPT">
          <description>The event will be processed without further filtering based on the log Level.</description>
        </value>
        <value name="NEUTRAL">
          <description>No decision could be made, further filtering should occur.</description>
        </value>
        <value name="DENY">
          <description>The event should not be processed.</description>
        </value>
      </values>
      <description>The result that can returned from a filter method call.</description>
    </scalar>
    <scalar className="org.apache.logging.log4j.core.appender.ConsoleAppender.Target">
      <values>
        <value name="SYSTEM_OUT">
          <description>Standard output.</description>
        </value>
        <value name="SYSTEM_ERR">
          <description>Standard error output.</description>
        </value>
      </values>
      <description>Enumeration of console destinations.</description>
    </scalar>
    <scalar className="org.apache.logging.log4j.core.appender.rolling.action.Duration">
      <description>Simplified implementation of the ISO-8601 Durations standard.

The supported format is `PnDTnHnMnS`, with 'P' and 'T' optional.
Days are considered to be exactly 24 hours.

Similarly to the `java. time. Duration` class, this class does not support year or month sections in the format.
This implementation does not support fractions or negative values.</description>
    </scalar>
    <scalar className="org.apache.logging.log4j.core.async.JCToolsBlockingQueueFactory.WaitStrategy">
      <values>
        <value name="SPIN"></value>
        <value name="YIELD"></value>
        <value name="PARK"></value>
        <value name="PROGRESSIVE"></value>
      </values>
    </scalar>
    <scalar className="org.apache.logging.log4j.core.layout.GelfLayout.CompressionType">
      <values>
        <value name="GZIP"></value>
        <value name="ZLIB"></value>
        <value name="OFF"></value>
      </values>
    </scalar>
    <scalar className="org.apache.logging.log4j.core.layout.HtmlLayout.FontSize">
      <values>
        <value name="SMALLER"></value>
        <value name="XXSMALL"></value>
        <value name="XSMALL"></value>
        <value name="SMALL"></value>
        <value name="MEDIUM"></value>
        <value name="LARGE"></value>
        <value name="XLARGE"></value>
        <value name="XXLARGE"></value>
        <value name="LARGER"></value>
      </values>
      <description>Possible font sizes</description>
    </scalar>
    <scalar className="org.apache.logging.log4j.core.net.Facility">
      <values>
        <value name="KERN">
          <description>Kernel messages.</description>
        </value>
        <value name="USER">
          <description>User level messages.</description>
        </value>
        <value name="MAIL">
          <description>Mail system.</description>
        </value>
        <value name="DAEMON">
          <description>System daemons.</description>
        </value>
        <value name="AUTH">
          <description>Security/Authorization messages.</description>
        </value>
        <value name="SYSLOG">
          <description>Messages generated by syslogd.</description>
        </value>
        <value name="LPR">
          <description>Line printer subsystem.</description>
        </value>
        <value name="NEWS">
          <description>Network news subsystem.</description>
        </value>
        <value name="UUCP">
          <description>UUCP subsystem.</description>
        </value>
        <value name="CRON">
          <description>Clock daemon.</description>
        </value>
        <value name="AUTHPRIV">
          <description>Security/Authorization messages.</description>
        </value>
        <value name="FTP">
          <description>FTP daemon.</description>
        </value>
        <value name="NTP">
          <description>NTP subsystem.</description>
        </value>
        <value name="LOG_AUDIT">
          <description>Log audit.</description>
        </value>
        <value name="LOG_ALERT">
          <description>Log alert.</description>
        </value>
        <value name="CLOCK">
          <description>Clock daemon.</description>
        </value>
        <value name="LOCAL0">
          <description>Local use 0.</description>
        </value>
        <value name="LOCAL1">
          <description>Local use 1.</description>
        </value>
        <value name="LOCAL2">
          <description>Local use 2.</description>
        </value>
        <value name="LOCAL3">
          <description>Local use 3.</description>
        </value>
        <value name="LOCAL4">
          <description>Local use 4.</description>
        </value>
        <value name="LOCAL5">
          <description>Local use 5.</description>
        </value>
        <value name="LOCAL6">
          <description>Local use 6.</description>
        </value>
        <value name="LOCAL7">
          <description>Local use 7.</description>
        </value>
      </values>
      <description>The facility codes used by the Syslog system.

[cols="1,1"]
|===

h| Numerical Code
h| Facility

h| Facility
| 0
| kernel messages

| 1
| user-level messages

| 2
| mail system

| 3
| system daemons

| 4
| security/authorization messages

| 5
| messages generated internally by syslogd

| 6
| line printer subsystem

| 7
| network news subsystem

| 8
| UUCP subsystem

| 9
| clock daemon

| 10
| security/authorization messages

| 11
| FTP daemon

| 12
| NTP subsystem

| 13
| log audit

| 14
| log alert

| 15
| clock daemon (note 2)

| 16
| local use 0 (local0)

| 17
| local use 1 (local1)

| 18
| local use 2 (local2)

| 19
| local use 3 (local3)

| 20
| local use 4 (local4)

| 21
| local use 5 (local5)

| 22
| local use 6 (local6)

| 23
| local use 7 (local7)

|===</description>
    </scalar>
    <scalar className="org.apache.logging.log4j.core.net.Protocol">
      <values>
        <value name="TCP">
          <description>TCP Protocol.</description>
        </value>
        <value name="SSL">
          <description>SSL Protocol.</description>
        </value>
        <value name="UDP">
          <description>UDP Protocol.</description>
        </value>
      </values>
      <description>Enumerates the supported protocols.</description>
    </scalar>
    <scalar className="org.apache.logging.log4j.core.net.Rfc1349TrafficClass">
      <values>
        <value name="IPTOS_NORMAL">
          <description>IPTOS_NORMAL (0x00)</description>
        </value>
        <value name="IPTOS_LOWCOST">
          <description>IPTOS_LOWCOST (0x02)</description>
        </value>
        <value name="IPTOS_LOWDELAY">
          <description>IPTOS_LOWDELAY (0x10)</description>
        </value>
        <value name="IPTOS_RELIABILITY">
          <description>IPTOS_RELIABILITY (0x04)</description>
        </value>
        <value name="IPTOS_THROUGHPUT">
          <description>IPTOS_THROUGHPUT (0x08)</description>
        </value>
      </values>
      <description>Enumerates the RFC 1349 TOS field.

* `IPTOS_LOWCOST (0x02)`
* `IPTOS_RELIABILITY (0x04)`
* `IPTOS_THROUGHPUT (0x08)`
* `IPTOS_LOWDELAY (0x10)`
*</description>
    </scalar>
  </scalars>
  <plugins>
    <plugin name="AppenderSet" className="org.apache.logging.log4j.core.appender.AppenderSet">
      <supertypes>
        <supertype>java.lang.Object</supertype>
      </supertypes>
      <description>A deferred plugin for appenders.</description>
    </plugin>
    <plugin name="Async" className="org.apache.logging.log4j.core.appender.AsyncAppender">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.AbstractLifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.Appender</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle2</supertype>
        <supertype>org.apache.logging.log4j.core.appender.AbstractAppender</supertype>
        <supertype>org.apache.logging.log4j.core.filter.AbstractFilterable</supertype>
        <supertype>org.apache.logging.log4j.core.filter.Filterable</supertype>
        <supertype>org.apache.logging.log4j.core.impl.LocationAware</supertype>
      </supertypes>
      <attributes>
        <attribute name="blocking" type="boolean"></attribute>
        <attribute name="bufferSize" type="int"></attribute>
        <attribute name="errorRef"></attribute>
        <attribute name="ignoreExceptions" type="boolean"></attribute>
        <attribute name="includeLocation" type="boolean"></attribute>
        <attribute name="name" required="true"></attribute>
        <attribute name="shutdownTimeout" type="long"></attribute>
      </attributes>
      <elements>
        <element type="org.apache.logging.log4j.core.Filter"></element>
        <element type="org.apache.logging.log4j.core.async.BlockingQueueFactory"></element>
        <element multiplicity="*" required="true" type="org.apache.logging.log4j.core.config.AppenderRef"></element>
        <element multiplicity="*" type="org.apache.logging.log4j.core.config.Property"></element>
      </elements>
      <description>Appends to one or more Appenders asynchronously.

You can configure an AsyncAppender with one or more Appenders and an Appender to append to if the queue is full.
The AsyncAppender does not allow a filter to be specified on the Appender references.</description>
    </plugin>
    <plugin name="Console" className="org.apache.logging.log4j.core.appender.ConsoleAppender">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.AbstractLifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.Appender</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle2</supertype>
        <supertype>org.apache.logging.log4j.core.appender.AbstractAppender</supertype>
        <supertype>org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender</supertype>
        <supertype>org.apache.logging.log4j.core.filter.AbstractFilterable</supertype>
        <supertype>org.apache.logging.log4j.core.filter.Filterable</supertype>
        <supertype>org.apache.logging.log4j.core.impl.LocationAware</supertype>
      </supertypes>
      <attributes>
        <attribute name="bufferSize" type="int"></attribute>
        <attribute name="bufferedIo" type="boolean"></attribute>
        <attribute name="direct" type="boolean"></attribute>
        <attribute name="follow" type="boolean"></attribute>
        <attribute name="ignoreExceptions" type="boolean"></attribute>
        <attribute name="immediateFlush" type="boolean"></attribute>
        <attribute name="name" required="true"></attribute>
        <attribute name="target" type="org.apache.logging.log4j.core.appender.ConsoleAppender.Target" required="true"></attribute>
      </attributes>
      <elements>
        <element type="org.apache.logging.log4j.core.Filter"></element>
        <element type="org.apache.logging.log4j.core.Layout"></element>
        <element multiplicity="*" type="org.apache.logging.log4j.core.config.Property"></element>
      </elements>
      <description>Appends log events to `System. out` or `System. err` using a layout specified by the user.

The default target is `System. out`.

TODO Accessing `System. out` or `System. err` as a byte stream instead of a writer bypasses the JVM's knowledge of the proper encoding.
(RG) Encoding is handled within the Layout.
Typically, a Layout will generate a String and then call getBytes which may use a configured encoding or the system default.
OTOH, a Writer cannot print byte streams.</description>
    </plugin>
    <plugin name="CountingNoOp" className="org.apache.logging.log4j.core.appender.CountingNoOpAppender">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.AbstractLifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.Appender</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle2</supertype>
        <supertype>org.apache.logging.log4j.core.appender.AbstractAppender</supertype>
        <supertype>org.apache.logging.log4j.core.filter.AbstractFilterable</supertype>
        <supertype>org.apache.logging.log4j.core.filter.Filterable</supertype>
        <supertype>org.apache.logging.log4j.core.impl.LocationAware</supertype>
      </supertypes>
      <attributes>
        <attribute name="name"></attribute>
      </attributes>
      <description>No-Operation Appender that counts events.</description>
    </plugin>
    <plugin name="Failover" className="org.apache.logging.log4j.core.appender.FailoverAppender">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.AbstractLifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.Appender</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle2</supertype>
        <supertype>org.apache.logging.log4j.core.appender.AbstractAppender</supertype>
        <supertype>org.apache.logging.log4j.core.filter.AbstractFilterable</supertype>
        <supertype>org.apache.logging.log4j.core.filter.Filterable</supertype>
        <supertype>org.apache.logging.log4j.core.impl.LocationAware</supertype>
      </supertypes>
      <attributes>
        <attribute name="ignoreExceptions">
          <description>If `"true"` (default) exceptions encountered when appending events are logged; otherwise they are propagated to the caller.</description>
        </attribute>
        <attribute name="name">
          <description>The name of the Appender (required).</description>
        </attribute>
        <attribute name="primary">
          <description>The name of the primary Appender (required).</description>
        </attribute>
        <attribute name="retryIntervalSeconds">
          <description>The retry interval in seconds.</description>
        </attribute>
      </attributes>
      <elements>
        <element multiplicity="*" type="java.lang.String">
          <description>The name of one or more Appenders to fail over to (at least one is required).</description>
        </element>
        <element type="org.apache.logging.log4j.core.Filter">
          <description>A Filter (optional).</description>
        </element>
      </elements>
      <description>The FailoverAppender will capture exceptions in an Appender and then route the event to a different appender.

Hopefully it is obvious that the Appenders must be configured to not suppress exceptions for the FailoverAppender to work.</description>
    </plugin>
    <plugin name="failovers" className="org.apache.logging.log4j.core.appender.FailoversPlugin">
      <supertypes>
        <supertype>java.lang.Object</supertype>
      </supertypes>
      <elements>
        <element multiplicity="*" type="org.apache.logging.log4j.core.config.AppenderRef">
          <description>The references to return.</description>
        </element>
      </elements>
      <description>The array of failover Appenders.</description>
    </plugin>
    <plugin name="File" className="org.apache.logging.log4j.core.appender.FileAppender">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.AbstractLifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.Appender</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle2</supertype>
        <supertype>org.apache.logging.log4j.core.appender.AbstractAppender</supertype>
        <supertype>org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender</supertype>
        <supertype>org.apache.logging.log4j.core.filter.AbstractFilterable</supertype>
        <supertype>org.apache.logging.log4j.core.filter.Filterable</supertype>
        <supertype>org.apache.logging.log4j.core.impl.LocationAware</supertype>
      </supertypes>
      <attributes>
        <attribute name="advertise" type="boolean"></attribute>
        <attribute name="advertiseUri"></attribute>
        <attribute name="append" type="boolean"></attribute>
        <attribute name="bufferSize" type="int"></attribute>
        <attribute name="bufferedIo" type="boolean"></attribute>
        <attribute name="createOnDemand" type="boolean"></attribute>
        <attribute name="fileGroup"></attribute>
        <attribute name="fileName" required="true"></attribute>
        <attribute name="fileOwner"></attribute>
        <attribute name="filePermissions"></attribute>
        <attribute name="ignoreExceptions" type="boolean"></attribute>
        <attribute name="immediateFlush" type="boolean"></attribute>
        <attribute name="locking" type="boolean"></attribute>
        <attribute name="name" required="true"></attribute>
      </attributes>
      <elements>
        <element type="org.apache.logging.log4j.core.Filter"></element>
        <element type="org.apache.logging.log4j.core.Layout"></element>
        <element multiplicity="*" type="org.apache.logging.log4j.core.config.Property"></element>
      </elements>
      <description>File Appender.</description>
    </plugin>
    <plugin name="Http" className="org.apache.logging.log4j.core.appender.HttpAppender">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.AbstractLifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.Appender</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle2</supertype>
        <supertype>org.apache.logging.log4j.core.appender.AbstractAppender</supertype>
        <supertype>org.apache.logging.log4j.core.filter.AbstractFilterable</supertype>
        <supertype>org.apache.logging.log4j.core.filter.Filterable</supertype>
        <supertype>org.apache.logging.log4j.core.impl.LocationAware</supertype>
      </supertypes>
      <attributes>
        <attribute name="connectTimeoutMillis" type="int"></attribute>
        <attribute name="ignoreExceptions" type="boolean"></attribute>
        <attribute name="method"></attribute>
        <attribute name="name" required="true"></attribute>
        <attribute name="readTimeoutMillis" type="int"></attribute>
        <attribute name="url" type="java.net.URL" required="true"></attribute>
        <attribute name="verifyHostname" type="boolean"></attribute>
      </attributes>
      <elements>
        <element type="org.apache.logging.log4j.core.Filter"></element>
        <element type="org.apache.logging.log4j.core.Layout"></element>
        <element multiplicity="*" type="org.apache.logging.log4j.core.config.Property"></element>
        <element type="org.apache.logging.log4j.core.net.ssl.SslConfiguration"></element>
      </elements>
      <description>Sends log events over HTTP.</description>
    </plugin>
    <plugin name="MemoryMappedFile" className="org.apache.logging.log4j.core.appender.MemoryMappedFileAppender">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.AbstractLifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.Appender</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle2</supertype>
        <supertype>org.apache.logging.log4j.core.appender.AbstractAppender</supertype>
        <supertype>org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender</supertype>
        <supertype>org.apache.logging.log4j.core.filter.AbstractFilterable</supertype>
        <supertype>org.apache.logging.log4j.core.filter.Filterable</supertype>
        <supertype>org.apache.logging.log4j.core.impl.LocationAware</supertype>
      </supertypes>
      <attributes>
        <attribute name="advertise" type="boolean"></attribute>
        <attribute name="advertiseURI"></attribute>
        <attribute name="append" type="boolean"></attribute>
        <attribute name="bufferSize" type="int"></attribute>
        <attribute name="bufferedIo" type="boolean"></attribute>
        <attribute name="fileName"></attribute>
        <attribute name="ignoreExceptions" type="boolean"></attribute>
        <attribute name="immediateFlush" type="boolean"></attribute>
        <attribute name="name" required="true"></attribute>
        <attribute name="regionLength" type="int"></attribute>
      </attributes>
      <elements>
        <element type="org.apache.logging.log4j.core.Filter"></element>
        <element type="org.apache.logging.log4j.core.Layout"></element>
        <element multiplicity="*" type="org.apache.logging.log4j.core.config.Property"></element>
      </elements>
      <description>Memory Mapped File Appender.</description>
    </plugin>
    <plugin name="Null" className="org.apache.logging.log4j.core.appender.NullAppender">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.AbstractLifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.Appender</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle2</supertype>
        <supertype>org.apache.logging.log4j.core.appender.AbstractAppender</supertype>
        <supertype>org.apache.logging.log4j.core.filter.AbstractFilterable</supertype>
        <supertype>org.apache.logging.log4j.core.filter.Filterable</supertype>
        <supertype>org.apache.logging.log4j.core.impl.LocationAware</supertype>
      </supertypes>
      <attributes>
        <attribute name="name"></attribute>
      </attributes>
      <description>An Appender that ignores log events.

Use for compatibility with version 1.2 and handy for composing a apiref:ScriptAppenderSelector[].</description>
    </plugin>
    <plugin name="OutputStream" className="org.apache.logging.log4j.core.appender.OutputStreamAppender">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.AbstractLifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.Appender</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle2</supertype>
        <supertype>org.apache.logging.log4j.core.appender.AbstractAppender</supertype>
        <supertype>org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender</supertype>
        <supertype>org.apache.logging.log4j.core.filter.AbstractFilterable</supertype>
        <supertype>org.apache.logging.log4j.core.filter.Filterable</supertype>
        <supertype>org.apache.logging.log4j.core.impl.LocationAware</supertype>
      </supertypes>
      <attributes>
        <attribute name="bufferSize" type="int"></attribute>
        <attribute name="bufferedIo" type="boolean"></attribute>
        <attribute name="ignoreExceptions" type="boolean"></attribute>
        <attribute name="immediateFlush" type="boolean"></attribute>
        <attribute name="name" required="true"></attribute>
      </attributes>
      <elements>
        <element type="org.apache.logging.log4j.core.Filter"></element>
        <element type="org.apache.logging.log4j.core.Layout"></element>
        <element multiplicity="*" type="org.apache.logging.log4j.core.config.Property"></element>
      </elements>
      <description>Appends log events to a given output stream using a layout.

Character encoding is handled within the Layout.</description>
    </plugin>
    <plugin name="RandomAccessFile" className="org.apache.logging.log4j.core.appender.RandomAccessFileAppender">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.AbstractLifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.Appender</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle2</supertype>
        <supertype>org.apache.logging.log4j.core.appender.AbstractAppender</supertype>
        <supertype>org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender</supertype>
        <supertype>org.apache.logging.log4j.core.filter.AbstractFilterable</supertype>
        <supertype>org.apache.logging.log4j.core.filter.Filterable</supertype>
        <supertype>org.apache.logging.log4j.core.impl.LocationAware</supertype>
      </supertypes>
      <attributes>
        <attribute name="advertise" type="boolean"></attribute>
        <attribute name="advertiseURI"></attribute>
        <attribute name="append" type="boolean"></attribute>
        <attribute name="bufferSize" type="int"></attribute>
        <attribute name="bufferedIo" type="boolean"></attribute>
        <attribute name="fileName"></attribute>
        <attribute name="ignoreExceptions" type="boolean"></attribute>
        <attribute name="immediateFlush" type="boolean"></attribute>
        <attribute name="name" required="true"></attribute>
      </attributes>
      <elements>
        <element type="org.apache.logging.log4j.core.Filter"></element>
        <element type="org.apache.logging.log4j.core.Layout"></element>
        <element multiplicity="*" type="org.apache.logging.log4j.core.config.Property"></element>
      </elements>
      <description>File Appender.</description>
    </plugin>
    <plugin name="RollingFile" className="org.apache.logging.log4j.core.appender.RollingFileAppender">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.AbstractLifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.Appender</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle2</supertype>
        <supertype>org.apache.logging.log4j.core.appender.AbstractAppender</supertype>
        <supertype>org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender</supertype>
        <supertype>org.apache.logging.log4j.core.filter.AbstractFilterable</supertype>
        <supertype>org.apache.logging.log4j.core.filter.Filterable</supertype>
        <supertype>org.apache.logging.log4j.core.impl.LocationAware</supertype>
      </supertypes>
      <attributes>
        <attribute name="advertise" type="boolean"></attribute>
        <attribute name="advertiseUri"></attribute>
        <attribute name="append" type="boolean"></attribute>
        <attribute name="bufferSize" type="int"></attribute>
        <attribute name="bufferedIo" type="boolean"></attribute>
        <attribute name="createOnDemand" type="boolean"></attribute>
        <attribute name="fileGroup"></attribute>
        <attribute name="fileName"></attribute>
        <attribute name="fileOwner"></attribute>
        <attribute name="filePattern" required="true"></attribute>
        <attribute name="filePermissions"></attribute>
        <attribute name="ignoreExceptions" type="boolean"></attribute>
        <attribute name="immediateFlush" type="boolean"></attribute>
        <attribute name="locking" type="boolean"></attribute>
        <attribute name="name" required="true"></attribute>
      </attributes>
      <elements>
        <element type="org.apache.logging.log4j.core.Filter"></element>
        <element type="org.apache.logging.log4j.core.Layout"></element>
        <element type="org.apache.logging.log4j.core.appender.rolling.RolloverStrategy"></element>
        <element required="true" type="org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy"></element>
        <element multiplicity="*" type="org.apache.logging.log4j.core.config.Property"></element>
      </elements>
      <description>An appender that writes to files and can roll over at intervals.</description>
    </plugin>
    <plugin name="RollingRandomAccessFile" className="org.apache.logging.log4j.core.appender.RollingRandomAccessFileAppender">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.AbstractLifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.Appender</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle2</supertype>
        <supertype>org.apache.logging.log4j.core.appender.AbstractAppender</supertype>
        <supertype>org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender</supertype>
        <supertype>org.apache.logging.log4j.core.filter.AbstractFilterable</supertype>
        <supertype>org.apache.logging.log4j.core.filter.Filterable</supertype>
        <supertype>org.apache.logging.log4j.core.impl.LocationAware</supertype>
      </supertypes>
      <attributes>
        <attribute name="advertise" type="boolean"></attribute>
        <attribute name="advertiseURI"></attribute>
        <attribute name="append" type="boolean"></attribute>
        <attribute name="bufferSize" type="int"></attribute>
        <attribute name="bufferedIo" type="boolean"></attribute>
        <attribute name="fileGroup"></attribute>
        <attribute name="fileName"></attribute>
        <attribute name="fileOwner"></attribute>
        <attribute name="filePattern"></attribute>
        <attribute name="filePermissions"></attribute>
        <attribute name="ignoreExceptions" type="boolean"></attribute>
        <attribute name="immediateFlush" type="boolean"></attribute>
        <attribute name="name" required="true"></attribute>
      </attributes>
      <elements>
        <element type="org.apache.logging.log4j.core.Filter"></element>
        <element type="org.apache.logging.log4j.core.Layout"></element>
        <element type="org.apache.logging.log4j.core.appender.rolling.RolloverStrategy"></element>
        <element type="org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy"></element>
        <element multiplicity="*" type="org.apache.logging.log4j.core.config.Property"></element>
      </elements>
      <description>An appender that writes to random access files and can roll over at intervals.</description>
    </plugin>
    <plugin name="ScriptAppenderSelector" className="org.apache.logging.log4j.core.appender.ScriptAppenderSelector">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.AbstractLifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.Appender</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle2</supertype>
        <supertype>org.apache.logging.log4j.core.appender.AbstractAppender</supertype>
        <supertype>org.apache.logging.log4j.core.filter.AbstractFilterable</supertype>
        <supertype>org.apache.logging.log4j.core.filter.Filterable</supertype>
        <supertype>org.apache.logging.log4j.core.impl.LocationAware</supertype>
      </supertypes>
      <attributes>
        <attribute name="name" required="true"></attribute>
      </attributes>
      <elements>
        <element required="true" type="org.apache.logging.log4j.core.appender.AppenderSet"></element>
        <element required="true" type="org.apache.logging.log4j.core.script.AbstractScript"></element>
      </elements>
    </plugin>
    <plugin name="SMTP" className="org.apache.logging.log4j.core.appender.SmtpAppender">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.AbstractLifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.Appender</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle2</supertype>
        <supertype>org.apache.logging.log4j.core.appender.AbstractAppender</supertype>
        <supertype>org.apache.logging.log4j.core.filter.AbstractFilterable</supertype>
        <supertype>org.apache.logging.log4j.core.filter.Filterable</supertype>
        <supertype>org.apache.logging.log4j.core.impl.LocationAware</supertype>
      </supertypes>
      <attributes>
        <attribute name="bcc">
          <description>Comma-separated list of BCC email addresses.</description>
        </attribute>
        <attribute name="bufferSize" type="int">
          <description>Number of log events to buffer before sending an email.

Defaults to .</description>
        </attribute>
        <attribute name="cc">
          <description>Comma-separated list of CC email addresses.</description>
        </attribute>
        <attribute name="from">
          <description>Email address of the sender.</description>
        </attribute>
        <attribute name="ignoreExceptions" type="boolean"></attribute>
        <attribute name="name" required="true"></attribute>
        <attribute name="replyTo">
          <description>Comma-separated list of Reply-To email addresses.</description>
        </attribute>
        <attribute name="smtpDebug" type="boolean">
          <description>Enables or disables mail session debugging on STDOUT.

Disabled by default.</description>
        </attribute>
        <attribute name="smtpHost">
          <description>Host name of SMTP server to send messages through.</description>
        </attribute>
        <attribute name="smtpPassword">
          <description>Password to authenticate with SMTP server.</description>
        </attribute>
        <attribute name="smtpPort" type="int">
          <description>Port number of SMTP server to send messages through.</description>
        </attribute>
        <attribute name="smtpProtocol">
          <description>Transport protocol to use for SMTP such as "smtp" or "smtps".

Defaults to "smtp".</description>
        </attribute>
        <attribute name="smtpUsername">
          <description>Username to authenticate with SMTP server.</description>
        </attribute>
        <attribute name="subject">
          <description>Subject template for the email messages.</description>
        </attribute>
        <attribute name="to">
          <description>Comma-separated list of recipient email addresses.</description>
        </attribute>
      </attributes>
      <elements>
        <element type="org.apache.logging.log4j.core.Filter">
          <description>Specifies the filter used for this appender.

By default, uses a apiref:ThresholdFilter[] with a level of ERROR.</description>
        </element>
        <element type="org.apache.logging.log4j.core.Layout">
          <description>Specifies the layout used for the email message body.

By default, this uses the apiref:HtmlLayout[].</description>
        </element>
        <element multiplicity="*" type="org.apache.logging.log4j.core.config.Property"></element>
        <element type="org.apache.logging.log4j.core.net.ssl.SslConfiguration">
          <description>Specifies an SSL configuration for smtps connections.</description>
        </element>
      </elements>
      <description>Send an e-mail when a specific logging event occurs, typically on errors or fatal errors.

The number of logging events delivered in this e-mail depend on the value of *BufferSize* option.
The `SmtpAppender` keeps only the last `BufferSize` logging events in its cyclic buffer.
This keeps memory requirements at a reasonable level while still delivering useful application context.
By default, an email message will formatted as HTML.
This can be modified by setting a layout for the appender.
By default, an email message will be sent when an ERROR or higher severity message is appended.
This can be modified by setting a filter for the appender.</description>
    </plugin>
    <plugin name="Socket" className="org.apache.logging.log4j.core.appender.SocketAppender">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.AbstractLifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.Appender</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle2</supertype>
        <supertype>org.apache.logging.log4j.core.appender.AbstractAppender</supertype>
        <supertype>org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender</supertype>
        <supertype>org.apache.logging.log4j.core.filter.AbstractFilterable</supertype>
        <supertype>org.apache.logging.log4j.core.filter.Filterable</supertype>
        <supertype>org.apache.logging.log4j.core.impl.LocationAware</supertype>
      </supertypes>
      <attributes>
        <attribute name="advertise" type="boolean"></attribute>
        <attribute name="bufferSize" type="int"></attribute>
        <attribute name="bufferedIo" type="boolean"></attribute>
        <attribute name="connectTimeoutMillis" type="int"></attribute>
        <attribute name="host"></attribute>
        <attribute name="ignoreExceptions" type="boolean"></attribute>
        <attribute name="immediateFail" type="boolean"></attribute>
        <attribute name="immediateFlush" type="boolean"></attribute>
        <attribute name="name" required="true"></attribute>
        <attribute name="port" type="int"></attribute>
        <attribute name="protocol" type="org.apache.logging.log4j.core.net.Protocol"></attribute>
        <attribute name="reconnectDelayMillis" type="int"></attribute>
      </attributes>
      <elements>
        <element type="org.apache.logging.log4j.core.Filter"></element>
        <element type="org.apache.logging.log4j.core.Layout"></element>
        <element multiplicity="*" type="org.apache.logging.log4j.core.config.Property"></element>
        <element type="org.apache.logging.log4j.core.net.SocketOptions"></element>
        <element type="org.apache.logging.log4j.core.net.ssl.SslConfiguration"></element>
      </elements>
      <description>An Appender that delivers events over socket connections.

Supports both TCP and UDP.</description>
    </plugin>
    <plugin name="Syslog" className="org.apache.logging.log4j.core.appender.SyslogAppender">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.AbstractLifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.Appender</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle2</supertype>
        <supertype>org.apache.logging.log4j.core.appender.AbstractAppender</supertype>
        <supertype>org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender</supertype>
        <supertype>org.apache.logging.log4j.core.appender.SocketAppender</supertype>
        <supertype>org.apache.logging.log4j.core.filter.AbstractFilterable</supertype>
        <supertype>org.apache.logging.log4j.core.filter.Filterable</supertype>
        <supertype>org.apache.logging.log4j.core.impl.LocationAware</supertype>
      </supertypes>
      <attributes>
        <attribute name="advertise" type="boolean"></attribute>
        <attribute name="appName"></attribute>
        <attribute name="bufferSize" type="int"></attribute>
        <attribute name="bufferedIo" type="boolean"></attribute>
        <attribute name="charset" type="java.nio.charset.Charset"></attribute>
        <attribute name="connectTimeoutMillis" type="int"></attribute>
        <attribute name="enterpriseNumber"></attribute>
        <attribute name="eventPrefix"></attribute>
        <attribute name="exceptionPattern"></attribute>
        <attribute name="facility" type="org.apache.logging.log4j.core.net.Facility"></attribute>
        <attribute name="format"></attribute>
        <attribute name="host"></attribute>
        <attribute name="id"></attribute>
        <attribute name="ignoreExceptions" type="boolean"></attribute>
        <attribute name="immediateFail" type="boolean"></attribute>
        <attribute name="immediateFlush" type="boolean"></attribute>
        <attribute name="includeMdc" type="boolean"></attribute>
        <attribute name="mdcExcludes"></attribute>
        <attribute name="mdcId"></attribute>
        <attribute name="mdcIncludes"></attribute>
        <attribute name="mdcPrefix"></attribute>
        <attribute name="mdcRequired"></attribute>
        <attribute name="messageId"></attribute>
        <attribute name="name" required="true"></attribute>
        <attribute name="newLine" type="boolean"></attribute>
        <attribute name="newLineEscape"></attribute>
        <attribute name="port" type="int"></attribute>
        <attribute name="protocol" type="org.apache.logging.log4j.core.net.Protocol"></attribute>
        <attribute name="reconnectDelayMillis" type="int"></attribute>
      </attributes>
      <elements>
        <element type="org.apache.logging.log4j.core.Filter"></element>
        <element type="org.apache.logging.log4j.core.Layout"></element>
        <element multiplicity="*" type="org.apache.logging.log4j.core.config.Property"></element>
        <element multiplicity="*" type="org.apache.logging.log4j.core.layout.LoggerFields"></element>
        <element type="org.apache.logging.log4j.core.net.SocketOptions"></element>
        <element type="org.apache.logging.log4j.core.net.ssl.SslConfiguration"></element>
      </elements>
      <description>The Syslog Appender.</description>
    </plugin>
    <plugin name="Writer" className="org.apache.logging.log4j.core.appender.WriterAppender">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.AbstractLifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.Appender</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle2</supertype>
        <supertype>org.apache.logging.log4j.core.appender.AbstractAppender</supertype>
        <supertype>org.apache.logging.log4j.core.appender.AbstractWriterAppender</supertype>
        <supertype>org.apache.logging.log4j.core.filter.AbstractFilterable</supertype>
        <supertype>org.apache.logging.log4j.core.filter.Filterable</supertype>
        <supertype>org.apache.logging.log4j.core.impl.LocationAware</supertype>
      </supertypes>
      <attributes>
        <attribute name="ignoreExceptions" type="boolean"></attribute>
        <attribute name="name" required="true"></attribute>
      </attributes>
      <elements>
        <element type="org.apache.logging.log4j.core.Filter"></element>
        <element type="org.apache.logging.log4j.core.Layout"></element>
        <element multiplicity="*" type="org.apache.logging.log4j.core.config.Property"></element>
      </elements>
      <description>Appends log events to a apiref:Writer[].</description>
    </plugin>
    <plugin name="ColumnMapping" className="org.apache.logging.log4j.core.appender.db.ColumnMapping">
      <supertypes>
        <supertype>java.lang.Object</supertype>
      </supertypes>
      <attributes>
        <attribute name="columnType" type="java.lang.Class" required="true">
          <description>Class to convert value to before storing in database.

If the type is compatible with apiref:ThreadContextMap[] or apiref:ReadOnlyStringMap[], then the MDC will be used.
If the type is compatible with apiref:ThreadContextStack[], then the NDC will be used.
If the type is compatible with apiref:Date[], then the event timestamp will be used.</description>
        </attribute>
        <attribute name="literal">
          <description>Literal value to use for populating a column.

This is generally useful for functions, stored procedures, etc.
No escaping will be done on this value.</description>
        </attribute>
        <attribute name="name" required="true">
          <description>Column name.</description>
        </attribute>
        <attribute name="parameter">
          <description>Parameter value to use for populating a column, MUST contain a single parameter marker '?'.

This is generally useful for functions, stored procedures, etc.
No escaping will be done on this value.</description>
        </attribute>
        <attribute name="pattern">
          <description>Pattern to use as a apiref:PatternLayout[].

Convenient shorthand for xref:.adoc[] with a PatternLayout.</description>
        </attribute>
        <attribute name="source">
          <description>Source name.

Useful when combined with a xref:org.apache.logging.log4j.message.MapMessage.adoc[MapMessage] depending on the appender.</description>
        </attribute>
        <attribute name="type" type="java.lang.Class"></attribute>
      </attributes>
      <elements>
        <element type="org.apache.logging.log4j.core.StringLayout">
          <description>Layout of value to write to database (before type conversion).

Not applicable if xref:.adoc[] is a apiref:ReadOnlyStringMap[], apiref:ThreadContextMap[], or xref:ThreadContextStack.adoc[].</description>
        </element>
      </elements>
      <description>A configuration element for specifying a database column name mapping.</description>
    </plugin>
    <plugin name="Column" className="org.apache.logging.log4j.core.appender.db.jdbc.ColumnConfig">
      <supertypes>
        <supertype>java.lang.Object</supertype>
      </supertypes>
      <attributes>
        <attribute name="isClob" type="boolean"></attribute>
        <attribute name="isEventTimestamp" type="boolean"></attribute>
        <attribute name="isUnicode" type="boolean"></attribute>
        <attribute name="literal">
          <description>The literal value to insert into the column as-is without any quoting or escaping.

Mutually exclusive with `pattern! =null` and `eventTimestamp=true`.</description>
        </attribute>
        <attribute name="name" required="true">
          <description>The name of the database column as it exists within the database table.</description>
        </attribute>
        <attribute name="pattern">
          <description>The apiref:PatternLayout[] pattern to insert in this column.

Mutually exclusive with `literal! =null` and `eventTimestamp=true`</description>
        </attribute>
      </attributes>
      <description>A configuration element used to configure which event properties are logged to which columns in the database table.</description>
    </plugin>
    <plugin name="DataSource" className="org.apache.logging.log4j.core.appender.db.jdbc.DataSourceConnectionSource">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.AbstractLifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle2</supertype>
        <supertype>org.apache.logging.log4j.core.appender.db.jdbc.AbstractConnectionSource</supertype>
        <supertype>org.apache.logging.log4j.core.appender.db.jdbc.ConnectionSource</supertype>
      </supertypes>
      <attributes>
        <attribute name="jndiName">
          <description>The full JNDI path where the data source is bound.
Must start with java:/comp/env or environment-equivalent.</description>
        </attribute>
      </attributes>
      <description>A apiref:JdbcAppender[] connection source that uses a apiref:DataSource[] to connect to the database.</description>
    </plugin>
    <plugin name="DriverManager" className="org.apache.logging.log4j.core.appender.db.jdbc.DriverManagerConnectionSource">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.AbstractLifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle2</supertype>
        <supertype>org.apache.logging.log4j.core.appender.db.jdbc.AbstractConnectionSource</supertype>
        <supertype>org.apache.logging.log4j.core.appender.db.jdbc.AbstractDriverManagerConnectionSource</supertype>
        <supertype>org.apache.logging.log4j.core.appender.db.jdbc.ConnectionSource</supertype>
      </supertypes>
      <attributes>
        <attribute name="connectionString" required="true"></attribute>
        <attribute name="driverClassName"></attribute>
        <attribute name="password"></attribute>
        <attribute name="userName"></attribute>
      </attributes>
      <elements>
        <element multiplicity="*" type="org.apache.logging.log4j.core.config.Property"></element>
      </elements>
      <description>A apiref:ConnectionSource[] that uses a JDBC connection string, a user name, and a password to call apiref:DriverManager[].

This plugin does not provide any connection pooling unless it is available through the connection string and driver itself.
This handy to get you off the ground without having to deal with JNDI.</description>
    </plugin>
    <plugin name="ConnectionFactory" className="org.apache.logging.log4j.core.appender.db.jdbc.FactoryMethodConnectionSource">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.AbstractLifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle2</supertype>
        <supertype>org.apache.logging.log4j.core.appender.db.jdbc.AbstractConnectionSource</supertype>
        <supertype>org.apache.logging.log4j.core.appender.db.jdbc.ConnectionSource</supertype>
      </supertypes>
      <attributes>
        <attribute name="class">
          <description>The name of a public class that contains a static method capable of returning either a apiref:DataSource[] or a apiref:Connection[].</description>
        </attribute>
        <attribute name="method">
          <description>The name of the public static method on the aforementioned class that returns the data source or connection.
If this method returns a apiref:Connection[], it should return a new connection every call.</description>
        </attribute>
      </attributes>
      <description>A apiref:JdbcAppender[] connection source that uses a public static factory method to obtain a apiref:Connection[] or xref:DataSource.adoc[].</description>
    </plugin>
    <plugin name="JDBC" className="org.apache.logging.log4j.core.appender.db.jdbc.JdbcAppender">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.AbstractLifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.Appender</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle2</supertype>
        <supertype>org.apache.logging.log4j.core.appender.AbstractAppender</supertype>
        <supertype>org.apache.logging.log4j.core.appender.db.AbstractDatabaseAppender</supertype>
        <supertype>org.apache.logging.log4j.core.filter.AbstractFilterable</supertype>
        <supertype>org.apache.logging.log4j.core.filter.Filterable</supertype>
        <supertype>org.apache.logging.log4j.core.impl.LocationAware</supertype>
      </supertypes>
      <attributes>
        <attribute name="bufferSize" type="int">
          <description>If an integer greater than 0, this causes the appender to buffer log events and flush whenever the buffer reaches this size.</description>
        </attribute>
        <attribute name="ignoreExceptions" type="boolean"></attribute>
        <attribute name="immediateFail" type="boolean"></attribute>
        <attribute name="name" required="true"></attribute>
        <attribute name="reconnectIntervalMillis" type="long"></attribute>
        <attribute name="tableName" required="true">
          <description>The name of the database table to insert log events into.</description>
        </attribute>
        <attribute name="truncateStrings" type="boolean"></attribute>
      </attributes>
      <elements>
        <element type="org.apache.logging.log4j.core.Filter"></element>
        <element type="org.apache.logging.log4j.core.Layout"></element>
        <element multiplicity="*" type="org.apache.logging.log4j.core.appender.db.ColumnMapping"></element>
        <element multiplicity="*" type="org.apache.logging.log4j.core.appender.db.jdbc.ColumnConfig">
          <description>Information about the columns that log event data should be inserted into and how to insert that data.</description>
        </element>
        <element required="true" type="org.apache.logging.log4j.core.appender.db.jdbc.ConnectionSource">
          <description>The connections source from which database connections should be retrieved.</description>
        </element>
        <element multiplicity="*" type="org.apache.logging.log4j.core.config.Property"></element>
      </elements>
      <description>This Appender writes logging events to a relational database using standard JDBC mechanisms.

It takes a list of apiref:ColumnConfig[]s and/or apiref:ColumnMapping[]s with which it determines how to save the event data into the appropriate columns in the table.
ColumnMapping is new as of Log4j 2.8 and supports apiref:TypeConverter[] and persistence using apiref:PreparedStatement[]. A xref:ConnectionSource.adoc[] plugin instance instructs the appender (and xref:JdbcDatabaseManager.adoc[]) how to connect to the database.
This appender can be reconfigured at run time.</description>
    </plugin>
    <plugin name="JMS" className="org.apache.logging.log4j.core.appender.mom.JmsAppender">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.AbstractLifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.Appender</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle2</supertype>
        <supertype>org.apache.logging.log4j.core.appender.AbstractAppender</supertype>
        <supertype>org.apache.logging.log4j.core.filter.AbstractFilterable</supertype>
        <supertype>org.apache.logging.log4j.core.filter.Filterable</supertype>
        <supertype>org.apache.logging.log4j.core.impl.LocationAware</supertype>
      </supertypes>
      <attributes>
        <attribute name="destinationBindingName" required="true"></attribute>
        <attribute name="factoryBindingName" required="true"></attribute>
        <attribute name="factoryName"></attribute>
        <attribute name="ignoreExceptions" type="boolean"></attribute>
        <attribute name="immediateFail" type="boolean"></attribute>
        <attribute name="name" required="true"></attribute>
        <attribute name="password"></attribute>
        <attribute name="providerUrl"></attribute>
        <attribute name="reconnectIntervalMillis" type="long"></attribute>
        <attribute name="securityCredentials"></attribute>
        <attribute name="securityPrincipalName"></attribute>
        <attribute name="urlPkgPrefixes"></attribute>
        <attribute name="userName"></attribute>
      </attributes>
      <elements>
        <element type="org.apache.logging.log4j.core.Filter"></element>
        <element type="org.apache.logging.log4j.core.Layout"></element>
        <element multiplicity="*" type="org.apache.logging.log4j.core.config.Property"></element>
      </elements>
      <description>Generic JMS Appender plugin for both queues and topics.

This Appender replaces the previous split ones.
However, configurations set up for the 2.0 version of the JMS appenders will still work.</description>
    </plugin>
    <plugin name="JeroMQ" className="org.apache.logging.log4j.core.appender.mom.jeromq.JeroMqAppender">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.AbstractLifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.Appender</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle2</supertype>
        <supertype>org.apache.logging.log4j.core.appender.AbstractAppender</supertype>
        <supertype>org.apache.logging.log4j.core.filter.AbstractFilterable</supertype>
        <supertype>org.apache.logging.log4j.core.filter.Filterable</supertype>
        <supertype>org.apache.logging.log4j.core.impl.LocationAware</supertype>
      </supertypes>
      <attributes>
        <attribute name="affinity" type="long"></attribute>
        <attribute name="backlog" type="long"></attribute>
        <attribute name="delayAttachOnConnect" type="boolean"></attribute>
        <attribute name="identity"></attribute>
        <attribute name="ignoreExceptions" type="boolean"></attribute>
        <attribute name="ipv4Only" type="boolean"></attribute>
        <attribute name="linger" type="long"></attribute>
        <attribute name="maxMsgSize" type="long"></attribute>
        <attribute name="name" required="true"></attribute>
        <attribute name="rcvHwm" type="long"></attribute>
        <attribute name="receiveBufferSize" type="long"></attribute>
        <attribute name="receiveTimeOut" type="int"></attribute>
        <attribute name="reconnectIVL" type="long"></attribute>
        <attribute name="reconnectIVLMax" type="long"></attribute>
        <attribute name="sendBufferSize" type="long"></attribute>
        <attribute name="sendTimeOut" type="int"></attribute>
        <attribute name="sndHwm" type="long"></attribute>
        <attribute name="tcpKeepAlive" type="int"></attribute>
        <attribute name="tcpKeepAliveCount" type="long"></attribute>
        <attribute name="tcpKeepAliveIdle" type="long"></attribute>
        <attribute name="tcpKeepAliveInterval" type="long"></attribute>
        <attribute name="xpubVerbose" type="boolean"></attribute>
      </attributes>
      <elements>
        <element type="org.apache.logging.log4j.core.Filter"></element>
        <element type="org.apache.logging.log4j.core.Layout"></element>
        <element multiplicity="*" type="org.apache.logging.log4j.core.config.Property"></element>
      </elements>
      <description>Sends log events to one or more ZeroMQ (JeroMQ) endpoints.

Requires the JeroMQ jar (LGPL as of 0.3.5)</description>
    </plugin>
    <plugin name="Kafka" className="org.apache.logging.log4j.core.appender.mom.kafka.KafkaAppender">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.AbstractLifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.Appender</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle2</supertype>
        <supertype>org.apache.logging.log4j.core.appender.AbstractAppender</supertype>
        <supertype>org.apache.logging.log4j.core.filter.AbstractFilterable</supertype>
        <supertype>org.apache.logging.log4j.core.filter.Filterable</supertype>
        <supertype>org.apache.logging.log4j.core.impl.LocationAware</supertype>
      </supertypes>
      <attributes>
        <attribute name="ignoreExceptions" type="boolean"></attribute>
        <attribute name="key"></attribute>
        <attribute name="name" required="true"></attribute>
        <attribute name="retryCount" type="int"></attribute>
        <attribute name="sendEventTimestamp" type="boolean"></attribute>
        <attribute name="syncSend" type="boolean"></attribute>
        <attribute name="topic"></attribute>
      </attributes>
      <elements>
        <element type="org.apache.logging.log4j.core.Filter"></element>
        <element type="org.apache.logging.log4j.core.Layout"></element>
        <element multiplicity="*" type="org.apache.logging.log4j.core.config.Property"></element>
      </elements>
      <description>Sends log events to an Apache Kafka topic.</description>
    </plugin>
    <plugin name="NoSql" className="org.apache.logging.log4j.core.appender.nosql.NoSqlAppender">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.AbstractLifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.Appender</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle2</supertype>
        <supertype>org.apache.logging.log4j.core.appender.AbstractAppender</supertype>
        <supertype>org.apache.logging.log4j.core.appender.db.AbstractDatabaseAppender</supertype>
        <supertype>org.apache.logging.log4j.core.filter.AbstractFilterable</supertype>
        <supertype>org.apache.logging.log4j.core.filter.Filterable</supertype>
        <supertype>org.apache.logging.log4j.core.impl.LocationAware</supertype>
      </supertypes>
      <attributes>
        <attribute name="bufferSize" type="int">
          <description>Sets the buffer size.</description>
        </attribute>
        <attribute name="ignoreExceptions" type="boolean"></attribute>
        <attribute name="name" required="true"></attribute>
      </attributes>
      <elements>
        <element type="org.apache.logging.log4j.core.Filter"></element>
        <element type="org.apache.logging.log4j.core.Layout"></element>
        <element type="org.apache.logging.log4j.core.appender.nosql.NoSqlProvider">
          <description>Sets the provider.</description>
        </element>
        <element multiplicity="*" type="org.apache.logging.log4j.core.config.Property"></element>
        <element multiplicity="*" type="org.apache.logging.log4j.core.util.KeyValuePair"></element>
      </elements>
      <description>This Appender writes logging events to a NoSQL database using a configured NoSQL provider.

It requires implementations of apiref:NoSqlObject[], apiref:NoSqlConnection[], and xref:NoSqlProvider.adoc[] to "know" how to write events to the chosen NoSQL database.

For examples on how to write your own NoSQL provider, see the simple source code for the MongoDB and CouchDB providers.</description>
    </plugin>
    <plugin name="LoggerNameLevelRewritePolicy" className="org.apache.logging.log4j.core.appender.rewrite.LoggerNameLevelRewritePolicy">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.appender.rewrite.RewritePolicy</supertype>
      </supertypes>
      <attributes>
        <attribute name="logger">
          <description>The logger name prefix for events to rewrite; all event logger names that start with this string will be rewritten.</description>
        </attribute>
      </attributes>
      <elements>
        <element multiplicity="*" type="org.apache.logging.log4j.core.util.KeyValuePair">
          <description>The levels to rewrite, the key is the source level, the value the target level.</description>
        </element>
      </elements>
      <description>Rewrites log event levels for a given logger name.</description>
    </plugin>
    <plugin name="MapRewritePolicy" className="org.apache.logging.log4j.core.appender.rewrite.MapRewritePolicy">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.appender.rewrite.RewritePolicy</supertype>
      </supertypes>
      <attributes>
        <attribute name="mode">
          <description>The string representation of the Mode.</description>
        </attribute>
      </attributes>
      <elements>
        <element multiplicity="*" type="org.apache.logging.log4j.core.util.KeyValuePair">
          <description>key/value pairs for the new Map keys and values.</description>
        </element>
      </elements>
      <description>This policy modifies events by replacing or possibly adding keys and values to the MapMessage.</description>
    </plugin>
    <plugin name="PropertiesRewritePolicy" className="org.apache.logging.log4j.core.appender.rewrite.PropertiesRewritePolicy">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.appender.rewrite.RewritePolicy</supertype>
      </supertypes>
      <elements>
        <element multiplicity="*" type="org.apache.logging.log4j.core.config.Property">
          <description>key/value pairs for the new keys and values.</description>
        </element>
      </elements>
      <description>This policy modifies events by replacing or possibly adding keys and values to the MapMessage.</description>
    </plugin>
    <plugin name="Rewrite" className="org.apache.logging.log4j.core.appender.rewrite.RewriteAppender">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.AbstractLifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.Appender</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle2</supertype>
        <supertype>org.apache.logging.log4j.core.appender.AbstractAppender</supertype>
        <supertype>org.apache.logging.log4j.core.filter.AbstractFilterable</supertype>
        <supertype>org.apache.logging.log4j.core.filter.Filterable</supertype>
        <supertype>org.apache.logging.log4j.core.impl.LocationAware</supertype>
      </supertypes>
      <attributes>
        <attribute name="ignoreExceptions">
          <description>If `"true"` (default) exceptions encountered when appending events are logged; otherwise they are propagated to the caller.</description>
        </attribute>
        <attribute name="name">
          <description>The name of the Appender.</description>
        </attribute>
      </attributes>
      <elements>
        <element type="org.apache.logging.log4j.core.Filter">
          <description>A Filter to filter events.</description>
        </element>
        <element type="org.apache.logging.log4j.core.appender.rewrite.RewritePolicy">
          <description>The policy to use to modify the event.</description>
        </element>
        <element multiplicity="*" type="org.apache.logging.log4j.core.config.AppenderRef">
          <description>An array of Appender names to call.</description>
        </element>
      </elements>
      <description>This Appender allows the logging event to be manipulated before it is processed by other Appenders.</description>
    </plugin>
    <plugin name="Policies" className="org.apache.logging.log4j.core.appender.rolling.CompositeTriggeringPolicy">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.AbstractLifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle2</supertype>
        <supertype>org.apache.logging.log4j.core.appender.rolling.AbstractTriggeringPolicy</supertype>
        <supertype>org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy</supertype>
      </supertypes>
      <elements>
        <element multiplicity="*" type="org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy">
          <description>The triggering policies.</description>
        </element>
      </elements>
      <description>Triggering policy that wraps other triggering policies.</description>
    </plugin>
    <plugin name="CronTriggeringPolicy" className="org.apache.logging.log4j.core.appender.rolling.CronTriggeringPolicy">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.AbstractLifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle2</supertype>
        <supertype>org.apache.logging.log4j.core.appender.rolling.AbstractTriggeringPolicy</supertype>
        <supertype>org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy</supertype>
      </supertypes>
      <attributes>
        <attribute name="evaluateOnStartup">
          <description>check if the file should be rolled over immediately.</description>
        </attribute>
        <attribute name="schedule">
          <description>the cron expression.</description>
        </attribute>
      </attributes>
      <description>Rolls a file over based on a cron schedule.</description>
    </plugin>
    <plugin name="DefaultRolloverStrategy" className="org.apache.logging.log4j.core.appender.rolling.DefaultRolloverStrategy">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.appender.rolling.AbstractRolloverStrategy</supertype>
        <supertype>org.apache.logging.log4j.core.appender.rolling.RolloverStrategy</supertype>
      </supertypes>
      <attributes>
        <attribute name="compressionLevel"></attribute>
        <attribute name="fileIndex"></attribute>
        <attribute name="max"></attribute>
        <attribute name="min"></attribute>
        <attribute name="stopCustomActionsOnError" type="boolean"></attribute>
        <attribute name="tempCompressedFilePattern"></attribute>
        <attribute name="compressionLevel">
          <description>The compression level, 0 (less) through 9 (more); applies only to ZIP files.</description>
        </attribute>
        <attribute name="fileIndex">
          <description>If set to "max" (the default), files with a higher index will be newer than files with a smaller index.
If set to "min", file renaming and the counter will follow the Fixed Window strategy.</description>
        </attribute>
        <attribute name="max">
          <description>The maximum number of files to keep.</description>
        </attribute>
        <attribute name="min">
          <description>The minimum number of files to keep.</description>
        </attribute>
        <attribute name="stopCustomActionsOnError" type="boolean">
          <description>whether to stop executing asynchronous actions if an error occurs</description>
        </attribute>
      </attributes>
      <elements>
        <element multiplicity="*" type="org.apache.logging.log4j.core.appender.rolling.action.Action"></element>
        <element multiplicity="*" type="org.apache.logging.log4j.core.appender.rolling.action.Action">
          <description>custom actions to perform asynchronously after rollover</description>
        </element>
      </elements>
      <description>When rolling over, `DefaultRolloverStrategy` renames files according to an algorithm as described below.

The DefaultRolloverStrategy is a combination of a time-based policy and a fixed-window policy.
When the file name pattern contains a date format then the rollover time interval will be used to calculate the time to use in the file pattern.
When the file pattern contains an integer replacement token one of the counting techniques will be used.

When the ascending attribute is set to true (the default) then the counter will be incremented and the current log file will be renamed to include the counter value.
If the counter hits the maximum value then the oldest file, which will have the smallest counter, will be deleted, all other files will be renamed to have their counter decremented and then the current file will be renamed to have the maximum counter value.
Note that with this counting strategy specifying a large maximum value may entirely avoid renaming files.

When the ascending attribute is false, then the "normal" fixed-window strategy will be used.

Let _max_ and _min_ represent the values of respectively the *MaxIndex* and *MinIndex* options.
Let "foo.
log" be the value of the *ActiveFile* option and "foo.
%i.log" the value of *FileNamePattern*. Then, when rolling over, the file `foo. _max_.log` will be deleted, the file `foo. _max-1_.log` will be renamed as `foo. _max_.log`, the file `foo. _max-2_.log` renamed as `foo. _max-1_.log`, and so on, the file `foo. _min+1_.log` renamed as `foo. _min+2_.log`. Lastly, the active file `foo. log` will be renamed as `foo. _min_.log` and a new active file name `foo. log` will be created.

Given that this rollover algorithm requires as many file renaming operations as the window size, large window sizes are discouraged.</description>
    </plugin>
    <plugin name="DirectWriteRolloverStrategy" className="org.apache.logging.log4j.core.appender.rolling.DirectWriteRolloverStrategy">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.appender.rolling.AbstractRolloverStrategy</supertype>
        <supertype>org.apache.logging.log4j.core.appender.rolling.DirectFileRolloverStrategy</supertype>
        <supertype>org.apache.logging.log4j.core.appender.rolling.RolloverStrategy</supertype>
      </supertypes>
      <attributes>
        <attribute name="compressionLevel"></attribute>
        <attribute name="maxFiles"></attribute>
        <attribute name="stopCustomActionsOnError" type="boolean"></attribute>
        <attribute name="tempCompressedFilePattern"></attribute>
        <attribute name="compressionLevel">
          <description>The compression level, 0 (less) through 9 (more); applies only to ZIP files.</description>
        </attribute>
        <attribute name="maxFiles">
          <description>The maximum number of files that match the date portion of the pattern to keep.</description>
        </attribute>
        <attribute name="stopCustomActionsOnError" type="boolean">
          <description>whether to stop executing asynchronous actions if an error occurs</description>
        </attribute>
      </attributes>
      <elements>
        <element multiplicity="*" type="org.apache.logging.log4j.core.appender.rolling.action.Action"></element>
        <element multiplicity="*" type="org.apache.logging.log4j.core.appender.rolling.action.Action">
          <description>custom actions to perform asynchronously after rollover</description>
        </element>
      </elements>
      <description>When rolling over, `DirectWriteRolloverStrategy` writes directly to the file as resolved by the file pattern.

Files will be renamed files according to an algorithm as described below.

The DirectWriteRolloverStrategy uses similar logic as DefaultRolloverStrategy to determine the file name based on the file pattern, however the DirectWriteRolloverStrategy writes directly to a file and does not rename it during rollover, except if it is compressed, in which case it will add the appropriate file extension.</description>
    </plugin>
    <plugin name="NoOpTriggeringPolicy" className="org.apache.logging.log4j.core.appender.rolling.NoOpTriggeringPolicy">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.AbstractLifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle2</supertype>
        <supertype>org.apache.logging.log4j.core.appender.rolling.AbstractTriggeringPolicy</supertype>
        <supertype>org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy</supertype>
      </supertypes>
    </plugin>
    <plugin name="OnStartupTriggeringPolicy" className="org.apache.logging.log4j.core.appender.rolling.OnStartupTriggeringPolicy">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.AbstractLifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle2</supertype>
        <supertype>org.apache.logging.log4j.core.appender.rolling.AbstractTriggeringPolicy</supertype>
        <supertype>org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy</supertype>
      </supertypes>
      <attributes>
        <attribute name="minSize" type="long"></attribute>
      </attributes>
      <description>Triggers a rollover on every restart, but only if the file size is greater than zero.</description>
    </plugin>
    <plugin name="SizeBasedTriggeringPolicy" className="org.apache.logging.log4j.core.appender.rolling.SizeBasedTriggeringPolicy">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.AbstractLifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle2</supertype>
        <supertype>org.apache.logging.log4j.core.appender.rolling.AbstractTriggeringPolicy</supertype>
        <supertype>org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy</supertype>
      </supertypes>
      <attributes>
        <attribute name="size">
          <description>The size of the file before rollover is required.</description>
        </attribute>
      </attributes>
    </plugin>
    <plugin name="TimeBasedTriggeringPolicy" className="org.apache.logging.log4j.core.appender.rolling.TimeBasedTriggeringPolicy">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.AbstractLifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle2</supertype>
        <supertype>org.apache.logging.log4j.core.appender.rolling.AbstractTriggeringPolicy</supertype>
        <supertype>org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy</supertype>
      </supertypes>
      <attributes>
        <attribute name="interval" type="int"></attribute>
        <attribute name="maxRandomDelay" type="int"></attribute>
        <attribute name="modulate" type="boolean"></attribute>
      </attributes>
      <description>Rolls a file over based on time.</description>
    </plugin>
    <plugin name="Delete" className="org.apache.logging.log4j.core.appender.rolling.action.DeleteAction">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>java.lang.Runnable</supertype>
        <supertype>org.apache.logging.log4j.core.appender.rolling.action.AbstractAction</supertype>
        <supertype>org.apache.logging.log4j.core.appender.rolling.action.AbstractPathAction</supertype>
        <supertype>org.apache.logging.log4j.core.appender.rolling.action.Action</supertype>
      </supertypes>
      <attributes>
        <attribute name="basePath">
          <description>base path from where to start scanning for files to delete.</description>
        </attribute>
        <attribute name="followLinks" type="boolean">
          <description>whether to follow symbolic links.
Default is false.</description>
        </attribute>
        <attribute name="maxDepth" type="int">
          <description>The maxDepth parameter is the maximum number of levels of directories to visit.
A value of 0 means that only the starting file is visited, unless denied by the security manager.
A value of MAX_VALUE may be used to indicate that all levels should be visited.</description>
        </attribute>
        <attribute name="testMode" type="boolean">
          <description>if true, files are not deleted but instead a message is printed to the status logger at INFO level.
Users can use this to do a dry run to test if their configuration works as expected.
Default is false.</description>
        </attribute>
      </attributes>
      <elements>
        <element multiplicity="*" type="org.apache.logging.log4j.core.appender.rolling.action.PathCondition">
          <description>an array of path conditions (if more than one, they all need to accept a path before it is deleted).</description>
        </element>
        <element type="org.apache.logging.log4j.core.appender.rolling.action.PathSorter">
          <description>a plugin implementing the apiref:PathSorter[] interface</description>
        </element>
        <element type="org.apache.logging.log4j.core.appender.rolling.action.ScriptCondition"></element>
      </elements>
      <description>Rollover or scheduled action for deleting old log files that are accepted by the specified PathFilters.</description>
    </plugin>
    <plugin name="IfAccumulatedFileCount" className="org.apache.logging.log4j.core.appender.rolling.action.IfAccumulatedFileCount">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.appender.rolling.action.PathCondition</supertype>
      </supertypes>
      <attributes>
        <attribute name="exceeds" type="int">
          <description>The threshold count from which files will be deleted.</description>
        </attribute>
      </attributes>
      <elements>
        <element multiplicity="*" type="org.apache.logging.log4j.core.appender.rolling.action.PathCondition"></element>
      </elements>
      <description>PathCondition that accepts paths after some count threshold is exceeded during the file tree walk.</description>
    </plugin>
    <plugin name="IfAccumulatedFileSize" className="org.apache.logging.log4j.core.appender.rolling.action.IfAccumulatedFileSize">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.appender.rolling.action.PathCondition</supertype>
      </supertypes>
      <attributes>
        <attribute name="exceeds">
          <description>The threshold accumulated file size from which files will be deleted.</description>
        </attribute>
      </attributes>
      <elements>
        <element multiplicity="*" type="org.apache.logging.log4j.core.appender.rolling.action.PathCondition"></element>
      </elements>
      <description>PathCondition that accepts paths after the accumulated file size threshold is exceeded during the file tree walk.</description>
    </plugin>
    <plugin name="IfAll" className="org.apache.logging.log4j.core.appender.rolling.action.IfAll">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.appender.rolling.action.PathCondition</supertype>
      </supertypes>
      <elements>
        <element multiplicity="*" required="true" type="org.apache.logging.log4j.core.appender.rolling.action.PathCondition">
          <description>The component filters.</description>
        </element>
      </elements>
      <description>Composite `PathCondition` that only accepts objects that are accepted by _all_ component conditions.

Corresponds to logical "AND".</description>
    </plugin>
    <plugin name="IfAny" className="org.apache.logging.log4j.core.appender.rolling.action.IfAny">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.appender.rolling.action.PathCondition</supertype>
      </supertypes>
      <elements>
        <element multiplicity="*" required="true" type="org.apache.logging.log4j.core.appender.rolling.action.PathCondition">
          <description>The component conditions.</description>
        </element>
      </elements>
      <description>Composite `PathCondition` that accepts objects that are accepted by _any_ component conditions.

Corresponds to logical "OR".</description>
    </plugin>
    <plugin name="IfFileName" className="org.apache.logging.log4j.core.appender.rolling.action.IfFileName">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.appender.rolling.action.PathCondition</supertype>
      </supertypes>
      <attributes>
        <attribute name="glob">
          <description>the baseDir-relative path pattern of the files to delete (may contain '*' and '?' wildcarts)</description>
        </attribute>
        <attribute name="regex">
          <description>the regular expression that matches the baseDir-relative path of the file(s) to delete</description>
        </attribute>
      </attributes>
      <elements>
        <element multiplicity="*" type="org.apache.logging.log4j.core.appender.rolling.action.PathCondition">
          <description>nested conditions to evaluate if this condition accepts a path</description>
        </element>
      </elements>
      <description>PathCondition that accepts files for deletion if their relative path matches either a glob pattern or a regular expression.

If both a regular expression and a glob pattern are specified the glob pattern is used and the regular expression is ignored.

The regular expression is a pattern as defined by the apiref:Pattern[] class.
A glob is a simplified pattern expression described in apiref:FileSystem[].</description>
    </plugin>
    <plugin name="IfLastModified" className="org.apache.logging.log4j.core.appender.rolling.action.IfLastModified">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.appender.rolling.action.PathCondition</supertype>
      </supertypes>
      <attributes>
        <attribute name="age" type="org.apache.logging.log4j.core.appender.rolling.action.Duration" required="true">
          <description>The path age that is accepted by this condition.
Must be a valid Duration.</description>
        </attribute>
      </attributes>
      <elements>
        <element multiplicity="*" type="org.apache.logging.log4j.core.appender.rolling.action.PathCondition">
          <description>nested conditions to evaluate if this condition accepts a path</description>
        </element>
      </elements>
      <description>PathCondition that accepts paths that are older than the specified duration.</description>
    </plugin>
    <plugin name="IfNot" className="org.apache.logging.log4j.core.appender.rolling.action.IfNot">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.appender.rolling.action.PathCondition</supertype>
      </supertypes>
      <elements>
        <element required="true" type="org.apache.logging.log4j.core.appender.rolling.action.PathCondition">
          <description>The condition to negate.</description>
        </element>
      </elements>
      <description>Wrapper `PathCondition` that accepts objects that are rejected by the wrapped component filter.</description>
    </plugin>
    <plugin name="SortByModificationTime" className="org.apache.logging.log4j.core.appender.rolling.action.PathSortByModificationTime">
      <supertypes>
        <supertype>java.io.Serializable</supertype>
        <supertype>java.lang.Object</supertype>
        <supertype>java.util.Comparator</supertype>
        <supertype>org.apache.logging.log4j.core.appender.rolling.action.PathSorter</supertype>
      </supertypes>
      <attributes>
        <attribute name="recentFirst" type="boolean">
          <description>if true, most recently modified paths should come first.</description>
        </attribute>
      </attributes>
      <description>apiref:PathSorter[] that sorts path by their LastModified attribute.</description>
    </plugin>
    <plugin name="PosixViewAttribute" className="org.apache.logging.log4j.core.appender.rolling.action.PosixViewAttributeAction">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>java.lang.Runnable</supertype>
        <supertype>org.apache.logging.log4j.core.appender.rolling.action.AbstractAction</supertype>
        <supertype>org.apache.logging.log4j.core.appender.rolling.action.AbstractPathAction</supertype>
        <supertype>org.apache.logging.log4j.core.appender.rolling.action.Action</supertype>
      </supertypes>
      <attributes>
        <attribute name="basePath" required="true"></attribute>
        <attribute name="fileGroup"></attribute>
        <attribute name="fileOwner"></attribute>
        <attribute name="filePermissions"></attribute>
        <attribute name="followLinks" type="boolean"></attribute>
        <attribute name="maxDepth" type="int"></attribute>
      </attributes>
      <elements>
        <element multiplicity="*" type="org.apache.logging.log4j.core.appender.rolling.action.PathCondition"></element>
      </elements>
      <description>File POSIX attribute view action.

Allow to define file permissions, user and group for log files on POSIX supported OS.</description>
    </plugin>
    <plugin name="ScriptCondition" className="org.apache.logging.log4j.core.appender.rolling.action.ScriptCondition">
      <supertypes>
        <supertype>java.lang.Object</supertype>
      </supertypes>
      <elements>
        <element type="org.apache.logging.log4j.core.script.AbstractScript">
          <description>The script to run.
This may be a xref:org.apache.logging.log4j.core.script.Script.adoc[Script], a apiref:ScriptFile[] or a apiref:ScriptRef[]. The script must return a `List&lt;PathWithAttributes&gt;`. When the script is executed, it is provided the following bindings:

* basePath - the directory from where the apiref:DeleteAction[] action started scanning for files to delete.
Can be used to relativize the paths in the pathList.
* pathList - a `java. util. List` containing xref:org.apache.logging.log4j.core.appender.rolling.action.PathWithAttributes.adoc[PathWithAttributes] objects.
(The script is free to modify and return this list.
)
* substitutor - a xref:org.apache.logging.log4j.core.lookup.StrSubstitutor.adoc[StrSubstitutor] that can be used to look up variables embedded in the base dir or other properties
* statusLogger - the apiref:StatusLogger[] that can be used to log events during script execution
* any properties declared in the configuration</description>
        </element>
      </elements>
      <description>A condition of the apiref:DeleteAction[] where a user-provided script selects the files to delete from a provided list.

The specified script may be a xref:org.apache.logging.log4j.core.script.Script.adoc[Script], a apiref:ScriptFile[] or a apiref:ScriptRef[].</description>
    </plugin>
    <plugin name="IdlePurgePolicy" className="org.apache.logging.log4j.core.appender.routing.IdlePurgePolicy">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>java.lang.Runnable</supertype>
        <supertype>org.apache.logging.log4j.core.AbstractLifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle2</supertype>
        <supertype>org.apache.logging.log4j.core.appender.routing.PurgePolicy</supertype>
      </supertypes>
      <attributes>
        <attribute name="checkInterval">
          <description>when all appenders purged, the number of increments of timeUnit to check if any appenders appeared</description>
        </attribute>
        <attribute name="timeToLive">
          <description>the number of increments of timeUnit before the Appender should be purged.</description>
        </attribute>
        <attribute name="timeUnit">
          <description>the unit of time the timeToLive and the checkInterval is expressed in.</description>
        </attribute>
      </attributes>
      <description>Policy is purging appenders that were not in use specified time in minutes</description>
    </plugin>
    <plugin name="Route" className="org.apache.logging.log4j.core.appender.routing.Route">
      <supertypes>
        <supertype>java.lang.Object</supertype>
      </supertypes>
      <attributes>
        <attribute name="key">
          <description>The key.</description>
        </attribute>
        <attribute name="ref">
          <description>The Appender reference.</description>
        </attribute>
      </attributes>
      <description>A Route to an appender.</description>
    </plugin>
    <plugin name="Routes" className="org.apache.logging.log4j.core.appender.routing.Routes">
      <supertypes>
        <supertype>java.lang.Object</supertype>
      </supertypes>
      <attributes>
        <attribute name="pattern"></attribute>
      </attributes>
      <elements>
        <element multiplicity="*" required="true" type="org.apache.logging.log4j.core.appender.routing.Route"></element>
        <element type="org.apache.logging.log4j.core.script.AbstractScript"></element>
      </elements>
      <description>Contains the individual Route elements.</description>
    </plugin>
    <plugin name="Routing" className="org.apache.logging.log4j.core.appender.routing.RoutingAppender">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.AbstractLifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.Appender</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle2</supertype>
        <supertype>org.apache.logging.log4j.core.appender.AbstractAppender</supertype>
        <supertype>org.apache.logging.log4j.core.filter.AbstractFilterable</supertype>
        <supertype>org.apache.logging.log4j.core.filter.Filterable</supertype>
        <supertype>org.apache.logging.log4j.core.impl.LocationAware</supertype>
      </supertypes>
      <attributes>
        <attribute name="ignoreExceptions" type="boolean"></attribute>
        <attribute name="name" required="true"></attribute>
      </attributes>
      <elements>
        <element type="org.apache.logging.log4j.core.Filter"></element>
        <element type="org.apache.logging.log4j.core.Layout"></element>
        <element type="org.apache.logging.log4j.core.appender.rewrite.RewritePolicy"></element>
        <element type="org.apache.logging.log4j.core.appender.routing.PurgePolicy"></element>
        <element type="org.apache.logging.log4j.core.appender.routing.Routes"></element>
        <element multiplicity="*" type="org.apache.logging.log4j.core.config.Property"></element>
        <element type="org.apache.logging.log4j.core.script.AbstractScript"></element>
      </elements>
      <description>This Appender "routes" between various Appenders, some of which can be references to Appenders defined earlier in the configuration while others can be dynamically created within this Appender as required.

Routing is achieved by specifying a pattern on the Routing appender declaration.
The pattern should contain one or more substitution patterns of the form "$${[key:]token}". The pattern will be resolved each time the Appender is called using the built in StrSubstitutor and the StrLookup plugin that matches the specified key.</description>
    </plugin>
    <plugin name="ArrayBlockingQueue" className="org.apache.logging.log4j.core.async.ArrayBlockingQueueFactory">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.async.BlockingQueueFactory</supertype>
      </supertypes>
      <description>Factory for creating instances of apiref:ArrayBlockingQueue[].</description>
    </plugin>
    <plugin name="asyncLogger" className="org.apache.logging.log4j.core.async.AsyncLoggerConfig">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.AbstractLifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle2</supertype>
        <supertype>org.apache.logging.log4j.core.config.LoggerConfig</supertype>
        <supertype>org.apache.logging.log4j.core.filter.AbstractFilterable</supertype>
        <supertype>org.apache.logging.log4j.core.filter.Filterable</supertype>
        <supertype>org.apache.logging.log4j.core.impl.LocationAware</supertype>
      </supertypes>
      <attributes>
        <attribute name="additivity" type="java.lang.Boolean"></attribute>
        <attribute name="includeLocation"></attribute>
        <attribute name="level" type="org.apache.logging.log4j.Level"></attribute>
        <attribute name="levelAndRefs"></attribute>
        <attribute name="name" required="true"></attribute>
      </attributes>
      <elements>
        <element type="org.apache.logging.log4j.core.Filter"></element>
        <element multiplicity="*" type="org.apache.logging.log4j.core.config.AppenderRef"></element>
        <element multiplicity="*" type="org.apache.logging.log4j.core.config.Property"></element>
      </elements>
      <description>Asynchronous Logger object that is created via configuration and can be combined with synchronous loggers.

AsyncLoggerConfig is a logger designed for high throughput and low latency logging.
It does not perform any I/O in the calling (application) thread, but instead hands off the work to another thread as soon as possible.
The actual logging is performed in the background thread.
It uses LMAX Disruptor for inter-thread communication.

To use AsyncLoggerConfig, specify `&lt;asyncLogger&gt;` or `&lt;asyncRoot&gt;` in configuration.

Note that for performance reasons, this logger does not include source location by default.
You need to specify `includeLocation="true"` in the configuration or any %class, %location or %line conversion patterns in your log4j.
xml configuration will produce either a "?" character or no output at all.

For best performance, use AsyncLoggerConfig with the RandomAccessFileAppender or RollingRandomAccessFileAppender, with immediateFlush=false.
These appenders have built-in support for the batching mechanism used by the Disruptor library, and they will flush to disk at the end of each batch.
This means that even with immediateFlush=false, there will never be any items left in the buffer; all log events will all be written to disk in a very efficient manner.</description>
    </plugin>
    <plugin name="asyncRoot" className="org.apache.logging.log4j.core.async.AsyncLoggerConfig.RootLogger">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.AbstractLifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle2</supertype>
        <supertype>org.apache.logging.log4j.core.config.LoggerConfig</supertype>
        <supertype>org.apache.logging.log4j.core.filter.AbstractFilterable</supertype>
        <supertype>org.apache.logging.log4j.core.filter.Filterable</supertype>
        <supertype>org.apache.logging.log4j.core.impl.LocationAware</supertype>
      </supertypes>
      <attributes>
        <attribute name="additivity" type="boolean"></attribute>
        <attribute name="includeLocation"></attribute>
        <attribute name="level" type="org.apache.logging.log4j.Level"></attribute>
        <attribute name="levelAndRefs"></attribute>
      </attributes>
      <elements>
        <element type="org.apache.logging.log4j.core.Filter"></element>
        <element multiplicity="*" type="org.apache.logging.log4j.core.config.AppenderRef"></element>
        <element multiplicity="*" type="org.apache.logging.log4j.core.config.Property"></element>
      </elements>
      <description>An asynchronous root Logger.</description>
    </plugin>
    <plugin name="AsyncWaitStrategyFactory" className="org.apache.logging.log4j.core.async.AsyncWaitStrategyFactoryConfig">
      <supertypes>
        <supertype>java.lang.Object</supertype>
      </supertypes>
      <attributes>
        <attribute name="class" required="true"></attribute>
      </attributes>
      <description>This class allows users to configure the factory used to create an instance of the LMAX disruptor WaitStrategy used by Async Loggers in the log4j configuration.</description>
    </plugin>
    <plugin name="DisruptorBlockingQueue" className="org.apache.logging.log4j.core.async.DisruptorBlockingQueueFactory">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.async.BlockingQueueFactory</supertype>
      </supertypes>
      <attributes>
        <attribute name="SpinPolicy" type="com.conversantmedia.util.concurrent.SpinPolicy"></attribute>
      </attributes>
      <description>Factory for creating instances of apiref:DisruptorBlockingQueue[].</description>
    </plugin>
    <plugin name="JCToolsBlockingQueue" className="org.apache.logging.log4j.core.async.JCToolsBlockingQueueFactory">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.async.BlockingQueueFactory</supertype>
      </supertypes>
      <attributes>
        <attribute name="WaitStrategy" type="org.apache.logging.log4j.core.async.JCToolsBlockingQueueFactory.WaitStrategy"></attribute>
      </attributes>
      <description>Factory for creating instances of BlockingQueues backed by JCTools apiref:MpscArrayQueue[].</description>
    </plugin>
    <plugin name="LinkedTransferQueue" className="org.apache.logging.log4j.core.async.LinkedTransferQueueFactory">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.async.BlockingQueueFactory</supertype>
      </supertypes>
      <description>Factory for creating instances of apiref:LinkedTransferQueue[].</description>
    </plugin>
    <plugin name="AppenderRef" className="org.apache.logging.log4j.core.config.AppenderRef">
      <supertypes>
        <supertype>java.lang.Object</supertype>
      </supertypes>
      <attributes>
        <attribute name="level" type="org.apache.logging.log4j.Level">
          <description>The Level to filter against.</description>
        </attribute>
        <attribute name="ref">
          <description>The name of the Appender.</description>
        </attribute>
      </attributes>
      <elements>
        <element type="org.apache.logging.log4j.core.Filter">
          <description>The filter(s) to use.</description>
        </element>
      </elements>
      <description>An Appender reference.</description>
    </plugin>
    <plugin name="appenders" className="org.apache.logging.log4j.core.config.AppendersPlugin">
      <supertypes>
        <supertype>java.lang.Object</supertype>
      </supertypes>
      <elements>
        <element multiplicity="*" type="org.apache.logging.log4j.core.Appender">
          <description>An array of Appenders.</description>
        </element>
      </elements>
      <description>An Appender container.</description>
    </plugin>
    <plugin name="CustomLevel" className="org.apache.logging.log4j.core.config.CustomLevelConfig">
      <supertypes>
        <supertype>java.lang.Object</supertype>
      </supertypes>
      <attributes>
        <attribute name="intLevel" type="int">
          <description>the intLevel that determines where this level resides relative to the built-in levels</description>
        </attribute>
        <attribute name="name">
          <description>name of the custom level.</description>
        </attribute>
      </attributes>
      <description>Descriptor of a custom Level object that is created via configuration.</description>
    </plugin>
    <plugin name="CustomLevels" className="org.apache.logging.log4j.core.config.CustomLevels">
      <supertypes>
        <supertype>java.lang.Object</supertype>
      </supertypes>
      <elements>
        <element multiplicity="*" type="org.apache.logging.log4j.core.config.CustomLevelConfig">
          <description>An array of CustomLevelConfigs.</description>
        </element>
      </elements>
      <description>Container for CustomLevelConfig objects.</description>
    </plugin>
    <plugin name="default" className="org.apache.logging.log4j.core.config.DefaultAdvertiser">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.net.Advertiser</supertype>
      </supertypes>
      <description>The default advertiser does not do anything.</description>
    </plugin>
    <plugin name="http" namespace="Watcher" className="org.apache.logging.log4j.core.config.HttpWatcher">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.util.AbstractWatcher</supertype>
        <supertype>org.apache.logging.log4j.core.util.Watcher</supertype>
      </supertypes>
    </plugin>
    <plugin name="logger" className="org.apache.logging.log4j.core.config.LoggerConfig">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.AbstractLifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle2</supertype>
        <supertype>org.apache.logging.log4j.core.filter.AbstractFilterable</supertype>
        <supertype>org.apache.logging.log4j.core.filter.Filterable</supertype>
        <supertype>org.apache.logging.log4j.core.impl.LocationAware</supertype>
      </supertypes>
      <attributes>
        <attribute name="additivity" type="java.lang.Boolean"></attribute>
        <attribute name="includeLocation"></attribute>
        <attribute name="level" type="org.apache.logging.log4j.Level"></attribute>
        <attribute name="levelAndRefs"></attribute>
        <attribute name="name" required="true"></attribute>
      </attributes>
      <elements>
        <element type="org.apache.logging.log4j.core.Filter"></element>
        <element multiplicity="*" type="org.apache.logging.log4j.core.config.AppenderRef"></element>
        <element multiplicity="*" type="org.apache.logging.log4j.core.config.Property"></element>
      </elements>
      <description>Logger object that is created via configuration.</description>
    </plugin>
    <plugin name="root" className="org.apache.logging.log4j.core.config.LoggerConfig.RootLogger">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.AbstractLifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle2</supertype>
        <supertype>org.apache.logging.log4j.core.config.LoggerConfig</supertype>
        <supertype>org.apache.logging.log4j.core.filter.AbstractFilterable</supertype>
        <supertype>org.apache.logging.log4j.core.filter.Filterable</supertype>
        <supertype>org.apache.logging.log4j.core.impl.LocationAware</supertype>
      </supertypes>
      <attributes>
        <attribute name="additivity" type="boolean"></attribute>
        <attribute name="includeLocation"></attribute>
        <attribute name="level" type="org.apache.logging.log4j.Level"></attribute>
        <attribute name="levelAndRefs"></attribute>
      </attributes>
      <elements>
        <element type="org.apache.logging.log4j.core.Filter"></element>
        <element multiplicity="*" type="org.apache.logging.log4j.core.config.AppenderRef"></element>
        <element multiplicity="*" type="org.apache.logging.log4j.core.config.Property"></element>
      </elements>
      <description>The root Logger.</description>
    </plugin>
    <plugin name="loggers" className="org.apache.logging.log4j.core.config.LoggersPlugin">
      <supertypes>
        <supertype>java.lang.Object</supertype>
      </supertypes>
      <elements>
        <element multiplicity="*" type="org.apache.logging.log4j.core.config.LoggerConfig">
          <description>An array of Loggers.</description>
        </element>
      </elements>
      <description>Container of Logger objects.</description>
    </plugin>
    <plugin name="properties" className="org.apache.logging.log4j.core.config.PropertiesPlugin">
      <supertypes>
        <supertype>java.lang.Object</supertype>
      </supertypes>
      <elements>
        <element multiplicity="*" type="org.apache.logging.log4j.core.config.Property">
          <description>An array of Property elements.</description>
        </element>
      </elements>
      <description>Handles properties defined in the configuration.</description>
    </plugin>
    <plugin name="property" className="org.apache.logging.log4j.core.config.Property">
      <supertypes>
        <supertype>java.lang.Object</supertype>
      </supertypes>
      <attributes>
        <attribute name="name">
          <description>The key.</description>
        </attribute>
      </attributes>
      <description>Represents a key/value pair in the configuration.</description>
    </plugin>
    <plugin name="scripts" className="org.apache.logging.log4j.core.config.ScriptsPlugin">
      <supertypes>
        <supertype>java.lang.Object</supertype>
      </supertypes>
      <elements>
        <element multiplicity="*" type="org.apache.logging.log4j.core.script.AbstractScript">
          <description>An array of Scripts.</description>
        </element>
      </elements>
      <description>A container of Scripts.</description>
    </plugin>
    <plugin name="ClassArbiter" className="org.apache.logging.log4j.core.config.arbiters.ClassArbiter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.config.arbiters.Arbiter</supertype>
      </supertypes>
      <attributes>
        <attribute name="className">
          <description>Sets the Class name.</description>
        </attribute>
      </attributes>
      <description>Conditional that determines if the specified class is present.</description>
    </plugin>
    <plugin name="DefaultArbiter" className="org.apache.logging.log4j.core.config.arbiters.DefaultArbiter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.config.arbiters.Arbiter</supertype>
      </supertypes>
      <description>Default Condition for a Select Condition.</description>
    </plugin>
    <plugin name="EnvironmentArbiter" className="org.apache.logging.log4j.core.config.arbiters.EnvironmentArbiter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.config.arbiters.Arbiter</supertype>
      </supertypes>
      <attributes>
        <attribute name="propertyName">
          <description>Sets the Property Name.</description>
        </attribute>
        <attribute name="propertyValue">
          <description>Sets the Property Value.</description>
        </attribute>
      </attributes>
      <description>Condition that determines if the specified environment variable is set.</description>
    </plugin>
    <plugin name="ScriptArbiter" className="org.apache.logging.log4j.core.config.arbiters.ScriptArbiter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.config.arbiters.Arbiter</supertype>
      </supertypes>
      <description>Condition that evaluates a script.</description>
    </plugin>
    <plugin name="Select" className="org.apache.logging.log4j.core.config.arbiters.SelectArbiter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
      </supertypes>
      <description>Class Description goes here.</description>
    </plugin>
    <plugin name="SystemPropertyArbiter" className="org.apache.logging.log4j.core.config.arbiters.SystemPropertyArbiter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.config.arbiters.Arbiter</supertype>
      </supertypes>
      <attributes>
        <attribute name="propertyName">
          <description>Sets the Property Name.</description>
        </attribute>
        <attribute name="propertyValue">
          <description>Sets the Property Value.</description>
        </attribute>
      </attributes>
      <description>Condition that determines if the specified property is set.</description>
    </plugin>
    <plugin name="JsonConfigurationFactory" namespace="ConfigurationFactory" className="org.apache.logging.log4j.core.config.json.JsonConfigurationFactory">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.config.ConfigurationFactory</supertype>
        <supertype>org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilderFactory</supertype>
      </supertypes>
    </plugin>
    <plugin name="BigDecimal" namespace="TypeConverter" className="org.apache.logging.log4j.core.config.plugins.convert.TypeConverters.BigDecimalConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.config.plugins.convert.TypeConverter</supertype>
      </supertypes>
      <description>Parses a apiref:String[] into a apiref:BigDecimal[].</description>
    </plugin>
    <plugin name="BigInteger" namespace="TypeConverter" className="org.apache.logging.log4j.core.config.plugins.convert.TypeConverters.BigIntegerConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.config.plugins.convert.TypeConverter</supertype>
      </supertypes>
      <description>Parses a apiref:String[] into a apiref:BigInteger[].</description>
    </plugin>
    <plugin name="Boolean" namespace="TypeConverter" className="org.apache.logging.log4j.core.config.plugins.convert.TypeConverters.BooleanConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.config.plugins.convert.TypeConverter</supertype>
      </supertypes>
      <description>Converts a apiref:String[] into a apiref:Boolean[].</description>
    </plugin>
    <plugin name="ByteArray" namespace="TypeConverter" className="org.apache.logging.log4j.core.config.plugins.convert.TypeConverters.ByteArrayConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.config.plugins.convert.TypeConverter</supertype>
      </supertypes>
      <description>Converts a apiref:String[] into a `byte[]`.

The supported formats are:

* 0x0123456789ABCDEF
* Base64:ABase64String
* String using apiref:Charset[] [TODO Should this be UTF-8 instead?
]</description>
    </plugin>
    <plugin name="Byte" namespace="TypeConverter" className="org.apache.logging.log4j.core.config.plugins.convert.TypeConverters.ByteConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.config.plugins.convert.TypeConverter</supertype>
      </supertypes>
      <description>Converts a apiref:String[] into a apiref:Byte[].</description>
    </plugin>
    <plugin name="CharacterArray" namespace="TypeConverter" className="org.apache.logging.log4j.core.config.plugins.convert.TypeConverters.CharArrayConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.config.plugins.convert.TypeConverter</supertype>
      </supertypes>
      <description>Converts a apiref:String[] into a `char[]`.</description>
    </plugin>
    <plugin name="Character" namespace="TypeConverter" className="org.apache.logging.log4j.core.config.plugins.convert.TypeConverters.CharacterConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.config.plugins.convert.TypeConverter</supertype>
      </supertypes>
      <description>Converts a apiref:String[] into a apiref:Character[].</description>
    </plugin>
    <plugin name="Charset" namespace="TypeConverter" className="org.apache.logging.log4j.core.config.plugins.convert.TypeConverters.CharsetConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.config.plugins.convert.TypeConverter</supertype>
      </supertypes>
      <description>Converts a apiref:String[] into a apiref:Charset[].</description>
    </plugin>
    <plugin name="Class" namespace="TypeConverter" className="org.apache.logging.log4j.core.config.plugins.convert.TypeConverters.ClassConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.config.plugins.convert.TypeConverter</supertype>
      </supertypes>
      <description>Converts a apiref:String[] into a apiref:Class[].</description>
    </plugin>
    <plugin name="CronExpression" namespace="TypeConverter" className="org.apache.logging.log4j.core.config.plugins.convert.TypeConverters.CronExpressionConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.config.plugins.convert.TypeConverter</supertype>
      </supertypes>
    </plugin>
    <plugin name="Double" namespace="TypeConverter" className="org.apache.logging.log4j.core.config.plugins.convert.TypeConverters.DoubleConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.config.plugins.convert.TypeConverter</supertype>
      </supertypes>
      <description>Converts a apiref:String[] into a apiref:Double[].</description>
    </plugin>
    <plugin name="Duration" namespace="TypeConverter" className="org.apache.logging.log4j.core.config.plugins.convert.TypeConverters.DurationConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.config.plugins.convert.TypeConverter</supertype>
      </supertypes>
      <description>Converts a apiref:String[] into a apiref:Duration[].</description>
    </plugin>
    <plugin name="File" namespace="TypeConverter" className="org.apache.logging.log4j.core.config.plugins.convert.TypeConverters.FileConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.config.plugins.convert.TypeConverter</supertype>
      </supertypes>
      <description>Converts a apiref:String[] into a apiref:File[].</description>
    </plugin>
    <plugin name="Float" namespace="TypeConverter" className="org.apache.logging.log4j.core.config.plugins.convert.TypeConverters.FloatConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.config.plugins.convert.TypeConverter</supertype>
      </supertypes>
      <description>Converts a apiref:String[] into a apiref:Float[].</description>
    </plugin>
    <plugin name="InetAddress" namespace="TypeConverter" className="org.apache.logging.log4j.core.config.plugins.convert.TypeConverters.InetAddressConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.config.plugins.convert.TypeConverter</supertype>
      </supertypes>
      <description>Converts a apiref:String[] into an apiref:InetAddress[].</description>
    </plugin>
    <plugin name="Integer" namespace="TypeConverter" className="org.apache.logging.log4j.core.config.plugins.convert.TypeConverters.IntegerConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.config.plugins.convert.TypeConverter</supertype>
      </supertypes>
      <description>Converts a apiref:String[] into a apiref:Integer[].</description>
    </plugin>
    <plugin name="Level" namespace="TypeConverter" className="org.apache.logging.log4j.core.config.plugins.convert.TypeConverters.LevelConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.config.plugins.convert.TypeConverter</supertype>
      </supertypes>
      <description>Converts a apiref:String[] into a Log4j apiref:Level[].

Returns `null` for invalid level names.</description>
    </plugin>
    <plugin name="Long" namespace="TypeConverter" className="org.apache.logging.log4j.core.config.plugins.convert.TypeConverters.LongConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.config.plugins.convert.TypeConverter</supertype>
      </supertypes>
      <description>Converts a apiref:String[] into a apiref:Long[].</description>
    </plugin>
    <plugin name="Path" namespace="TypeConverter" className="org.apache.logging.log4j.core.config.plugins.convert.TypeConverters.PathConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.config.plugins.convert.TypeConverter</supertype>
      </supertypes>
      <description>Converts a apiref:String[] into a apiref:Path[].</description>
    </plugin>
    <plugin name="Pattern" namespace="TypeConverter" className="org.apache.logging.log4j.core.config.plugins.convert.TypeConverters.PatternConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.config.plugins.convert.TypeConverter</supertype>
      </supertypes>
      <description>Converts a apiref:String[] into a apiref:Pattern[].</description>
    </plugin>
    <plugin name="SecurityProvider" namespace="TypeConverter" className="org.apache.logging.log4j.core.config.plugins.convert.TypeConverters.SecurityProviderConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.config.plugins.convert.TypeConverter</supertype>
      </supertypes>
      <description>Converts a apiref:String[] into a apiref:Provider[].</description>
    </plugin>
    <plugin name="Short" namespace="TypeConverter" className="org.apache.logging.log4j.core.config.plugins.convert.TypeConverters.ShortConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.config.plugins.convert.TypeConverter</supertype>
      </supertypes>
      <description>Converts a apiref:String[] into a apiref:Short[].</description>
    </plugin>
    <plugin name="String" namespace="TypeConverter" className="org.apache.logging.log4j.core.config.plugins.convert.TypeConverters.StringConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.config.plugins.convert.TypeConverter</supertype>
      </supertypes>
      <description>Returns the given apiref:String[], no conversion takes place.</description>
    </plugin>
    <plugin name="URI" namespace="TypeConverter" className="org.apache.logging.log4j.core.config.plugins.convert.TypeConverters.UriConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.config.plugins.convert.TypeConverter</supertype>
      </supertypes>
      <description>Converts a apiref:String[] into a apiref:URI[].</description>
    </plugin>
    <plugin name="URL" namespace="TypeConverter" className="org.apache.logging.log4j.core.config.plugins.convert.TypeConverters.UrlConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.config.plugins.convert.TypeConverter</supertype>
      </supertypes>
      <description>Converts a apiref:String[] into a apiref:URL[].</description>
    </plugin>
    <plugin name="UUID" namespace="TypeConverter" className="org.apache.logging.log4j.core.config.plugins.convert.TypeConverters.UuidConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.config.plugins.convert.TypeConverter</supertype>
      </supertypes>
      <description>Converts a apiref:String[] into a apiref:UUID[].</description>
    </plugin>
    <plugin name="PropertiesConfigurationFactory" namespace="ConfigurationFactory" className="org.apache.logging.log4j.core.config.properties.PropertiesConfigurationFactory">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.config.ConfigurationFactory</supertype>
        <supertype>org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilderFactory</supertype>
      </supertypes>
      <description>Creates a PropertiesConfiguration from a properties file.</description>
    </plugin>
    <plugin name="XmlConfigurationFactory" namespace="ConfigurationFactory" className="org.apache.logging.log4j.core.config.xml.XmlConfigurationFactory">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.config.ConfigurationFactory</supertype>
        <supertype>org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilderFactory</supertype>
      </supertypes>
      <description>Factory to construct an XmlConfiguration.</description>
    </plugin>
    <plugin name="YamlConfigurationFactory" namespace="ConfigurationFactory" className="org.apache.logging.log4j.core.config.yaml.YamlConfigurationFactory">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.config.ConfigurationFactory</supertype>
        <supertype>org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilderFactory</supertype>
      </supertypes>
    </plugin>
    <plugin name="BurstFilter" className="org.apache.logging.log4j.core.filter.BurstFilter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.AbstractLifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.Filter</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle2</supertype>
        <supertype>org.apache.logging.log4j.core.filter.AbstractFilter</supertype>
      </supertypes>
      <attributes>
        <attribute name="level" type="org.apache.logging.log4j.Level">
          <description>Sets the logging level to use.</description>
        </attribute>
        <attribute name="maxBurst" type="long">
          <description>Sets the maximum number of events that can occur before events are filtered for exceeding the average rate.</description>
        </attribute>
        <attribute name="onMatch" type="org.apache.logging.log4j.core.Filter.Result">
          <description>Sets the Result to return when the filter matches.

Defaults to Result.
NEUTRAL.</description>
        </attribute>
        <attribute name="onMismatch" type="org.apache.logging.log4j.core.Filter.Result">
          <description>Sets the Result to return when the filter does not match.

The default is Result.
DENY.</description>
        </attribute>
        <attribute name="rate" type="float">
          <description>Sets the average number of events per second to allow.</description>
        </attribute>
      </attributes>
      <description>The `BurstFilter` is a logging filter that regulates logging traffic.

Use this filter when you want to control the maximum burst of log statements that can be sent to an appender.
The filter is configured in the log4j configuration file.
For example, the following configuration limits the number of INFO level (as well as DEBUG and TRACE) log statements that can be sent to the console to a burst of 100 with an average rate of 16 per second.
WARN, ERROR and FATAL messages would continue to be delivered.
`&lt;Console name="console"&gt; &lt;PatternLayout pattern="%-5p %d{dd-MMM-yyyy HH:mm:ss} %x %t %m%n"/&gt; &lt;Filters&gt; &lt;BurstFilter level="INFO" rate="16" maxBurst="100"/&gt; &lt;/Filters&gt; &lt;/Console&gt;`</description>
    </plugin>
    <plugin name="filters" className="org.apache.logging.log4j.core.filter.CompositeFilter">
      <supertypes>
        <supertype>java.lang.Iterable</supertype>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.AbstractLifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.Filter</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle2</supertype>
      </supertypes>
      <elements>
        <element multiplicity="*" type="org.apache.logging.log4j.core.Filter">
          <description>An array of Filters to call.</description>
        </element>
      </elements>
      <description>Composes and invokes one or more filters.</description>
    </plugin>
    <plugin name="DenyAllFilter" className="org.apache.logging.log4j.core.filter.DenyAllFilter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.AbstractLifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.Filter</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle2</supertype>
        <supertype>org.apache.logging.log4j.core.filter.AbstractFilter</supertype>
      </supertypes>
      <attributes>
        <attribute name="onMatch" type="org.apache.logging.log4j.core.Filter.Result">
          <description>Sets the Result to return when the filter matches.

Defaults to Result.
NEUTRAL.</description>
        </attribute>
        <attribute name="onMismatch" type="org.apache.logging.log4j.core.Filter.Result">
          <description>Sets the Result to return when the filter does not match.

The default is Result.
DENY.</description>
        </attribute>
      </attributes>
      <description>This filter causes all logging events to be dropped.</description>
    </plugin>
    <plugin name="DynamicThresholdFilter" className="org.apache.logging.log4j.core.filter.DynamicThresholdFilter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.AbstractLifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.Filter</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle2</supertype>
        <supertype>org.apache.logging.log4j.core.filter.AbstractFilter</supertype>
      </supertypes>
      <attributes>
        <attribute name="defaultThreshold" type="org.apache.logging.log4j.Level">
          <description>The default Level.</description>
        </attribute>
        <attribute name="key">
          <description>The name of the key to compare.</description>
        </attribute>
        <attribute name="onMatch" type="org.apache.logging.log4j.core.Filter.Result">
          <description>The action to perform if a match occurs.</description>
        </attribute>
        <attribute name="onMismatch" type="org.apache.logging.log4j.core.Filter.Result">
          <description>The action to perform if no match occurs.</description>
        </attribute>
      </attributes>
      <elements>
        <element multiplicity="*" type="org.apache.logging.log4j.core.util.KeyValuePair">
          <description>An array of value and Level pairs.</description>
        </element>
      </elements>
      <description>Compares against a log level that is associated with a context value.

By default the context is the apiref:ThreadContext[], but users may apiref:ContextDataInjectorFactory[] a custom xref:ContextDataInjector.adoc[] which obtains context data from some other source.</description>
    </plugin>
    <plugin name="LevelMatchFilter" className="org.apache.logging.log4j.core.filter.LevelMatchFilter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.AbstractLifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.Filter</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle2</supertype>
        <supertype>org.apache.logging.log4j.core.filter.AbstractFilter</supertype>
      </supertypes>
      <attributes>
        <attribute name="level" type="org.apache.logging.log4j.Level">
          <description>Sets the logging level to use.</description>
        </attribute>
        <attribute name="onMatch" type="org.apache.logging.log4j.core.Filter.Result">
          <description>Sets the Result to return when the filter matches.

Defaults to Result.
NEUTRAL.</description>
        </attribute>
        <attribute name="onMismatch" type="org.apache.logging.log4j.core.Filter.Result">
          <description>Sets the Result to return when the filter does not match.

The default is Result.
DENY.</description>
        </attribute>
      </attributes>
      <description>This filter returns the onMatch result if the logging level in the event matches the specified logging level exactly.</description>
    </plugin>
    <plugin name="LevelRangeFilter" className="org.apache.logging.log4j.core.filter.LevelRangeFilter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.AbstractLifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.Filter</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle2</supertype>
        <supertype>org.apache.logging.log4j.core.filter.AbstractFilter</supertype>
      </supertypes>
      <attributes>
        <attribute name="maxLevel" type="org.apache.logging.log4j.Level">
          <description>the maximum level threshold</description>
        </attribute>
        <attribute name="minLevel" type="org.apache.logging.log4j.Level">
          <description>the minimum level threshold</description>
        </attribute>
        <attribute name="onMatch" type="org.apache.logging.log4j.core.Filter.Result">
          <description>the result to return on a match</description>
        </attribute>
        <attribute name="onMismatch" type="org.apache.logging.log4j.core.Filter.Result">
          <description>the result to return on a mismatch</description>
        </attribute>
      </attributes>
      <description>This filter returns the xref:.adoc[] result if the level of the apiref:LogEvent[] is in the range of the configured xref:.adoc[] and xref:.adoc[] values, otherwise it returns the xref:.adoc[] result.

The default values for xref:.adoc[] and xref:.adoc[] are set to apiref:Level[] and apiref:Level[], respectively.
The default values for xref:.adoc[] and xref:.adoc[] are set to apiref:Result[] and apiref:Result[], respectively.

The levels get compared by their associated integral values; apiref:Level[] has an integral value of 0, apiref:Level[] 100, xref:Level.adoc[] 200, and so on.
For example, if the filter is configured with xref:.adoc[] set to apiref:Level[], the filter will return xref:.adoc[] result for apiref:LogEvent[]s of level with higher integral values; xref:Level.adoc[], xref:Level.adoc[], etc.</description>
    </plugin>
    <plugin name="MapFilter" className="org.apache.logging.log4j.core.filter.MapFilter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.AbstractLifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.Filter</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle2</supertype>
        <supertype>org.apache.logging.log4j.core.filter.AbstractFilter</supertype>
      </supertypes>
      <attributes>
        <attribute name="onMatch" type="org.apache.logging.log4j.core.Filter.Result"></attribute>
        <attribute name="onMismatch" type="org.apache.logging.log4j.core.Filter.Result"></attribute>
        <attribute name="operator"></attribute>
      </attributes>
      <elements>
        <element multiplicity="*" type="org.apache.logging.log4j.core.util.KeyValuePair"></element>
      </elements>
      <description>A Filter that operates on a Map.</description>
    </plugin>
    <plugin name="MarkerFilter" className="org.apache.logging.log4j.core.filter.MarkerFilter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.AbstractLifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.Filter</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle2</supertype>
        <supertype>org.apache.logging.log4j.core.filter.AbstractFilter</supertype>
      </supertypes>
      <attributes>
        <attribute name="marker">
          <description>The Marker name to match.</description>
        </attribute>
        <attribute name="onMatch" type="org.apache.logging.log4j.core.Filter.Result">
          <description>The action to take if a match occurs.</description>
        </attribute>
        <attribute name="onMismatch" type="org.apache.logging.log4j.core.Filter.Result">
          <description>The action to take if no match occurs.</description>
        </attribute>
      </attributes>
      <description>This filter returns the onMatch result if the marker in the LogEvent is the same as or has the configured marker as a parent.</description>
    </plugin>
    <plugin name="MutableThreadContextMapFilter" className="org.apache.logging.log4j.core.filter.MutableThreadContextMapFilter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.AbstractLifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.Filter</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle2</supertype>
        <supertype>org.apache.logging.log4j.core.filter.AbstractFilter</supertype>
      </supertypes>
      <attributes>
        <attribute name="configLocation">
          <description>Sets the configuration to use.</description>
        </attribute>
        <attribute name="onMatch" type="org.apache.logging.log4j.core.Filter.Result">
          <description>Sets the Result to return when the filter matches.

Defaults to Result.
NEUTRAL.</description>
        </attribute>
        <attribute name="onMismatch" type="org.apache.logging.log4j.core.Filter.Result">
          <description>Sets the Result to return when the filter does not match.

The default is Result.
DENY.</description>
        </attribute>
        <attribute name="pollInterval" type="long">
          <description>Set the frequency in seconds that changes to the list a ThreadContext valudes should be checked.</description>
        </attribute>
      </attributes>
      <description>Filter based on a value in the Thread Context Map (MDC).</description>
    </plugin>
    <plugin name="NoMarkerFilter" className="org.apache.logging.log4j.core.filter.NoMarkerFilter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.AbstractLifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.Filter</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle2</supertype>
        <supertype>org.apache.logging.log4j.core.filter.AbstractFilter</supertype>
      </supertypes>
      <attributes>
        <attribute name="onMatch" type="org.apache.logging.log4j.core.Filter.Result">
          <description>Sets the Result to return when the filter matches.

Defaults to Result.
NEUTRAL.</description>
        </attribute>
        <attribute name="onMismatch" type="org.apache.logging.log4j.core.Filter.Result">
          <description>Sets the Result to return when the filter does not match.

The default is Result.
DENY.</description>
        </attribute>
      </attributes>
      <description>This filter returns the onMatch result if there is no marker in the LogEvent.</description>
    </plugin>
    <plugin name="RegexFilter" className="org.apache.logging.log4j.core.filter.RegexFilter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.AbstractLifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.Filter</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle2</supertype>
        <supertype>org.apache.logging.log4j.core.filter.AbstractFilter</supertype>
      </supertypes>
      <attributes>
        <attribute name="onMatch" type="org.apache.logging.log4j.core.Filter.Result">
          <description>The action to perform when a match occurs.</description>
        </attribute>
        <attribute name="onMismatch" type="org.apache.logging.log4j.core.Filter.Result">
          <description>The action to perform when a mismatch occurs.</description>
        </attribute>
        <attribute name="regex">
          <description>The regular expression to match.</description>
        </attribute>
        <attribute name="useRawMsg" type="java.lang.Boolean">
          <description>If true, the raw message will be used, otherwise the formatted message will be used.</description>
        </attribute>
      </attributes>
      <elements>
        <element multiplicity="*" type="java.lang.String">
          <description>An array of Strings where each String is a apiref:Pattern[] compilation flag.</description>
        </element>
      </elements>
      <description>This filter returns the onMatch result if the message matches the regular expression.

The "useRawMsg" attribute can be used to indicate whether the regular expression should be applied to the result of calling Message.
getMessageFormat (true) or Message.
getFormattedMessage() (false). The default is false.</description>
    </plugin>
    <plugin name="ScriptFilter" className="org.apache.logging.log4j.core.filter.ScriptFilter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.AbstractLifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.Filter</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle2</supertype>
        <supertype>org.apache.logging.log4j.core.filter.AbstractFilter</supertype>
      </supertypes>
      <attributes>
        <attribute name="onMatch" type="org.apache.logging.log4j.core.Filter.Result">
          <description>The action to take if a match occurs.</description>
        </attribute>
        <attribute name="onMismatch" type="org.apache.logging.log4j.core.Filter.Result">
          <description>The action to take if no match occurs.</description>
        </attribute>
      </attributes>
      <elements>
        <element type="org.apache.logging.log4j.core.script.AbstractScript">
          <description>The script to run.
The script must return a boolean value.
Either script or scriptFile must be provided.</description>
        </element>
      </elements>
      <description>Returns the onMatch result if the script returns True and returns the onMismatch value otherwise.</description>
    </plugin>
    <plugin name="StringMatchFilter" className="org.apache.logging.log4j.core.filter.StringMatchFilter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.AbstractLifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.Filter</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle2</supertype>
        <supertype>org.apache.logging.log4j.core.filter.AbstractFilter</supertype>
      </supertypes>
      <attributes>
        <attribute name="onMatch" type="org.apache.logging.log4j.core.Filter.Result">
          <description>Sets the Result to return when the filter matches.

Defaults to Result.
NEUTRAL.</description>
        </attribute>
        <attribute name="onMismatch" type="org.apache.logging.log4j.core.Filter.Result">
          <description>Sets the Result to return when the filter does not match.

The default is Result.
DENY.</description>
        </attribute>
        <attribute name="text"></attribute>
      </attributes>
      <description>This filter returns the onMatch result if the logging level in the event matches the specified logging level exactly.</description>
    </plugin>
    <plugin name="StructuredDataFilter" className="org.apache.logging.log4j.core.filter.StructuredDataFilter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.AbstractLifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.Filter</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle2</supertype>
        <supertype>org.apache.logging.log4j.core.filter.AbstractFilter</supertype>
        <supertype>org.apache.logging.log4j.core.filter.MapFilter</supertype>
      </supertypes>
      <attributes>
        <attribute name="onMatch" type="org.apache.logging.log4j.core.Filter.Result">
          <description>The action to perform on a match.</description>
        </attribute>
        <attribute name="onMismatch" type="org.apache.logging.log4j.core.Filter.Result">
          <description>The action to perform on a mismatch.</description>
        </attribute>
        <attribute name="operator">
          <description>The operator to perform.
If not "or" the operation will be an "and".</description>
        </attribute>
      </attributes>
      <elements>
        <element multiplicity="*" type="org.apache.logging.log4j.core.util.KeyValuePair">
          <description>Key and value pairs.</description>
        </element>
      </elements>
      <description>Filter based on data in a StructuredDataMessage.</description>
    </plugin>
    <plugin name="ThreadContextMapFilter" className="org.apache.logging.log4j.core.filter.ThreadContextMapFilter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.AbstractLifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.Filter</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle2</supertype>
        <supertype>org.apache.logging.log4j.core.filter.AbstractFilter</supertype>
        <supertype>org.apache.logging.log4j.core.filter.MapFilter</supertype>
      </supertypes>
      <attributes>
        <attribute name="onMatch" type="org.apache.logging.log4j.core.Filter.Result"></attribute>
        <attribute name="onMismatch" type="org.apache.logging.log4j.core.Filter.Result"></attribute>
        <attribute name="operator"></attribute>
      </attributes>
      <elements>
        <element multiplicity="*" type="org.apache.logging.log4j.core.util.KeyValuePair"></element>
      </elements>
      <description>Filter based on a value in the Thread Context Map (MDC).</description>
    </plugin>
    <plugin name="ThresholdFilter" className="org.apache.logging.log4j.core.filter.ThresholdFilter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.AbstractLifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.Filter</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle2</supertype>
        <supertype>org.apache.logging.log4j.core.filter.AbstractFilter</supertype>
      </supertypes>
      <attributes>
        <attribute name="level" type="org.apache.logging.log4j.Level">
          <description>The log Level.</description>
        </attribute>
        <attribute name="onMatch" type="org.apache.logging.log4j.core.Filter.Result">
          <description>The action to take on a match.</description>
        </attribute>
        <attribute name="onMismatch" type="org.apache.logging.log4j.core.Filter.Result">
          <description>The action to take on a mismatch.</description>
        </attribute>
      </attributes>
      <description>This filter returns the onMatch result if the level in the LogEvent is the same or more specific than the configured level and the onMismatch value otherwise.

For example, if the ThresholdFilter is configured with Level ERROR and the LogEvent contains Level DEBUG then the onMismatch value will be returned since ERROR events are more specific than DEBUG.
The default Level is ERROR.</description>
    </plugin>
    <plugin name="TimeFilter" className="org.apache.logging.log4j.core.filter.TimeFilter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.AbstractLifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.Filter</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle</supertype>
        <supertype>org.apache.logging.log4j.core.LifeCycle2</supertype>
        <supertype>org.apache.logging.log4j.core.filter.AbstractFilter</supertype>
      </supertypes>
      <attributes>
        <attribute name="end">
          <description>The end time.</description>
        </attribute>
        <attribute name="onMatch" type="org.apache.logging.log4j.core.Filter.Result">
          <description>Action to perform if the time matches.</description>
        </attribute>
        <attribute name="onMismatch" type="org.apache.logging.log4j.core.Filter.Result">
          <description>Action to perform if the action does not match.</description>
        </attribute>
        <attribute name="start">
          <description>The start time.</description>
        </attribute>
        <attribute name="timezone">
          <description>timezone.</description>
        </attribute>
      </attributes>
      <description>Filters events that fall within a specified time period in each day.</description>
    </plugin>
    <plugin name="CsvLogEventLayout" className="org.apache.logging.log4j.core.layout.CsvLogEventLayout">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.Layout</supertype>
        <supertype>org.apache.logging.log4j.core.StringLayout</supertype>
        <supertype>org.apache.logging.log4j.core.impl.LocationAware</supertype>
        <supertype>org.apache.logging.log4j.core.layout.AbstractCsvLayout</supertype>
        <supertype>org.apache.logging.log4j.core.layout.AbstractLayout</supertype>
        <supertype>org.apache.logging.log4j.core.layout.AbstractStringLayout</supertype>
        <supertype>org.apache.logging.log4j.core.layout.Encoder</supertype>
      </supertypes>
      <attributes>
        <attribute name="charset" type="java.nio.charset.Charset"></attribute>
        <attribute name="delimiter" type="java.lang.Character"></attribute>
        <attribute name="escape" type="java.lang.Character"></attribute>
        <attribute name="footer"></attribute>
        <attribute name="format"></attribute>
        <attribute name="header"></attribute>
        <attribute name="nullString"></attribute>
        <attribute name="quote" type="java.lang.Character"></attribute>
        <attribute name="quoteMode" type="org.apache.commons.csv.QuoteMode"></attribute>
        <attribute name="recordSeparator"></attribute>
      </attributes>
      <description>A Comma-Separated Value (CSV) layout to log events.

Depends on Apache Commons CSV 1.2.</description>
    </plugin>
    <plugin name="CsvParameterLayout" className="org.apache.logging.log4j.core.layout.CsvParameterLayout">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.Layout</supertype>
        <supertype>org.apache.logging.log4j.core.StringLayout</supertype>
        <supertype>org.apache.logging.log4j.core.impl.LocationAware</supertype>
        <supertype>org.apache.logging.log4j.core.layout.AbstractCsvLayout</supertype>
        <supertype>org.apache.logging.log4j.core.layout.AbstractLayout</supertype>
        <supertype>org.apache.logging.log4j.core.layout.AbstractStringLayout</supertype>
        <supertype>org.apache.logging.log4j.core.layout.Encoder</supertype>
      </supertypes>
      <attributes>
        <attribute name="charset" type="java.nio.charset.Charset"></attribute>
        <attribute name="delimiter" type="java.lang.Character"></attribute>
        <attribute name="escape" type="java.lang.Character"></attribute>
        <attribute name="footer"></attribute>
        <attribute name="format"></attribute>
        <attribute name="header"></attribute>
        <attribute name="nullString"></attribute>
        <attribute name="quote" type="java.lang.Character"></attribute>
        <attribute name="quoteMode" type="org.apache.commons.csv.QuoteMode"></attribute>
        <attribute name="recordSeparator"></attribute>
      </attributes>
      <description>A Comma-Separated Value (CSV) layout to log event parameters.

The event message is currently ignored.

Best used with:

`logger. debug(new ObjectArrayMessage(1, 2, "Bob"));` Depends on Apache Commons CSV 1.4.</description>
    </plugin>
    <plugin name="GelfLayout" className="org.apache.logging.log4j.core.layout.GelfLayout">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.Layout</supertype>
        <supertype>org.apache.logging.log4j.core.StringLayout</supertype>
        <supertype>org.apache.logging.log4j.core.impl.LocationAware</supertype>
        <supertype>org.apache.logging.log4j.core.layout.AbstractLayout</supertype>
        <supertype>org.apache.logging.log4j.core.layout.AbstractStringLayout</supertype>
        <supertype>org.apache.logging.log4j.core.layout.Encoder</supertype>
      </supertypes>
      <attributes>
        <attribute name="charset" type="java.nio.charset.Charset"></attribute>
        <attribute name="compressionThreshold" type="int">
          <description>Compress if data is larger than this number of bytes (optional, defaults to 1024).</description>
        </attribute>
        <attribute name="compressionType" type="org.apache.logging.log4j.core.layout.GelfLayout.CompressionType">
          <description>Compression to use (optional, defaults to GZIP).</description>
        </attribute>
        <attribute name="footer"></attribute>
        <attribute name="header"></attribute>
        <attribute name="host">
          <description>The value of the `host` property (optional, defaults to local host name).</description>
        </attribute>
        <attribute name="includeMapMessage" type="boolean">
          <description>Whether to include MapMessage fields as additional fields (optional, default to true).</description>
        </attribute>
        <attribute name="includeNewLineDelimiter" type="boolean">
          <description>Whether to include newline (LF) as delimiter after each event (optional, default to false).</description>
        </attribute>
        <attribute name="includeNullDelimiter" type="boolean">
          <description>Whether to include NULL byte as delimiter after each event (optional, default to false).

Useful for Graylog GELF TCP input.</description>
        </attribute>
        <attribute name="includeStacktrace" type="boolean">
          <description>Whether to include full stacktrace of logged Throwables (optional, default to true).

If set to false, only the class name and message of the Throwable will be included.</description>
        </attribute>
        <attribute name="includeThreadContext" type="boolean">
          <description>Whether to include thread context as additional fields (optional, default to true).</description>
        </attribute>
        <attribute name="mapMessageExcludes">
          <description>A comma separated list of MapMessage keys to exclude;</description>
        </attribute>
        <attribute name="mapMessageIncludes">
          <description>A comma separated list of thread context keys to include;</description>
        </attribute>
        <attribute name="mapPrefix">
          <description>The String to prefix the MapMessage attributes.</description>
        </attribute>
        <attribute name="messagePattern">
          <description>The pattern to use to format the message.</description>
        </attribute>
        <attribute name="omitEmptyFields" type="boolean"></attribute>
        <attribute name="threadContextExcludes"></attribute>
        <attribute name="threadContextIncludes"></attribute>
        <attribute name="threadContextPrefix">
          <description>The String to prefix the ThreadContext attributes.</description>
        </attribute>
      </attributes>
      <elements>
        <element type="org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer"></element>
        <element type="org.apache.logging.log4j.core.layout.PatternSelector">
          <description>The PatternSelector to use to format the message.</description>
        </element>
        <element multiplicity="*" type="org.apache.logging.log4j.core.util.KeyValuePair">
          <description>Additional fields to set on each log event.</description>
        </element>
      </elements>
      <description>Lays out events in the Graylog Extended Log Format (GELF) 1.1.

This layout compresses JSON to GZIP or ZLIB (the `compressionType`) if log event data is larger than 1024 bytes (the `compressionThreshold`). This layout does not implement chunking.</description>
    </plugin>
    <plugin name="HtmlLayout" className="org.apache.logging.log4j.core.layout.HtmlLayout">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.Layout</supertype>
        <supertype>org.apache.logging.log4j.core.StringLayout</supertype>
        <supertype>org.apache.logging.log4j.core.impl.LocationAware</supertype>
        <supertype>org.apache.logging.log4j.core.layout.AbstractLayout</supertype>
        <supertype>org.apache.logging.log4j.core.layout.AbstractStringLayout</supertype>
        <supertype>org.apache.logging.log4j.core.layout.Encoder</supertype>
      </supertypes>
      <attributes>
        <attribute name="charset" type="java.nio.charset.Charset">
          <description>The character set to use.
If not specified, the default will be used.</description>
        </attribute>
        <attribute name="contentType">
          <description>The content type.
Defaults to "text/html".</description>
        </attribute>
        <attribute name="fontName">
          <description>The font to use for the text.</description>
        </attribute>
        <attribute name="fontSize">
          <description>The font size of the text.</description>
        </attribute>
        <attribute name="locationInfo" type="boolean">
          <description>If "true", location information will be included.
The default is false.</description>
        </attribute>
        <attribute name="title">
          <description>The title to include in the file header.
If none is specified the default title will be used.</description>
        </attribute>
        <attribute name="charset" type="java.nio.charset.Charset"></attribute>
        <attribute name="contentType"></attribute>
        <attribute name="datePattern"></attribute>
        <attribute name="fontName"></attribute>
        <attribute name="fontSize" type="org.apache.logging.log4j.core.layout.HtmlLayout.FontSize"></attribute>
        <attribute name="locationInfo" type="boolean"></attribute>
        <attribute name="timezone"></attribute>
        <attribute name="title"></attribute>
      </attributes>
      <description>Outputs events as rows in an HTML table on an HTML page.

Appenders using this layout should have their encoding set to UTF-8 or UTF-16, otherwise events containing non ASCII characters could result in corrupted log files.</description>
    </plugin>
    <plugin name="JsonLayout" className="org.apache.logging.log4j.core.layout.JsonLayout">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.Layout</supertype>
        <supertype>org.apache.logging.log4j.core.StringLayout</supertype>
        <supertype>org.apache.logging.log4j.core.impl.LocationAware</supertype>
        <supertype>org.apache.logging.log4j.core.layout.AbstractJacksonLayout</supertype>
        <supertype>org.apache.logging.log4j.core.layout.AbstractLayout</supertype>
        <supertype>org.apache.logging.log4j.core.layout.AbstractStringLayout</supertype>
        <supertype>org.apache.logging.log4j.core.layout.Encoder</supertype>
      </supertypes>
      <attributes>
        <attribute name="charset" type="java.nio.charset.Charset"></attribute>
        <attribute name="compact" type="boolean"></attribute>
        <attribute name="complete" type="boolean"></attribute>
        <attribute name="endOfLine"></attribute>
        <attribute name="eventEol" type="boolean"></attribute>
        <attribute name="footer"></attribute>
        <attribute name="header"></attribute>
        <attribute name="includeNullDelimiter" type="boolean">
          <description>Whether to include NULL byte as delimiter after each event (optional, default to false).</description>
        </attribute>
        <attribute name="includeStacktrace" type="boolean">
          <description>If "true", includes the stacktrace of any Throwable in the generated JSON, defaults to "true".

If "true", includes the stacktrace of any Throwable in the generated data, defaults to "true".</description>
        </attribute>
        <attribute name="includeTimeMillis" type="boolean">
          <description>Whether to include the timestamp (in addition to the Instant) (optional, default to false).</description>
        </attribute>
        <attribute name="locationInfo" type="boolean"></attribute>
        <attribute name="objectMessageAsJsonObject" type="boolean"></attribute>
        <attribute name="properties" type="boolean"></attribute>
        <attribute name="propertiesAsList" type="boolean"></attribute>
        <attribute name="stacktraceAsString" type="boolean">
          <description>Whether to format the stacktrace as a string, and not a nested object (optional, defaults to false).</description>
        </attribute>
      </attributes>
      <elements>
        <element type="org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer"></element>
        <element multiplicity="*" type="org.apache.logging.log4j.core.util.KeyValuePair">
          <description>Additional fields to set on each log event.</description>
        </element>
      </elements>
      <description>Note: The JsonLayout should be considered to be deprecated.

Please use JsonTemplateLayout instead.
Appends a series of JSON events as strings serialized as bytes.

== Additional Fields

If you configure `complete="true"`, the appender outputs a well-formed JSON document.
By default, with `complete="false"`, you should include the output as an _external file_ in a separate file to form a well-formed JSON document.

If `complete="false"`, the appender does not write the JSON open array character "[" at the start of the document, "]" and the end, nor comma "," between records.

Appenders using this layout should have their `charset` set to `UTF-8` or `UTF-16`, otherwise events containing non ASCII characters could result in corrupted log files.

By default, the JSON layout is not compact (a.k.a. "pretty") with `compact="false"`, which means the appender uses end-of-line characters and indents lines to format the text.
If `compact="true"`, then no end-of-line or indentation is used.
Message content may contain, of course, escaped end-of-lines.

This property allows addition of custom fields into generated JSON.
`&lt;JsonLayout&gt;&lt;KeyValuePair key="foo" value="bar"/&gt;&lt;/JsonLayout&gt;` inserts `"foo":"bar"` directly into JSON output.
Supports Lookup expressions.</description>
    </plugin>
    <plugin name="LevelPatternSelector" className="org.apache.logging.log4j.core.layout.LevelPatternSelector">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.impl.LocationAware</supertype>
        <supertype>org.apache.logging.log4j.core.layout.PatternSelector</supertype>
      </supertypes>
      <attributes>
        <attribute name="alwaysWriteExceptions" type="boolean"></attribute>
        <attribute name="defaultPattern"></attribute>
        <attribute name="disableAnsi" type="boolean"></attribute>
        <attribute name="noConsoleNoAnsi" type="boolean"></attribute>
      </attributes>
      <elements>
        <element multiplicity="*" type="org.apache.logging.log4j.core.layout.PatternMatch"></element>
      </elements>
      <description>Selects the pattern to use based on the Level in the LogEvent.</description>
    </plugin>
    <plugin name="LoggerFields" className="org.apache.logging.log4j.core.layout.LoggerFields">
      <supertypes>
        <supertype>java.lang.Object</supertype>
      </supertypes>
      <attributes>
        <attribute name="discardIfAllFieldsAreEmpty" type="boolean">
          <description>this SD-ELEMENT should be discarded if all fields are empty</description>
        </attribute>
        <attribute name="enterpriseId">
          <description>The IANA assigned enterprise number</description>
        </attribute>
        <attribute name="sdId">
          <description>The SD-ID in an SD-ELEMENT</description>
        </attribute>
      </attributes>
      <elements>
        <element multiplicity="*" type="org.apache.logging.log4j.core.util.KeyValuePair">
          <description>An array of KeyValuePairs.</description>
        </element>
      </elements>
      <description>A LoggerFields container.</description>
    </plugin>
    <plugin name="MarkerPatternSelector" className="org.apache.logging.log4j.core.layout.MarkerPatternSelector">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.impl.LocationAware</supertype>
        <supertype>org.apache.logging.log4j.core.layout.PatternSelector</supertype>
      </supertypes>
      <attributes>
        <attribute name="alwaysWriteExceptions" type="boolean"></attribute>
        <attribute name="defaultPattern"></attribute>
        <attribute name="disableAnsi" type="boolean"></attribute>
        <attribute name="noConsoleNoAnsi" type="boolean"></attribute>
      </attributes>
      <elements>
        <element multiplicity="*" type="org.apache.logging.log4j.core.layout.PatternMatch"></element>
      </elements>
      <description>Selects the pattern to use based on the Marker in the LogEvent.</description>
    </plugin>
    <plugin name="MessageLayout" className="org.apache.logging.log4j.core.layout.MessageLayout">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.Layout</supertype>
        <supertype>org.apache.logging.log4j.core.layout.AbstractLayout</supertype>
        <supertype>org.apache.logging.log4j.core.layout.Encoder</supertype>
      </supertypes>
      <description>Formats a apiref:LogEvent[] in its apiref:Message[] form.

Useful in combination with a JMS Appender to map a Log4j xref:org.apache.logging.log4j.message.MapMessage.adoc[MapMessage] or xref:org.apache.logging.log4j.message.StringMapMessage.adoc[StringMapMessage] to a JMS xref:javax.jms.MapMessage.adoc[MapMessage].</description>
    </plugin>
    <plugin name="PatternLayout" className="org.apache.logging.log4j.core.layout.PatternLayout">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.Layout</supertype>
        <supertype>org.apache.logging.log4j.core.StringLayout</supertype>
        <supertype>org.apache.logging.log4j.core.impl.LocationAware</supertype>
        <supertype>org.apache.logging.log4j.core.layout.AbstractLayout</supertype>
        <supertype>org.apache.logging.log4j.core.layout.AbstractStringLayout</supertype>
        <supertype>org.apache.logging.log4j.core.layout.Encoder</supertype>
      </supertypes>
      <attributes>
        <attribute name="alwaysWriteExceptions" type="boolean">
          <description>If `"true"` (default) exceptions are always written even if the pattern contains no exception tokens.</description>
        </attribute>
        <attribute name="charset" type="java.nio.charset.Charset">
          <description>The character set.
The platform default is used if not specified.</description>
        </attribute>
        <attribute name="footer">
          <description>The footer to place at the bottom of the document, once.</description>
        </attribute>
        <attribute name="header">
          <description>The footer to place at the top of the document, once.</description>
        </attribute>
        <attribute name="noConsoleNoAnsi" type="boolean">
          <description>If `"true"` (default is false) and apiref:System[] is null, do not output ANSI escape codes</description>
        </attribute>
        <attribute name="pattern">
          <description>The pattern.
If not specified, defaults to DEFAULT_CONVERSION_PATTERN.</description>
        </attribute>
        <attribute name="alwaysWriteExceptions" type="boolean"></attribute>
        <attribute name="charset" type="java.nio.charset.Charset"></attribute>
        <attribute name="disableAnsi" type="boolean"></attribute>
        <attribute name="footer"></attribute>
        <attribute name="header"></attribute>
        <attribute name="noConsoleNoAnsi" type="boolean"></attribute>
        <attribute name="pattern"></attribute>
      </attributes>
      <elements>
        <element type="org.apache.logging.log4j.core.layout.PatternSelector">
          <description>Allows different patterns to be used based on some selection criteria.</description>
        </element>
        <element type="org.apache.logging.log4j.core.pattern.RegexReplacement">
          <description>A Regex replacement String.</description>
        </element>
        <element type="org.apache.logging.log4j.core.layout.PatternSelector"></element>
        <element type="org.apache.logging.log4j.core.pattern.RegexReplacement"></element>
      </elements>
      <description>A flexible layout configurable with pattern string.

The goal of this class is to xref:org.apache.logging.log4j.core.Layout.adoc[Layout] a apiref:LogEvent[] and return the results.
The format of the result depends on the _conversion pattern_.

The conversion pattern is closely related to the conversion pattern of the printf function in C. A conversion pattern is composed of literal text and format control expressions called _conversion specifiers_.

See the Log4j Manual for details on the supported pattern converters.</description>
    </plugin>
    <plugin name="PatternMatch" className="org.apache.logging.log4j.core.layout.PatternMatch">
      <supertypes>
        <supertype>java.lang.Object</supertype>
      </supertypes>
      <attributes>
        <attribute name="key"></attribute>
        <attribute name="pattern"></attribute>
      </attributes>
      <description>PatternMatch configuration item.</description>
    </plugin>
    <plugin name="Rfc5424Layout" className="org.apache.logging.log4j.core.layout.Rfc5424Layout">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.Layout</supertype>
        <supertype>org.apache.logging.log4j.core.StringLayout</supertype>
        <supertype>org.apache.logging.log4j.core.impl.LocationAware</supertype>
        <supertype>org.apache.logging.log4j.core.layout.AbstractLayout</supertype>
        <supertype>org.apache.logging.log4j.core.layout.AbstractStringLayout</supertype>
        <supertype>org.apache.logging.log4j.core.layout.Encoder</supertype>
      </supertypes>
      <attributes>
        <attribute name="appName">
          <description>The value to use as the APP-NAME in the RFC 5424 syslog record.</description>
        </attribute>
        <attribute name="enterpriseNumber" type="int">
          <description>The IANA enterprise number.</description>
        </attribute>
        <attribute name="eventPrefix">
          <description>The prefix to add to event key names.</description>
        </attribute>
        <attribute name="exceptionPattern">
          <description>The pattern for formatting exceptions.</description>
        </attribute>
        <attribute name="facility" type="org.apache.logging.log4j.core.net.Facility">
          <description>The Facility is used to try to classify the message.</description>
        </attribute>
        <attribute name="id">
          <description>The default structured data id to use when formatting according to RFC 5424.</description>
        </attribute>
        <attribute name="includeMDC" type="boolean">
          <description>Indicates whether data from the ThreadContextMap will be included in the RFC 5424 Syslog record.
Defaults to "true:.</description>
        </attribute>
        <attribute name="mdcExcludes">
          <description>A comma separated list of MDC keys that should be excluded from the LogEvent.</description>
        </attribute>
        <attribute name="mdcId">
          <description>The id to use for the MDC Structured Data Element.</description>
        </attribute>
        <attribute name="mdcIncludes">
          <description>A comma separated list of MDC keys that should be included in the FlumeEvent.</description>
        </attribute>
        <attribute name="mdcPrefix">
          <description>The prefix to add to MDC key names.</description>
        </attribute>
        <attribute name="mdcRequired">
          <description>A comma separated list of MDC keys that must be present in the MDC.</description>
        </attribute>
        <attribute name="messageId">
          <description>The default value to be used in the MSGID field of RFC 5424 syslog records.</description>
        </attribute>
        <attribute name="newLine" type="boolean">
          <description>If true, a newline will be appended to the end of the syslog record.
The default is false.</description>
        </attribute>
        <attribute name="newLineEscape">
          <description>String that should be used to replace newlines within the message text.</description>
        </attribute>
        <attribute name="useTlsMessageFormat" type="boolean">
          <description>If true the message will be formatted according to RFC 5425.</description>
        </attribute>
      </attributes>
      <elements>
        <element multiplicity="*" type="org.apache.logging.log4j.core.layout.LoggerFields">
          <description>Container for the KeyValuePairs containing the patterns</description>
        </element>
      </elements>
      <description>Formats a log event in accordance with RFC 5424.</description>
    </plugin>
    <plugin name="ScriptPatternSelector" className="org.apache.logging.log4j.core.layout.ScriptPatternSelector">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.impl.LocationAware</supertype>
        <supertype>org.apache.logging.log4j.core.layout.PatternSelector</supertype>
      </supertypes>
      <attributes>
        <attribute name="alwaysWriteExceptions" type="boolean"></attribute>
        <attribute name="defaultPattern"></attribute>
        <attribute name="disableAnsi" type="boolean"></attribute>
        <attribute name="noConsoleNoAnsi" type="boolean"></attribute>
      </attributes>
      <elements>
        <element multiplicity="*" type="org.apache.logging.log4j.core.layout.PatternMatch"></element>
        <element type="org.apache.logging.log4j.core.script.AbstractScript"></element>
      </elements>
      <description>Selects the pattern to use based on the result of executing a Script.

The returned value will be used as the "key" to choose between one of the configured patterns.
If no key is returned or there is no match the default pattern will be used.</description>
    </plugin>
    <plugin name="SerializedLayout" className="org.apache.logging.log4j.core.layout.SerializedLayout">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.Layout</supertype>
        <supertype>org.apache.logging.log4j.core.layout.AbstractLayout</supertype>
        <supertype>org.apache.logging.log4j.core.layout.Encoder</supertype>
      </supertypes>
      <description>Formats a apiref:LogEvent[] in its Java serialized form.</description>
    </plugin>
    <plugin name="SyslogLayout" className="org.apache.logging.log4j.core.layout.SyslogLayout">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.Layout</supertype>
        <supertype>org.apache.logging.log4j.core.StringLayout</supertype>
        <supertype>org.apache.logging.log4j.core.impl.LocationAware</supertype>
        <supertype>org.apache.logging.log4j.core.layout.AbstractLayout</supertype>
        <supertype>org.apache.logging.log4j.core.layout.AbstractStringLayout</supertype>
        <supertype>org.apache.logging.log4j.core.layout.Encoder</supertype>
      </supertypes>
      <attributes>
        <attribute name="charset" type="java.nio.charset.Charset"></attribute>
        <attribute name="facility" type="org.apache.logging.log4j.core.net.Facility"></attribute>
        <attribute name="footer"></attribute>
        <attribute name="header"></attribute>
        <attribute name="newLine" type="boolean"></attribute>
        <attribute name="newLineEscape"></attribute>
      </attributes>
      <elements>
        <element type="org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer"></element>
      </elements>
      <description>Formats a log event as a BSD Log record.</description>
    </plugin>
    <plugin name="XmlLayout" className="org.apache.logging.log4j.core.layout.XmlLayout">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.Layout</supertype>
        <supertype>org.apache.logging.log4j.core.StringLayout</supertype>
        <supertype>org.apache.logging.log4j.core.impl.LocationAware</supertype>
        <supertype>org.apache.logging.log4j.core.layout.AbstractJacksonLayout</supertype>
        <supertype>org.apache.logging.log4j.core.layout.AbstractLayout</supertype>
        <supertype>org.apache.logging.log4j.core.layout.AbstractStringLayout</supertype>
        <supertype>org.apache.logging.log4j.core.layout.Encoder</supertype>
      </supertypes>
      <attributes>
        <attribute name="charset" type="java.nio.charset.Charset"></attribute>
        <attribute name="compact" type="boolean"></attribute>
        <attribute name="complete" type="boolean"></attribute>
        <attribute name="endOfLine"></attribute>
        <attribute name="eventEol" type="boolean"></attribute>
        <attribute name="footer"></attribute>
        <attribute name="header"></attribute>
        <attribute name="includeNullDelimiter" type="boolean">
          <description>Whether to include NULL byte as delimiter after each event (optional, default to false).</description>
        </attribute>
        <attribute name="includeStacktrace" type="boolean">
          <description>If "true", includes the stacktrace of any Throwable in the generated JSON, defaults to "true".

If "true", includes the stacktrace of any Throwable in the generated data, defaults to "true".</description>
        </attribute>
        <attribute name="includeTimeMillis" type="boolean">
          <description>Whether to include the timestamp (in addition to the Instant) (optional, default to false).</description>
        </attribute>
        <attribute name="locationInfo" type="boolean"></attribute>
        <attribute name="properties" type="boolean"></attribute>
        <attribute name="stacktraceAsString" type="boolean">
          <description>Whether to format the stacktrace as a string, and not a nested object (optional, defaults to false).</description>
        </attribute>
      </attributes>
      <elements>
        <element type="org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer"></element>
        <element multiplicity="*" type="org.apache.logging.log4j.core.util.KeyValuePair">
          <description>Additional fields to set on each log event.</description>
        </element>
      </elements>
      <description>Appends a series of `event` elements as defined in the log4j.
dtd.

== Additional Fields

If you configure `complete="true"`, the appender outputs a well-formed XML document where the default namespace is the log4j namespace . By default, with `complete="false"`, you should include the output as an _external entity_ in a separate file to form a well-formed XML document.

If `complete="false"`, the appender does not write the XML processing instruction and the root element.

Appenders using this layout should have their `charset` set to `UTF-8` or `UTF-16`, otherwise events containing non-ASCII characters could result in corrupted log files.

By default, the XML layout is not compact (compact = not "pretty") with `compact="false"`, which means the appender uses end-of-line characters and indents lines to format the XML.
If `compact="true"`, then no end-of-line or indentation is used.
Message content may contain, of course, end-of-lines.

This property allows addition of custom fields into generated JSON.
`&lt;XmlLayout&gt;&lt;KeyValuePair key="foo" value="bar"/&gt;&lt;/XmlLayout&gt;` inserts `&lt;foo&gt;bar&lt;/foo&gt;` directly into XML output.
Supports Lookup expressions.</description>
    </plugin>
    <plugin name="YamlLayout" className="org.apache.logging.log4j.core.layout.YamlLayout">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.Layout</supertype>
        <supertype>org.apache.logging.log4j.core.StringLayout</supertype>
        <supertype>org.apache.logging.log4j.core.impl.LocationAware</supertype>
        <supertype>org.apache.logging.log4j.core.layout.AbstractJacksonLayout</supertype>
        <supertype>org.apache.logging.log4j.core.layout.AbstractLayout</supertype>
        <supertype>org.apache.logging.log4j.core.layout.AbstractStringLayout</supertype>
        <supertype>org.apache.logging.log4j.core.layout.Encoder</supertype>
      </supertypes>
      <attributes>
        <attribute name="charset" type="java.nio.charset.Charset"></attribute>
        <attribute name="compact" type="boolean"></attribute>
        <attribute name="complete" type="boolean"></attribute>
        <attribute name="endOfLine"></attribute>
        <attribute name="eventEol" type="boolean"></attribute>
        <attribute name="footer"></attribute>
        <attribute name="header"></attribute>
        <attribute name="includeNullDelimiter" type="boolean">
          <description>Whether to include NULL byte as delimiter after each event (optional, default to false).</description>
        </attribute>
        <attribute name="includeStacktrace" type="boolean">
          <description>If "true", includes the stacktrace of any Throwable in the generated JSON, defaults to "true".

If "true", includes the stacktrace of any Throwable in the generated data, defaults to "true".</description>
        </attribute>
        <attribute name="includeTimeMillis" type="boolean">
          <description>Whether to include the timestamp (in addition to the Instant) (optional, default to false).</description>
        </attribute>
        <attribute name="locationInfo" type="boolean"></attribute>
        <attribute name="properties" type="boolean"></attribute>
        <attribute name="stacktraceAsString" type="boolean">
          <description>Whether to format the stacktrace as a string, and not a nested object (optional, defaults to false).</description>
        </attribute>
      </attributes>
      <elements>
        <element type="org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer"></element>
        <element multiplicity="*" type="org.apache.logging.log4j.core.util.KeyValuePair">
          <description>Additional fields to set on each log event.</description>
        </element>
      </elements>
      <description>Appends a series of YAML events as strings serialized as bytes.

== Additional Fields

Appenders using this layout should have their `charset` set to `UTF-8` or `UTF-16`, otherwise events containing non ASCII characters could result in corrupted log files.

This property allows addition of custom fields into generated JSON.
`&lt;YamlLayout&gt;&lt;KeyValuePair key="foo" value="bar"/&gt;&lt;/YamlLayout&gt;` inserts `foo: "bar"` directly into YAML output.
Supports Lookup expressions.</description>
    </plugin>
    <plugin name="ctx" namespace="Lookup" className="org.apache.logging.log4j.core.lookup.ContextMapLookup">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.lookup.StrLookup</supertype>
      </supertypes>
      <description>Looks up keys from the context.

By default this is the apiref:ThreadContext[], but users may apiref:ContextDataInjectorFactory[] a custom xref:ContextDataInjector.adoc[] which obtains context data from some other source.</description>
    </plugin>
    <plugin name="date" namespace="Lookup" className="org.apache.logging.log4j.core.lookup.DateLookup">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.lookup.StrLookup</supertype>
      </supertypes>
      <description>Formats the current date or the date in the LogEvent.

The "key" is used as the format String, following the java.
text.
SimpleDateFormat date and time pattern strings.</description>
    </plugin>
    <plugin name="env" namespace="Lookup" className="org.apache.logging.log4j.core.lookup.EnvironmentLookup">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.lookup.AbstractLookup</supertype>
        <supertype>org.apache.logging.log4j.core.lookup.StrLookup</supertype>
      </supertypes>
      <description>Looks up keys from environment variables.</description>
    </plugin>
    <plugin name="event" namespace="Lookup" className="org.apache.logging.log4j.core.lookup.EventLookup">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.lookup.AbstractLookup</supertype>
        <supertype>org.apache.logging.log4j.core.lookup.StrLookup</supertype>
      </supertypes>
      <description>Looks up values from the log event.</description>
    </plugin>
    <plugin name="java" namespace="Lookup" className="org.apache.logging.log4j.core.lookup.JavaLookup">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.lookup.AbstractLookup</supertype>
        <supertype>org.apache.logging.log4j.core.lookup.StrLookup</supertype>
      </supertypes>
      <description>Looks up keys related to Java: Java version, JRE version, VM version, and so on.</description>
    </plugin>
    <plugin name="jvmrunargs" namespace="Lookup" className="org.apache.logging.log4j.core.lookup.JmxRuntimeInputArgumentsLookup">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.lookup.MapLookup</supertype>
        <supertype>org.apache.logging.log4j.core.lookup.StrLookup</supertype>
      </supertypes>
      <description>Maps JVM input arguments (but not main arguments) using JMX to acquire JVM arguments.</description>
    </plugin>
    <plugin name="jndi" namespace="Lookup" className="org.apache.logging.log4j.core.lookup.JndiLookup">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.lookup.AbstractLookup</supertype>
        <supertype>org.apache.logging.log4j.core.lookup.StrLookup</supertype>
      </supertypes>
      <description>Looks up keys from JNDI resources.</description>
    </plugin>
    <plugin name="log4j" namespace="Lookup" className="org.apache.logging.log4j.core.lookup.Log4jLookup">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.config.ConfigurationAware</supertype>
        <supertype>org.apache.logging.log4j.core.lookup.AbstractConfigurationAwareLookup</supertype>
        <supertype>org.apache.logging.log4j.core.lookup.AbstractLookup</supertype>
        <supertype>org.apache.logging.log4j.core.lookup.StrLookup</supertype>
      </supertypes>
      <description>Lookup properties of Log4j</description>
    </plugin>
    <plugin name="lower" namespace="Lookup" className="org.apache.logging.log4j.core.lookup.LowerLookup">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.lookup.StrLookup</supertype>
      </supertypes>
      <description>Converts values to lower case.

The passed in "key" should be the value of another lookup.</description>
    </plugin>
    <plugin name="main" namespace="Lookup" className="org.apache.logging.log4j.core.lookup.MainMapLookup">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.lookup.MapLookup</supertype>
        <supertype>org.apache.logging.log4j.core.lookup.StrLookup</supertype>
      </supertypes>
      <description>A map-based lookup for main arguments.

See xref:.adoc[].</description>
    </plugin>
    <plugin name="map" namespace="Lookup" className="org.apache.logging.log4j.core.lookup.MapLookup">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.lookup.StrLookup</supertype>
      </supertypes>
      <description>A map-based lookup.</description>
    </plugin>
    <plugin name="marker" namespace="Lookup" className="org.apache.logging.log4j.core.lookup.MarkerLookup">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.lookup.AbstractLookup</supertype>
        <supertype>org.apache.logging.log4j.core.lookup.StrLookup</supertype>
      </supertypes>
      <description>Looks-up markers.</description>
    </plugin>
    <plugin name="bundle" namespace="Lookup" className="org.apache.logging.log4j.core.lookup.ResourceBundleLookup">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.lookup.AbstractLookup</supertype>
        <supertype>org.apache.logging.log4j.core.lookup.StrLookup</supertype>
      </supertypes>
      <description>Looks up keys from resource bundles.</description>
    </plugin>
    <plugin name="sd" namespace="Lookup" className="org.apache.logging.log4j.core.lookup.StructuredDataLookup">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.lookup.StrLookup</supertype>
      </supertypes>
      <description>Looks up keys from xref:org.apache.logging.log4j.message.StructuredDataMessage.adoc[StructuredDataMessage] log messages.</description>
    </plugin>
    <plugin name="sys" namespace="Lookup" className="org.apache.logging.log4j.core.lookup.SystemPropertiesLookup">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.lookup.AbstractLookup</supertype>
        <supertype>org.apache.logging.log4j.core.lookup.StrLookup</supertype>
      </supertypes>
      <description>Looks up keys from system properties.</description>
    </plugin>
    <plugin name="upper" namespace="Lookup" className="org.apache.logging.log4j.core.lookup.UpperLookup">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.lookup.StrLookup</supertype>
      </supertypes>
      <description>Converts values to upper case.

The passed in "key" should be the value of another lookup.</description>
    </plugin>
    <plugin name="multicastdns" className="org.apache.logging.log4j.core.net.MulticastDnsAdvertiser">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.net.Advertiser</supertype>
      </supertypes>
      <description>Advertise an entity via ZeroConf/MulticastDNS and the JmDNS library.

The length of property names and values must be 255 bytes or less.
Entries with names or values larger than 255 bytes will be removed prior to advertisement.</description>
    </plugin>
    <plugin name="SocketAddress" className="org.apache.logging.log4j.core.net.SocketAddress">
      <supertypes>
        <supertype>java.lang.Object</supertype>
      </supertypes>
      <attributes>
        <attribute name="host" type="java.net.InetAddress"></attribute>
        <attribute name="port" type="int"></attribute>
      </attributes>
      <description>Plugin to hold a hostname and port (socket address).</description>
    </plugin>
    <plugin name="SocketOptions" className="org.apache.logging.log4j.core.net.SocketOptions">
      <supertypes>
        <supertype>java.lang.Cloneable</supertype>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.util.Builder</supertype>
      </supertypes>
      <attributes>
        <attribute name="keepAlive" type="java.lang.Boolean">
          <description>See apiref:Socket[].

See apiref:Socket[].</description>
        </attribute>
        <attribute name="oobInline" type="java.lang.Boolean">
          <description>See apiref:Socket[].

See apiref:Socket[].</description>
        </attribute>
        <attribute name="receiveBufferSize" type="java.lang.Integer">
          <description>See apiref:Socket[].

See apiref:Socket[].</description>
        </attribute>
        <attribute name="reuseAddress" type="java.lang.Boolean">
          <description>See apiref:Socket[].

See apiref:Socket[].</description>
        </attribute>
        <attribute name="rfc1349TrafficClass" type="org.apache.logging.log4j.core.net.Rfc1349TrafficClass">
          <description>See apiref:Socket[].

See apiref:Socket[].</description>
        </attribute>
        <attribute name="sendBufferSize" type="java.lang.Integer">
          <description>See apiref:Socket[].

See apiref:Socket[].</description>
        </attribute>
        <attribute name="soLinger" type="java.lang.Integer">
          <description>See apiref:Socket[].

See apiref:Socket[].</description>
        </attribute>
        <attribute name="soTimeout" type="java.lang.Integer">
          <description>See apiref:Socket[].

See apiref:Socket[].</description>
        </attribute>
        <attribute name="tcpNoDelay" type="java.lang.Boolean">
          <description>See apiref:Socket[].

See apiref:Socket[].</description>
        </attribute>
        <attribute name="trafficClass" type="java.lang.Integer">
          <description>See apiref:Socket[].

See apiref:Socket[].</description>
        </attribute>
      </attributes>
      <elements>
        <element type="org.apache.logging.log4j.core.net.SocketPerformancePreferences">
          <description>See apiref:Socket[].

See apiref:Socket[].</description>
        </element>
      </elements>
      <description>Holds all socket options settable via apiref:Socket[] methods.</description>
    </plugin>
    <plugin name="SocketPerformancePreferences" className="org.apache.logging.log4j.core.net.SocketPerformancePreferences">
      <supertypes>
        <supertype>java.lang.Cloneable</supertype>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.util.Builder</supertype>
      </supertypes>
      <attributes>
        <attribute name="bandwidth" type="int" required="true"></attribute>
        <attribute name="connectionTime" type="int" required="true"></attribute>
        <attribute name="latency" type="int" required="true"></attribute>
      </attributes>
      <description>Holds all socket options settable via apiref:Socket[].

The apiref:Socket[] API may not be implemented by a JRE.</description>
    </plugin>
    <plugin name="KeyStore" className="org.apache.logging.log4j.core.net.ssl.KeyStoreConfiguration">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.net.ssl.AbstractKeyStoreConfiguration</supertype>
        <supertype>org.apache.logging.log4j.core.net.ssl.StoreConfiguration</supertype>
      </supertypes>
      <attributes>
        <attribute name="keyManagerFactoryAlgorithm">
          <description>The standard name of the requested algorithm.
See the Java Secure Socket Extension Reference Guide for information about these names.</description>
        </attribute>
        <attribute name="location">
          <description>The location of the KeyStore, a file path, URL or resource.</description>
        </attribute>
        <attribute name="password">
          <description>The password to access the KeyStore.</description>
        </attribute>
        <attribute name="passwordEnvironmentVariable"></attribute>
        <attribute name="passwordFile"></attribute>
        <attribute name="type">
          <description>The KeyStore type, null defaults to `"JKS"`.</description>
        </attribute>
      </attributes>
      <description>Configuration of the KeyStore</description>
    </plugin>
    <plugin name="Ssl" className="org.apache.logging.log4j.core.net.ssl.SslConfiguration">
      <supertypes>
        <supertype>java.lang.Object</supertype>
      </supertypes>
      <attributes>
        <attribute name="protocol">
          <description>The protocol, see http://docs.
oracle.
com/javase/7/docs/technotes/guides/security/StandardNames.
html#SSLContext</description>
        </attribute>
      </attributes>
      <elements>
        <element type="org.apache.logging.log4j.core.net.ssl.KeyStoreConfiguration">
          <description>The KeyStoreConfiguration.</description>
        </element>
        <element type="org.apache.logging.log4j.core.net.ssl.TrustStoreConfiguration">
          <description>The TrustStoreConfiguration.</description>
        </element>
      </elements>
      <description>SSL Configuration</description>
    </plugin>
    <plugin name="TrustStore" className="org.apache.logging.log4j.core.net.ssl.TrustStoreConfiguration">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.net.ssl.AbstractKeyStoreConfiguration</supertype>
        <supertype>org.apache.logging.log4j.core.net.ssl.StoreConfiguration</supertype>
      </supertypes>
      <attributes>
        <attribute name="location">
          <description>The location of the KeyStore, a file path, URL or resource.</description>
        </attribute>
        <attribute name="password">
          <description>The password to access the KeyStore.</description>
        </attribute>
        <attribute name="passwordEnvironmentVariable"></attribute>
        <attribute name="passwordFile"></attribute>
        <attribute name="trustManagerFactoryAlgorithm">
          <description>The standard name of the requested trust management algorithm.
See the Java Secure Socket Extension Reference Guide for information these names.</description>
        </attribute>
        <attribute name="type">
          <description>The KeyStore type, null defaults to `"JKS"`.</description>
        </attribute>
      </attributes>
      <description>Configuration of the TrustStore</description>
    </plugin>
    <plugin name="black" namespace="Converter" className="org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter.Black">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.AbstractPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.LogEventPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.PatternConverter</supertype>
      </supertypes>
      <description>Black style pattern converter.

Adds ANSI color styling to the result of the enclosed pattern.</description>
    </plugin>
    <plugin name="blue" namespace="Converter" className="org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter.Blue">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.AbstractPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.LogEventPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.PatternConverter</supertype>
      </supertypes>
      <description>Blue style pattern converter.

Adds ANSI color styling to the result of the enclosed pattern.</description>
    </plugin>
    <plugin name="cyan" namespace="Converter" className="org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter.Cyan">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.AbstractPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.LogEventPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.PatternConverter</supertype>
      </supertypes>
      <description>Cyan style pattern converter.

Adds ANSI color styling to the result of the enclosed pattern.</description>
    </plugin>
    <plugin name="green" namespace="Converter" className="org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter.Green">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.AbstractPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.LogEventPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.PatternConverter</supertype>
      </supertypes>
      <description>Green style pattern converter.

Adds ANSI color styling to the result of the enclosed pattern.</description>
    </plugin>
    <plugin name="magenta" namespace="Converter" className="org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter.Magenta">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.AbstractPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.LogEventPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.PatternConverter</supertype>
      </supertypes>
      <description>Magenta style pattern converter.

Adds ANSI color styling to the result of the enclosed pattern.</description>
    </plugin>
    <plugin name="red" namespace="Converter" className="org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter.Red">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.AbstractPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.LogEventPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.PatternConverter</supertype>
      </supertypes>
      <description>Red style pattern converter.

Adds ANSI color styling to the result of the enclosed pattern.</description>
    </plugin>
    <plugin name="white" namespace="Converter" className="org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter.White">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.AbstractPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.LogEventPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.PatternConverter</supertype>
      </supertypes>
      <description>White style pattern converter.

Adds ANSI color styling to the result of the enclosed pattern.</description>
    </plugin>
    <plugin name="yellow" namespace="Converter" className="org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter.Yellow">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.AbstractPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.LogEventPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.PatternConverter</supertype>
      </supertypes>
      <description>Yellow style pattern converter.

Adds ANSI color styling to the result of the enclosed pattern.</description>
    </plugin>
    <plugin name="ClassNamePatternConverter" namespace="Converter" className="org.apache.logging.log4j.core.pattern.ClassNamePatternConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.impl.LocationAware</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.AbstractPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.LogEventPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.NamePatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.PatternConverter</supertype>
      </supertypes>
      <description>Formats the class name of the site of the logging request.</description>
    </plugin>
    <plugin name="DatePatternConverter" namespace="Converter" className="org.apache.logging.log4j.core.pattern.DatePatternConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.AbstractPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.ArrayPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.LogEventPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.PatternConverter</supertype>
      </supertypes>
      <description>Converts and formats the event's date in a StringBuilder.</description>
    </plugin>
    <plugin name="encode" namespace="Converter" className="org.apache.logging.log4j.core.pattern.EncodingPatternConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.AbstractPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.LogEventPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.PatternConverter</supertype>
      </supertypes>
      <description>Converter that encodes the output from a pattern using a specified format.

Supported formats include HTML (default) and JSON.</description>
    </plugin>
    <plugin name="EndOfBatchPatternConverter" namespace="Converter" className="org.apache.logging.log4j.core.pattern.EndOfBatchPatternConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.AbstractPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.LogEventPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.PatternConverter</supertype>
      </supertypes>
      <description>Formats the EndOfBatch.</description>
    </plugin>
    <plugin name="equalsIgnoreCase" namespace="Converter" className="org.apache.logging.log4j.core.pattern.EqualsIgnoreCaseReplacementConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.AbstractPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.EqualsBaseReplacementConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.LogEventPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.PatternConverter</supertype>
      </supertypes>
      <description>Equals ignore case pattern converter.</description>
    </plugin>
    <plugin name="equals" namespace="Converter" className="org.apache.logging.log4j.core.pattern.EqualsReplacementConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.AbstractPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.EqualsBaseReplacementConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.LogEventPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.PatternConverter</supertype>
      </supertypes>
      <description>Equals pattern converter.</description>
    </plugin>
    <plugin name="ExtendedThrowablePatternConverter" namespace="Converter" className="org.apache.logging.log4j.core.pattern.ExtendedThrowablePatternConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.AbstractPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.LogEventPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.PatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.ThrowablePatternConverter</supertype>
      </supertypes>
      <description>Outputs the Throwable portion of the LoggingEvent as a full stack trace unless this converter's option is 'short', where it just outputs the first line of the trace, or if the number of lines to print is explicitly specified.

The extended stack trace will also include the location of where the class was loaded from and the version of the jar if available.</description>
    </plugin>
    <plugin name="FileDatePatternConverter" namespace="FileConverter" className="org.apache.logging.log4j.core.pattern.FileDatePatternConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
      </supertypes>
      <description>Formats a date by delegating to apiref:DatePatternConverter[].

The default date pattern for a %d specifier in a file name is different than the %d pattern in pattern layout.</description>
    </plugin>
    <plugin name="FileLocationPatternConverter" namespace="Converter" className="org.apache.logging.log4j.core.pattern.FileLocationPatternConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.AbstractPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.LogEventPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.PatternConverter</supertype>
      </supertypes>
      <description>Returns the event's line location information in a StringBuilder.</description>
    </plugin>
    <plugin name="FullLocationPatternConverter" namespace="Converter" className="org.apache.logging.log4j.core.pattern.FullLocationPatternConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.impl.LocationAware</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.AbstractPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.LogEventPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.PatternConverter</supertype>
      </supertypes>
      <description>Format the event's line location information.</description>
    </plugin>
    <plugin name="highlight" namespace="Converter" className="org.apache.logging.log4j.core.pattern.HighlightConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.AbstractPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.AnsiConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.LogEventPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.PatternConverter</supertype>
      </supertypes>
      <description>Highlight pattern converter.

Formats the result of a pattern using a color appropriate for the Level in the LogEvent.

For example:

[source,java]
----
%highlight{%d{ ISO8601 } [%t] %-5level: %msg%n%throwable}
----

You can define custom colors for each Level:

[source,java]
----
%highlight{%d{ ISO8601 } [%t] %-5level: %msg%n%throwable}{FATAL=red, ERROR=red, WARN=yellow, INFO=green, DEBUG=cyan,
TRACE=black}
----

You can use a predefined style:

[source,java]
----
%highlight{%d{ ISO8601 } [%t] %-5level: %msg%n%throwable}{STYLE=DEFAULT}
----

The available predefined styles are:

* `Default`
* `Log4j` - The same as `Default`
* `Logback`

You can use whitespace around the comma and equal sign.
The names in values MUST come from the apiref:AnsiEscape[] enum, case is normalized to upper-case internally.

To disable ANSI output unconditionally, specify an additional option `disableAnsi=true`, or to disable ANSI output if no console is detected, specify option `noConsoleNoAnsi=true` e.g..

[source,java]
----
%highlight{%d{ ISO8601 } [%t] %-5level: %msg%n%throwable}{STYLE=DEFAULT, noConsoleNoAnsi=true}
----</description>
    </plugin>
    <plugin name="IntegerPatternConverter" namespace="FileConverter" className="org.apache.logging.log4j.core.pattern.IntegerPatternConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.AbstractPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.ArrayPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.PatternConverter</supertype>
      </supertypes>
      <description>Formats an integer.</description>
    </plugin>
    <plugin name="LevelPatternConverter" namespace="Converter" className="org.apache.logging.log4j.core.pattern.LevelPatternConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.AbstractPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.LogEventPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.PatternConverter</supertype>
      </supertypes>
      <description>Returns the event's level in a StringBuilder.</description>
    </plugin>
    <plugin name="LineLocationPatternConverter" namespace="Converter" className="org.apache.logging.log4j.core.pattern.LineLocationPatternConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.impl.LocationAware</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.AbstractPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.LogEventPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.PatternConverter</supertype>
      </supertypes>
      <description>Returns the event's line location information in a StringBuilder.</description>
    </plugin>
    <plugin name="LineSeparatorPatternConverter" namespace="Converter" className="org.apache.logging.log4j.core.pattern.LineSeparatorPatternConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.AbstractPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.LogEventPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.PatternConverter</supertype>
      </supertypes>
      <description>Formats a line separator.</description>
    </plugin>
    <plugin name="LoggerFqcnPatternConverter" namespace="Converter" className="org.apache.logging.log4j.core.pattern.LoggerFqcnPatternConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.AbstractPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.LogEventPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.PatternConverter</supertype>
      </supertypes>
      <description>Formats the Logger FQCN.</description>
    </plugin>
    <plugin name="LoggerPatternConverter" namespace="Converter" className="org.apache.logging.log4j.core.pattern.LoggerPatternConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.AbstractPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.LogEventPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.NamePatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.PatternConverter</supertype>
      </supertypes>
      <description>Formats a logger name.</description>
    </plugin>
    <plugin name="MapPatternConverter" namespace="Converter" className="org.apache.logging.log4j.core.pattern.MapPatternConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.AbstractPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.LogEventPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.PatternConverter</supertype>
      </supertypes>
      <description>Able to handle the contents of the LogEvent's MapMessage and either output the entire contents of the properties in a similar format to the java.
util.
Hashtable.
toString(), or to output the value of a specific key within the Map.</description>
    </plugin>
    <plugin name="MarkerPatternConverter" namespace="Converter" className="org.apache.logging.log4j.core.pattern.MarkerPatternConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.AbstractPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.LogEventPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.PatternConverter</supertype>
      </supertypes>
      <description>Returns events' full marker string in a StringBuilder.</description>
    </plugin>
    <plugin name="MarkerNamePatternConverter" namespace="Converter" className="org.apache.logging.log4j.core.pattern.MarkerSimpleNamePatternConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.AbstractPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.LogEventPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.PatternConverter</supertype>
      </supertypes>
      <description>Appends an event's maker name to a StringBuilder.</description>
    </plugin>
    <plugin name="maxLength" namespace="Converter" className="org.apache.logging.log4j.core.pattern.MaxLengthConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.AbstractPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.LogEventPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.PatternConverter</supertype>
      </supertypes>
      <description>Max length pattern converter.

Limit contained text to a maximum length.
On invalid length the default value 100 is used (and an error message is logged). If max length is greater than 20, an abbreviated text will get ellipsis ("...") appended.
Example usage (for email subject): `"%maxLen{[AppName, ${hostName}, ${web:contextPath}] %p: %c{1} - %m%notEmpty{ =&gt;%ex{short}}}{160}"`</description>
    </plugin>
    <plugin name="MdcPatternConverter" namespace="Converter" className="org.apache.logging.log4j.core.pattern.MdcPatternConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.AbstractPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.LogEventPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.PatternConverter</supertype>
      </supertypes>
      <description>Able to handle the contents of the LogEvent's MDC and either output the entire contents of the properties in a similar format to the java.
util.
Hashtable.
toString(), or to output the value of a specific key within the property bundle when this pattern converter has the option set.</description>
    </plugin>
    <plugin name="MessagePatternConverter" namespace="Converter" className="org.apache.logging.log4j.core.pattern.MessagePatternConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.AbstractPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.LogEventPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.PatternConverter</supertype>
      </supertypes>
      <description>Returns the event's rendered message in a StringBuilder.</description>
    </plugin>
    <plugin name="MethodLocationPatternConverter" namespace="Converter" className="org.apache.logging.log4j.core.pattern.MethodLocationPatternConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.impl.LocationAware</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.AbstractPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.LogEventPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.PatternConverter</supertype>
      </supertypes>
      <description>Returns the event's line location information in a StringBuilder.</description>
    </plugin>
    <plugin name="NanoTimePatternConverter" namespace="Converter" className="org.apache.logging.log4j.core.pattern.NanoTimePatternConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.AbstractPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.LogEventPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.PatternConverter</supertype>
      </supertypes>
      <description>Converts and formats the event's nanoTime in a StringBuilder.</description>
    </plugin>
    <plugin name="NdcPatternConverter" namespace="Converter" className="org.apache.logging.log4j.core.pattern.NdcPatternConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.AbstractPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.LogEventPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.PatternConverter</supertype>
      </supertypes>
      <description>Returns the event's NDC in a StringBuilder.</description>
    </plugin>
    <plugin name="ProcessIdPatternConverter" namespace="Converter" className="org.apache.logging.log4j.core.pattern.ProcessIdPatternConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.AbstractPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.LogEventPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.PatternConverter</supertype>
      </supertypes>
    </plugin>
    <plugin name="replace" className="org.apache.logging.log4j.core.pattern.RegexReplacement">
      <supertypes>
        <supertype>java.lang.Object</supertype>
      </supertypes>
      <attributes>
        <attribute name="regex" type="java.util.regex.Pattern">
          <description>The regular expression to locate.</description>
        </attribute>
        <attribute name="replacement">
          <description>The replacement value.</description>
        </attribute>
      </attributes>
      <description>Replace tokens in the LogEvent message.</description>
    </plugin>
    <plugin name="replace" namespace="Converter" className="org.apache.logging.log4j.core.pattern.RegexReplacementConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.AbstractPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.LogEventPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.PatternConverter</supertype>
      </supertypes>
      <description>Replacement pattern converter.</description>
    </plugin>
    <plugin name="RelativeTimePatternConverter" namespace="Converter" className="org.apache.logging.log4j.core.pattern.RelativeTimePatternConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.AbstractPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.LogEventPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.PatternConverter</supertype>
      </supertypes>
      <description>Returns the relative time in milliseconds since JVM Startup.</description>
    </plugin>
    <plugin name="repeat" namespace="Converter" className="org.apache.logging.log4j.core.pattern.RepeatPatternConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.AbstractPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.LogEventPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.PatternConverter</supertype>
      </supertypes>
      <description>Equals pattern converter.</description>
    </plugin>
    <plugin name="RootThrowablePatternConverter" namespace="Converter" className="org.apache.logging.log4j.core.pattern.RootThrowablePatternConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.AbstractPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.LogEventPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.PatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.ThrowablePatternConverter</supertype>
      </supertypes>
      <description>Outputs the Throwable portion of the LoggingEvent as a full stack trace unless this converter's option is 'short', where it just outputs the first line of the trace, or if the number of lines to print is explicitly specified.

The extended stack trace will also include the location of where the class was loaded from and the version of the jar if available.</description>
    </plugin>
    <plugin name="SequenceNumberPatternConverter" namespace="Converter" className="org.apache.logging.log4j.core.pattern.SequenceNumberPatternConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.AbstractPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.LogEventPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.PatternConverter</supertype>
      </supertypes>
      <description>Formats the event sequence number.</description>
    </plugin>
    <plugin name="style" namespace="Converter" className="org.apache.logging.log4j.core.pattern.StyleConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.AbstractPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.AnsiConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.LogEventPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.PatternConverter</supertype>
      </supertypes>
      <description>Style pattern converter.

Adds ANSI color styling to the result of the enclosed pattern.

To disable ANSI output unconditionally, specify an additional option `disableAnsi=true`, or to disable ANSI output if no console is detected, specify option `noConsoleNoAnsi=true`.</description>
    </plugin>
    <plugin name="ThreadIdPatternConverter" namespace="Converter" className="org.apache.logging.log4j.core.pattern.ThreadIdPatternConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.AbstractPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.LogEventPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.PatternConverter</supertype>
      </supertypes>
      <description>Formats the event thread ID.</description>
    </plugin>
    <plugin name="ThreadPatternConverter" namespace="Converter" className="org.apache.logging.log4j.core.pattern.ThreadNamePatternConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.AbstractPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.LogEventPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.PatternConverter</supertype>
      </supertypes>
      <description>Formats the event thread name.</description>
    </plugin>
    <plugin name="ThreadPriorityPatternConverter" namespace="Converter" className="org.apache.logging.log4j.core.pattern.ThreadPriorityPatternConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.AbstractPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.LogEventPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.PatternConverter</supertype>
      </supertypes>
      <description>Formats the event thread priority.</description>
    </plugin>
    <plugin name="ThrowablePatternConverter" namespace="Converter" className="org.apache.logging.log4j.core.pattern.ThrowablePatternConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.AbstractPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.LogEventPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.PatternConverter</supertype>
      </supertypes>
      <description>Outputs the Throwable portion of the LoggingEvent as a full stack trace unless this converter's option is 'short', where it just outputs the first line of the trace, or if the number of lines to print is explicitly specified.</description>
    </plugin>
    <plugin name="UuidPatternConverter" namespace="Converter" className="org.apache.logging.log4j.core.pattern.UuidPatternConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.AbstractPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.LogEventPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.PatternConverter</supertype>
      </supertypes>
      <description>Formats the event sequence number.</description>
    </plugin>
    <plugin name="notEmpty" namespace="Converter" className="org.apache.logging.log4j.core.pattern.VariablesNotEmptyReplacementConverter">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.AbstractPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.LogEventPatternConverter</supertype>
        <supertype>org.apache.logging.log4j.core.pattern.PatternConverter</supertype>
      </supertypes>
      <description>VariablesNotEmpty pattern converter.</description>
    </plugin>
    <plugin name="Script" className="org.apache.logging.log4j.core.script.Script">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.script.AbstractScript</supertype>
      </supertypes>
      <attributes>
        <attribute name="language"></attribute>
        <attribute name="name"></attribute>
      </attributes>
      <description>Container for the language and body of a script.</description>
    </plugin>
    <plugin name="ScriptFile" className="org.apache.logging.log4j.core.script.ScriptFile">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.script.AbstractScript</supertype>
      </supertypes>
      <attributes>
        <attribute name="charset" type="java.nio.charset.Charset"></attribute>
        <attribute name="isWatched" type="java.lang.Boolean"></attribute>
        <attribute name="language"></attribute>
        <attribute name="name"></attribute>
        <attribute name="path"></attribute>
      </attributes>
      <description>Container for the language and body of a script file along with the file location.</description>
    </plugin>
    <plugin name="ScriptRef" className="org.apache.logging.log4j.core.script.ScriptRef">
      <supertypes>
        <supertype>java.lang.Object</supertype>
        <supertype>org.apache.logging.log4j.core.script.AbstractScript</supertype>
      </supertypes>
      <attributes>
        <attribute name="ref"></attribute>
      </attributes>
      <description>Contains a reference to a script defined elsewhere in the configuration.</description>
    </plugin>
    <plugin name="KeyValuePair" className="org.apache.logging.log4j.core.util.KeyValuePair">
      <supertypes>
        <supertype>java.lang.Object</supertype>
      </supertypes>
      <attributes>
        <attribute name="key"></attribute>
        <attribute name="value"></attribute>
      </attributes>
      <description>Key/Value pair configuration item.</description>
    </plugin>
  </plugins>
  <abstractTypes>
    <abstractType className="org.apache.logging.log4j.core.AbstractLifeCycle">
      <description>A life cycle to be extended.

Wraps a xref:LifeCycle.State.adoc[State].</description>
    </abstractType>
    <abstractType className="org.apache.logging.log4j.core.Appender">
      <description>Appends apiref:LogEvent[]s.

An Appender can contain a apiref:Layout[] if applicable as well as an apiref:ErrorHandler[]. Typical Appender implementations coordinate with an implementation of xref:org.apache.logging.log4j.core.appender.AbstractManager.adoc[AbstractManager] to handle external resources such as streams, connections, and other shared state.
As Appenders are plugins, concrete implementations need to be annotated with xref:org.apache.logging.log4j.core.config.plugins.Plugin.adoc[Plugin] and need to provide a static factory method annotated with xref:org.apache.logging.log4j.core.config.plugins.PluginFactory.adoc[PluginFactory].

Most core plugins are written using a related Manager class that handle the actual task of serializing a apiref:LogEvent[] to some output location.
For instance, many Appenders can take advantage of the xref:org.apache.logging.log4j.core.appender.OutputStreamManager.adoc[OutputStreamManager] class.

It is recommended that Appenders don't do any heavy lifting since there can be many instances of the class being used at any given time.
When resources require locking (e.g., through xref:java.nio.channels.FileLock.adoc[FileLock]), it is important to isolate synchronized code to prevent concurrency issues.</description>
    </abstractType>
    <abstractType className="org.apache.logging.log4j.core.Filter">
      <description>Interface that must be implemented to allow custom event filtering.

It is highly recommended that applications make use of the Filters provided with this implementation before creating their own.

This interface supports "global" filters (i.e. - all events must pass through them first), attached to specific loggers and associated with Appenders.
It is recommended that, where possible, Filter implementations create a generic filtering method that can be called from any of the filter methods.</description>
    </abstractType>
    <abstractType className="org.apache.logging.log4j.core.Layout">
      <description>Lays out a apiref:LogEvent[] in different formats.

The formats are:

* `byte[]`
* an implementer of apiref:Serializable[], like `byte[]`
* apiref:String[]
* apiref:LogEvent[]

Since 2.6, Layouts can apiref:Encoder[] a `LogEvent` directly to a apiref:ByteBufferDestination[] without creating temporary intermediary objects.</description>
    </abstractType>
    <abstractType className="org.apache.logging.log4j.core.LifeCycle">
      <description>All proper Java frameworks implement some sort of object life cycle.

In Log4j, the main interface for handling the life cycle context of an object is this one.
An object first starts in the apiref:State[] state by default to indicate the class has been loaded.
From here, calling the xref:.adoc[] method will change this state to apiref:State[]. After successfully being started, this state is changed to apiref:State[]. When the xref:.adoc[] is called, this goes into the xref:State.adoc[] state.
After successfully being stopped, this goes into the apiref:State[] state.
In most circumstances, implementation classes should store their apiref:State[] in a `volatile` field or inside an xref:java.util.concurrent.atomic.AtomicReference.adoc[AtomicReference] dependent on synchronization and concurrency requirements.</description>
    </abstractType>
    <abstractType className="org.apache.logging.log4j.core.LifeCycle2">
      <description>Extends the LifeCycle interface.

This interface should be merged with the super-interface in 3.0.</description>
    </abstractType>
    <abstractType className="org.apache.logging.log4j.core.StringLayout">
      <description>Instantiates the apiref:Layout[] type for String-based layouts.</description>
    </abstractType>
    <abstractType className="org.apache.logging.log4j.core.appender.AbstractAppender">
      <description>Abstract base class for Appenders.

Although Appenders do not have to extend this class, doing so will simplify their implementation.</description>
    </abstractType>
    <abstractType className="org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender">
      <description>Appends log events as bytes to a byte output stream.

The stream encoding is defined in the layout.</description>
    </abstractType>
    <abstractType className="org.apache.logging.log4j.core.appender.AbstractWriterAppender">
      <description>Appends log events as strings to a writer.</description>
    </abstractType>
    <abstractType className="org.apache.logging.log4j.core.appender.SocketAppender">
      <description>An Appender that delivers events over socket connections.

Supports both TCP and UDP.</description>
    </abstractType>
    <abstractType className="org.apache.logging.log4j.core.appender.db.AbstractDatabaseAppender">
      <description>An abstract Appender for writing events to a database of some type, be it relational or NoSQL.

All database appenders should inherit from this base appender.</description>
    </abstractType>
    <abstractType className="org.apache.logging.log4j.core.appender.db.jdbc.AbstractConnectionSource"></abstractType>
    <abstractType className="org.apache.logging.log4j.core.appender.db.jdbc.AbstractDriverManagerConnectionSource">
      <description>A apiref:ConnectionSource[] that uses a JDBC connection string, a user name, and a password to call apiref:DriverManager[].

This plugin does not provide any connection pooling unless it is available through the connection string and driver itself.
This handy to get you off the ground without having to deal with JNDI.</description>
    </abstractType>
    <abstractType className="org.apache.logging.log4j.core.appender.db.jdbc.ConnectionSource">
      <description>Configuration element for apiref:JdbcAppender[].

If you want to use the apiref:JdbcAppender[] but none of the provided connection sources meet your needs, you can simply create your own connection source.</description>
    </abstractType>
    <abstractType className="org.apache.logging.log4j.core.appender.rewrite.RewritePolicy">
      <description>Interface to be implemented by components that support modifications to the LogEvent.</description>
    </abstractType>
    <abstractType className="org.apache.logging.log4j.core.appender.rolling.AbstractRolloverStrategy"></abstractType>
    <abstractType className="org.apache.logging.log4j.core.appender.rolling.AbstractTriggeringPolicy">
      <description>Abstract convenience class for triggering policies that extend apiref:AbstractLifeCycle[] and implement apiref:TriggeringPolicy[].</description>
    </abstractType>
    <abstractType className="org.apache.logging.log4j.core.appender.rolling.DirectFileRolloverStrategy">
      <description>Created by rgoers on 1/12/17.</description>
    </abstractType>
    <abstractType className="org.apache.logging.log4j.core.appender.rolling.RolloverStrategy">
      <description>A `RollingPolicy` specifies the actions taken on a logging file rollover.</description>
    </abstractType>
    <abstractType className="org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy">
      <description>A `TriggeringPolicy` controls the conditions under which rollover occurs.

Such conditions include time of day, file size, an external event, the log request or a combination thereof.</description>
    </abstractType>
    <abstractType className="org.apache.logging.log4j.core.appender.rolling.action.AbstractAction">
      <description>Abstract base class for implementations of Action.</description>
    </abstractType>
    <abstractType className="org.apache.logging.log4j.core.appender.rolling.action.AbstractPathAction">
      <description>Abstract action for processing files that are accepted by the specified PathFilters.</description>
    </abstractType>
    <abstractType className="org.apache.logging.log4j.core.appender.rolling.action.Action">
      <description>The Action interface should be implemented by any class that performs file system actions for RollingFileAppenders after the close of the active log file.</description>
    </abstractType>
    <abstractType className="org.apache.logging.log4j.core.appender.rolling.action.PathCondition">
      <description>Filter that accepts or rejects a candidate `Path` for deletion.</description>
    </abstractType>
    <abstractType className="org.apache.logging.log4j.core.appender.rolling.action.PathSorter">
      <description>Defines the interface of classes that can sort Paths.</description>
    </abstractType>
    <abstractType className="org.apache.logging.log4j.core.appender.routing.PurgePolicy">
      <description>Policy for purging routed appenders</description>
    </abstractType>
    <abstractType className="org.apache.logging.log4j.core.async.BlockingQueueFactory">
      <description>Factory for creating instances of apiref:BlockingQueue[].</description>
    </abstractType>
    <abstractType className="org.apache.logging.log4j.core.config.ConfigurationAware">
      <description>Indicates that a class requests the current Configuration to be injected.</description>
    </abstractType>
    <abstractType className="org.apache.logging.log4j.core.config.ConfigurationFactory">
      <description>Factory class for parsed apiref:Configuration[] objects from a configuration file.

ConfigurationFactory allows the configuration implementation to be dynamically chosen in 1 of 3 ways:

. A system property named "log4j.
configurationFactory" can be set with the name of the ConfigurationFactory to be used.
. xref:.adoc[] can be called with the instance of the ConfigurationFactory to be used.
This must be called before any other calls to Log4j.
. A ConfigurationFactory implementation can be added to the classpath and configured as a plugin in the xref:.adoc[] category.
The apiref:Order[] annotation should be used to configure the factory to be the first one inspected.
See xref:org.apache.logging.log4j.core.config.xml.XmlConfigurationFactory.adoc[XmlConfigurationFactory] for an example.

If the ConfigurationFactory that was added returns null on a call to getConfiguration then any other ConfigurationFactories found as plugins will be called in their respective order.
DefaultConfiguration is always called last if no configuration has been returned.</description>
    </abstractType>
    <abstractType className="org.apache.logging.log4j.core.config.LoggerConfig">
      <description>Logger object that is created via configuration.</description>
    </abstractType>
    <abstractType className="org.apache.logging.log4j.core.config.arbiters.Arbiter">
      <description>Interface used to check for portions of the configuration that may be optionally included.</description>
    </abstractType>
    <abstractType className="org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilderFactory">
      <description>Provides methods to create ConfigurationBuilders.</description>
    </abstractType>
    <abstractType className="org.apache.logging.log4j.core.config.plugins.convert.TypeConverter">
      <description>Interface for doing automatic String conversion to a specific type.</description>
    </abstractType>
    <abstractType className="org.apache.logging.log4j.core.filter.AbstractFilter">
      <description>Users should extend this class to implement filters.

Filters can be either context wide or attached to an appender.
A filter may choose to support being called only from the context or only from an appender in which case it will only implement the required method(s). The rest will default to return xref:org.apache.logging.log4j.core.Filter.Result.adoc[Result].

Garbage-free note: the methods with unrolled varargs by default delegate to the xref:.adoc[]. Subclasses that want to be garbage-free should override these methods to implement the appropriate filtering without creating a vararg array.</description>
    </abstractType>
    <abstractType className="org.apache.logging.log4j.core.filter.AbstractFilterable">
      <description>Enhances a Class by allowing it to contain Filters.</description>
    </abstractType>
    <abstractType className="org.apache.logging.log4j.core.filter.Filterable">
      <description>Interface implemented by Classes that allow filtering to occur.

Extends apiref:LifeCycle[] since filters have a life cycle.</description>
    </abstractType>
    <abstractType className="org.apache.logging.log4j.core.filter.MapFilter">
      <description>A Filter that operates on a Map.</description>
    </abstractType>
    <abstractType className="org.apache.logging.log4j.core.impl.LocationAware">
      <description>Classes that use location information should implement this interface.</description>
    </abstractType>
    <abstractType className="org.apache.logging.log4j.core.layout.AbstractCsvLayout">
      <description>A superclass for Comma-Separated Value (CSV) layouts.

Depends on Apache Commons CSV 1.2.</description>
    </abstractType>
    <abstractType className="org.apache.logging.log4j.core.layout.AbstractJacksonLayout"></abstractType>
    <abstractType className="org.apache.logging.log4j.core.layout.AbstractLayout">
      <description>Abstract base class for Layouts.</description>
    </abstractType>
    <abstractType className="org.apache.logging.log4j.core.layout.AbstractStringLayout">
      <description>Abstract base class for Layouts that result in a String.

Since 2.4.1, this class has custom logic to convert ISO-8859-1 or US-ASCII Strings to byte[] arrays to improve performance: all characters are simply cast to bytes.</description>
    </abstractType>
    <abstractType className="org.apache.logging.log4j.core.layout.Encoder">
      <description>Objects implementing the `Encoder` interface know how to convert an object to some binary representation and write the result to a `ByteBuffer`, ideally without creating temporary objects.</description>
    </abstractType>
    <abstractType className="org.apache.logging.log4j.core.layout.PatternSelector">
      <description>Allows different patterns to be used with the PatternLayout based on some selection criteria.</description>
    </abstractType>
    <abstractType className="org.apache.logging.log4j.core.lookup.AbstractConfigurationAwareLookup">
      <description>StrLookup that is ConfigurationAware.

Handles saving the Configuration.</description>
    </abstractType>
    <abstractType className="org.apache.logging.log4j.core.lookup.AbstractLookup">
      <description>A default lookup for others to extend.</description>
    </abstractType>
    <abstractType className="org.apache.logging.log4j.core.lookup.MapLookup">
      <description>A map-based lookup.</description>
    </abstractType>
    <abstractType className="org.apache.logging.log4j.core.lookup.StrLookup">
      <description>Lookup a String key to a String value.

This class represents the simplest form of a string to string map.
It has a benefit over a map in that it can create the result on demand based on the key.

This class comes complete with various factory methods.
If these do not suffice, you can subclass and implement your own matcher.

For example, it would be possible to implement a lookup that used the key as a primary key, and looked up the value on demand from the database</description>
    </abstractType>
    <abstractType className="org.apache.logging.log4j.core.net.Advertiser"></abstractType>
    <abstractType className="org.apache.logging.log4j.core.net.ssl.AbstractKeyStoreConfiguration">
      <description>Configuration of the KeyStore</description>
    </abstractType>
    <abstractType className="org.apache.logging.log4j.core.net.ssl.StoreConfiguration"></abstractType>
    <abstractType className="org.apache.logging.log4j.core.pattern.AbstractPatternConverter">
      <description>AbstractPatternConverter is an abstract class that provides the formatting functionality that derived classes need.

Conversion specifiers in a conversion patterns are parsed to individual PatternConverters.
Each of which is responsible for converting an object in a converter specific manner.</description>
    </abstractType>
    <abstractType className="org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter">
      <description>Style pattern converter.

Adds ANSI color styling to the result of the enclosed pattern.</description>
    </abstractType>
    <abstractType className="org.apache.logging.log4j.core.pattern.AnsiConverter">
      <description>Marks classes that implement ANSI escape code conversions.</description>
    </abstractType>
    <abstractType className="org.apache.logging.log4j.core.pattern.ArrayPatternConverter">
      <description>apiref:PatternConverter[]s implement this interface to accept an array of objects when formatting.</description>
    </abstractType>
    <abstractType className="org.apache.logging.log4j.core.pattern.EqualsBaseReplacementConverter">
      <description>Equals pattern converter.</description>
    </abstractType>
    <abstractType className="org.apache.logging.log4j.core.pattern.LogEventPatternConverter">
      <description>LoggingEventPatternConverter is a base class for pattern converters that can format information from instances of LoggingEvent.</description>
    </abstractType>
    <abstractType className="org.apache.logging.log4j.core.pattern.NamePatternConverter">
      <description>Abstract base class for other pattern converters which can return only parts of their name.</description>
    </abstractType>
    <abstractType className="org.apache.logging.log4j.core.pattern.PatternConverter">
      <description>Interface that all PatternConverters must implement.</description>
    </abstractType>
    <abstractType className="org.apache.logging.log4j.core.pattern.ThrowablePatternConverter">
      <description>Outputs the Throwable portion of the LoggingEvent as a full stack trace unless this converter's option is 'short', where it just outputs the first line of the trace, or if the number of lines to print is explicitly specified.</description>
    </abstractType>
    <abstractType className="org.apache.logging.log4j.core.script.AbstractScript">
      <description>Container for the language and body of a script.</description>
    </abstractType>
    <abstractType className="org.apache.logging.log4j.core.util.AbstractWatcher">
      <description>Watcher for configuration files.

Causes a reconfiguration when a file changes.</description>
    </abstractType>
    <abstractType className="org.apache.logging.log4j.core.util.Builder">
      <description>A type of builder that can be used to configure and create a instances using a Java DSL instead of through a configuration file.

These builders are primarily useful for internal code and unit tests, but they can technically be used as a verbose alternative to configuration files.

When creating _plugin_ builders, it is customary to create the builder class as a public static inner class called `Builder`. For instance, the builder class for xref:org.apache.logging.log4j.core.layout.PatternLayout.adoc[PatternLayout] would be `PatternLayout. Builder`.</description>
    </abstractType>
    <abstractType className="org.apache.logging.log4j.core.util.Watcher">
      <description>Watches for changes in a Source and performs an action when it is modified.</description>
    </abstractType>
  </abstractTypes>
</pluginSet>
