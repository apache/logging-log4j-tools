<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Licensed to the Apache Software Foundation (ASF) under one or more
  ~ contributor license agreements.  See the NOTICE file distributed with
  ~ this work for additional information regarding copyright ownership.
  ~ The ASF licenses this file to you under the Apache License, Version 2.0
  ~ (the "License"); you may not use this file except in compliance with
  ~ the License.  You may obtain a copy of the License at
  ~
  ~      http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<!--
  ~ This is a test schema used in SchemaGeneratorTest.
  ~ Unlike this file the DefaultSchemaGenerator strips whitespace.
  -->
<schema xmlns="http://www.w3.org/2001/XMLSchema" xmlns:log4j="http://logging.apache.org/log4j/2.0/config" elementFormDefault="qualified" targetNamespace="http://logging.apache.org/log4j/2.0/config">
  <element type="log4j:org.apache.logging.log4j.core.config.Configuration" name="Configuration"/>
  <simpleType name="org.apache.logging.log4j.Level">
    <annotation>
      <documentation>Represents a logging level.
**Note**: the Log4j API supports custom levels, the following list contains only the standard ones.</documentation>
    </annotation>
    <restriction base="string">
      <enumeration value="OFF">
        <annotation>
          <documentation>Special level that disables logging. No events should be logged at this level.</documentation>
        </annotation>
      </enumeration>
      <enumeration value="FATAL">
        <annotation>
          <documentation>A fatal event that will prevent the application from continuing.</documentation>
        </annotation>
      </enumeration>
      <enumeration value="ERROR">
        <annotation>
          <documentation>An error in the application, possibly recoverable.</documentation>
        </annotation>
      </enumeration>
      <enumeration value="WARN">
        <annotation>
          <documentation>An event that might possible lead to an error.</documentation>
        </annotation>
      </enumeration>
      <enumeration value="INFO">
        <annotation>
          <documentation>An event for informational purposes.</documentation>
        </annotation>
      </enumeration>
      <enumeration value="DEBUG">
        <annotation>
          <documentation>A general debugging event.</documentation>
        </annotation>
      </enumeration>
      <enumeration value="TRACE">
        <annotation>
          <documentation>A fine-grained debug message, typically capturing the flow through the application.</documentation>
        </annotation>
      </enumeration>
      <enumeration value="ALL">
        <annotation>
          <documentation>All events should be logged.</documentation>
        </annotation>
      </enumeration>
    </restriction>
  </simpleType>
  <group name="org.apache.logging.log4j.core.Appender">
    <annotation>
      <documentation>Appends log events.
An Appender can contain a `Layout` if applicable as well as an `ErrorHandler`.
Typical Appender implementations coordinate with an implementation of `AbstractManager` to handle external resources such as streams, connections, and other shared state.
As Appenders are plugins, concrete implementations need to be annotated with `@Plugin` and need to provide a static factory method annotated with `@PluginFactory`.

Most core plugins are written using a related Manager class that handle the actual task of serializing a `LogEvent` to some output location.
For instance, many Appenders can take advantage of the `@OutputStreamManager` class.

It is recommended that Appenders don't do any heavy lifting since there can be many instances of the class being used at any given time.
When resources require locking (e.g., through `@FileLock`), it is important to isolate synchronized code to prevent concurrency issues.</documentation>
    </annotation>
    <choice>
      <element name="Console" type="log4j:org.apache.logging.log4j.core.appender.ConsoleAppender"/>
    </choice>
  </group>
  <group name="org.apache.logging.log4j.core.Filter">
    <annotation>
      <documentation>Interface that must be implemented to allow custom event filtering.
It is highly recommended that applications make use of the filters provided with this Log4j Core before creating their own.

This interface supports "global" filters (i.e. - all events must pass through them first), attached to specific loggers and associated with Appenders.
It is recommended that, where possible, `Filter` implementations create a generic filtering method that can be called from any of the filter methods.</documentation>
    </annotation>
    <choice>
      <element name="BurstFilter" type="log4j:org.apache.logging.log4j.core.filter.BurstFilter"/>
    </choice>
  </group>
  <simpleType name="org.apache.logging.log4j.core.Filter.Result">
    <annotation>
      <documentation>The result that can returned from a filter method call.</documentation>
    </annotation>
    <restriction base="string">
      <enumeration value="ACCEPT">
        <annotation>
          <documentation>The event will be processed without further filtering based on the log Level.</documentation>
        </annotation>
      </enumeration>
      <enumeration value="NEUTRAL">
        <annotation>
          <documentation>No decision could be made, further filtering should occur.</documentation>
        </annotation>
      </enumeration>
      <enumeration value="DENY">
        <annotation>
          <documentation>The event should not be processed.</documentation>
        </annotation>
      </enumeration>
    </restriction>
  </simpleType>
  <group name="org.apache.logging.log4j.core.Layout">
    <annotation>
      <documentation>A layout is responsible for formatting a `LogEvent` as a string.</documentation>
    </annotation>
    <choice>
      <element name="PatternLayout" type="log4j:org.apache.logging.log4j.core.layout.PatternLayout"/>
    </choice>
  </group>
  <complexType name="org.apache.logging.log4j.core.appender.ConsoleAppender">
    <annotation>
      <documentation>Write log events to the console.</documentation>
    </annotation>
    <sequence>
      <group ref="log4j:org.apache.logging.log4j.core.Filter" minOccurs="0">
        <annotation>
          <documentation>A filter to apply to events before sending them to destination.</documentation>
        </annotation>
      </group>
      <group ref="log4j:org.apache.logging.log4j.core.Layout">
        <annotation>
          <documentation>The layout to be used with the appender.</documentation>
        </annotation>
      </group>
    </sequence>
    <attribute name="name" type="string">
      <annotation>
        <documentation>The name of the appender used in appender references.
Must be unique.</documentation>
      </annotation>
    </attribute>
    <attribute name="ignoreExceptions" type="boolean">
      <annotation>
        <documentation>If set to `false` logging exceptions will be forwarded to the caller.</documentation>
      </annotation>
    </attribute>
    <attribute name="bufferedIo" type="boolean">
      <annotation>
        <documentation>If set to `true` (default) the appender will buffer messages before sending them.
This attribute is ignored if `immediateFlush` is set to `true`.</documentation>
      </annotation>
    </attribute>
    <attribute name="bufferSize" type="int">
      <annotation>
        <documentation>Size in bytes of the appender's buffer.</documentation>
      </annotation>
    </attribute>
    <attribute name="immediateFlush" type="boolean">
      <annotation>
        <documentation>If set to `true`, the appender flushes the output stream at each message and
buffering is disabled regardless of the value of `bufferedIo`.</documentation>
      </annotation>
    </attribute>
    <attribute name="target" type="log4j:org.apache.logging.log4j.core.appender.ConsoleAppender.Target">
      <annotation>
        <documentation>Specifies the target of the appender.</documentation>
      </annotation>
    </attribute>
  </complexType>
  <simpleType name="org.apache.logging.log4j.core.appender.ConsoleAppender.Target">
    <annotation>
      <documentation>Specifies the target of a console appender.</documentation>
    </annotation>
    <restriction base="string">
      <enumeration value="SYSTEM_OUT">
        <annotation>
          <documentation>Logs to the standard output.</documentation>
        </annotation>
      </enumeration>
      <enumeration value="SYSTEM_ERR">
        <annotation>
          <documentation>Logs to the standard error.</documentation>
        </annotation>
      </enumeration>
    </restriction>
  </simpleType>
  <complexType name="org.apache.logging.log4j.core.config.AppenderRef">
    <annotation>
      <documentation>Reference to an appender defined in the `Appenders` section.</documentation>
    </annotation>
    <sequence>
      <group ref="log4j:org.apache.logging.log4j.core.Filter" minOccurs="0">
        <annotation>
          <documentation>The filter to use.</documentation>
        </annotation>
      </group>
    </sequence>
    <attribute name="ref" type="string">
      <annotation>
        <documentation>The name of an appender.</documentation>
      </annotation>
    </attribute>
    <attribute name="level" type="log4j:org.apache.logging.log4j.Level">
      <annotation>
        <documentation>The level to filter against.</documentation>
      </annotation>
    </attribute>
  </complexType>
  <group name="org.apache.logging.log4j.core.config.AppenderRef">
    <annotation>
      <documentation>Reference to an appender defined in the `Appenders` section.</documentation>
    </annotation>
    <choice>
      <element name="AppenderRef" type="log4j:org.apache.logging.log4j.core.config.AppenderRef"/>
      <element name="appender-ref" type="log4j:org.apache.logging.log4j.core.config.AppenderRef"/>
    </choice>
  </group>
  <complexType name="org.apache.logging.log4j.core.config.AppendersPlugin">
    <annotation>
      <documentation>A wrapper for a list of appenders.</documentation>
    </annotation>
    <sequence>
      <group ref="log4j:org.apache.logging.log4j.core.Appender" minOccurs="0" maxOccurs="unbounded">
        <annotation>
          <documentation>A list of appender.</documentation>
        </annotation>
      </group>
    </sequence>
  </complexType>
  <complexType name="org.apache.logging.log4j.core.config.Configuration">
    <annotation>
      <documentation>A Log4j 2.x configuration contains many components, two of them `Appenders` and `Loggers` are required.</documentation>
    </annotation>
    <sequence>
      <element name="Properties" type="log4j:org.apache.logging.log4j.core.config.PropertiesPlugin" minOccurs="0">
        <annotation>
          <documentation>Wrapper element for a list of properties.

If present, this element must be the **first** child of the configuration.</documentation>
        </annotation>
      </element>
      <element name="Appenders" type="log4j:org.apache.logging.log4j.core.config.AppendersPlugin">
        <annotation>
          <documentation>Wrapper element for a list of appenders.</documentation>
        </annotation>
      </element>
      <element name="CustomLevels" type="log4j:org.apache.logging.log4j.core.config.CustomLevels" minOccurs="0">
        <annotation>
          <documentation>Wrapper element for a list of custom levels.</documentation>
        </annotation>
      </element>
      <element name="Loggers" type="log4j:org.apache.logging.log4j.core.config.LoggersPlugin" minOccurs="0">
        <annotation>
          <documentation>Wrapper element for a list of logger configurations.</documentation>
        </annotation>
      </element>
    </sequence>
    <attribute name="advertiser" type="string">
      <annotation>
        <documentation>If set it should contain the name of an `Advertiser` plugin
(cf. https://logging.apache.org/log4j/2.x/manual/configuration.html#chainsaw-can-automatically-process-your-log-files-advertising-ap[documentation] ).
Log4j Core provides a single implementation based on JmDNS called `MulticastDns`.</documentation>
      </annotation>
    </attribute>
    <attribute name="dest" type="string">
      <annotation>
        <documentation>Specifies the destination for StatusLogger events.
The possible values are:
* `out` for using standard out (default),
* `err` for using standard error,
* a string that is interpreted in order as URI, URL or the path to a local file.

If the provided value is invalid, then the default destination of standard out will be used.</documentation>
      </annotation>
    </attribute>
    <attribute name="name" type="string">
      <annotation>
        <documentation>Name of the configuration.</documentation>
      </annotation>
    </attribute>
    <attribute name="monitorInterval" type="int">
      <annotation>
        <documentation>Number of seconds between polls for configuration changes.</documentation>
      </annotation>
    </attribute>
    <attribute name="schema" type="string">
      <annotation>
        <documentation>The name of a classpath resource to use to validate the configuration.</documentation>
      </annotation>
    </attribute>
    <attribute name="shutdownHook" type="string">
      <annotation>
        <documentation>Specifies whether Log4j should automatically shut down when the JVM shuts down.
Possible values:
* `enable`: to enable unconditionally the hook,
* `disable`: to disable unconditionally the hook.

The shutdown hook is enabled by default, unless Log4j Core detects the presence of the Servlet API.</documentation>
      </annotation>
    </attribute>
    <attribute name="shutdownTimeout" type="int">
      <annotation>
        <documentation>Timeout in milliseconds of the logger context shut down.</documentation>
      </annotation>
    </attribute>
    <attribute name="status" type="log4j:org.apache.logging.log4j.Level">
      <annotation>
        <documentation>Sets the level of the status logger.</documentation>
      </annotation>
    </attribute>
    <attribute name="strict" type="boolean">
      <annotation>
        <documentation>If set to `true` the configuration file will be validated using an XML schema.</documentation>
      </annotation>
    </attribute>
    <attribute name="verbose" type="string">
      <annotation>
        <documentation>Specifies the verbosity level for the status logger.
This only applies to classes configured by `StatusConfiguration#setVerboseClasses`.</documentation>
      </annotation>
    </attribute>
  </complexType>
  <complexType name="org.apache.logging.log4j.core.config.CustomLevelConfig">
    <annotation>
      <documentation>Configures a custom level.</documentation>
    </annotation>
    <attribute name="name" type="string">
      <annotation>
        <documentation>The name of the level.</documentation>
      </annotation>
    </attribute>
    <attribute name="intLevel" type="int">
      <annotation>
        <documentation>An integer determines the strength of the custom level relative to the built-in levels.</documentation>
      </annotation>
    </attribute>
  </complexType>
  <complexType name="org.apache.logging.log4j.core.config.CustomLevels">
    <annotation>
      <documentation>A wrapper for a list of custom level configurations.</documentation>
    </annotation>
    <sequence>
      <element name="CustomLevel" type="log4j:org.apache.logging.log4j.core.config.CustomLevelConfig" minOccurs="0" maxOccurs="unbounded">
        <annotation>
          <documentation>A list of custom level configurations.</documentation>
        </annotation>
      </element>
    </sequence>
  </complexType>
  <complexType name="org.apache.logging.log4j.core.config.LoggerConfig">
    <annotation>
      <documentation>Configures a particular logger</documentation>
    </annotation>
    <sequence>
      <group ref="log4j:org.apache.logging.log4j.core.config.AppenderRef" minOccurs="0" maxOccurs="unbounded">
        <annotation>
          <documentation>A list of appenders to use with this logger.</documentation>
        </annotation>
      </group>
      <group ref="log4j:org.apache.logging.log4j.core.Filter" minOccurs="0">
        <annotation>
          <documentation>A filter to filter events, before calling the appenders.</documentation>
        </annotation>
      </group>
    </sequence>
    <attribute name="name" type="string">
      <annotation>
        <documentation>The name of the logger.</documentation>
      </annotation>
    </attribute>
    <attribute name="level" type="log4j:org.apache.logging.log4j.Level">
      <annotation>
        <documentation>The level of the logger.</documentation>
      </annotation>
    </attribute>
    <attribute name="includeLocation" type="boolean">
      <annotation>
        <documentation>When set to `false` location information will **not** be computed.

The default value depends on the logger context implementation: it is `false` for `AsyncLoggerContext` and `true` for `LoggerContext`.</documentation>
      </annotation>
    </attribute>
  </complexType>
  <group name="org.apache.logging.log4j.core.config.LoggerConfig">
    <annotation>
      <documentation>Configures a particular logger</documentation>
    </annotation>
    <choice>
      <element name="Logger" type="log4j:org.apache.logging.log4j.core.config.LoggerConfig"/>
      <element name="Root" type="log4j:org.apache.logging.log4j.core.config.LoggerConfig.RootLogger"/>
    </choice>
  </group>
  <complexType name="org.apache.logging.log4j.core.config.LoggerConfig.RootLogger">
    <annotation>
      <documentation>Configures the root logger</documentation>
    </annotation>
    <sequence>
      <group ref="log4j:org.apache.logging.log4j.core.config.AppenderRef" minOccurs="0" maxOccurs="unbounded">
        <annotation>
          <documentation>A list of appenders to use with this logger.</documentation>
        </annotation>
      </group>
      <group ref="log4j:org.apache.logging.log4j.core.Filter" minOccurs="0">
        <annotation>
          <documentation>A filter to filter events, before calling the appenders.</documentation>
        </annotation>
      </group>
    </sequence>
    <attribute name="level" type="log4j:org.apache.logging.log4j.Level">
      <annotation>
        <documentation>The level of the logger.</documentation>
      </annotation>
    </attribute>
    <attribute name="includeLocation" type="boolean">
      <annotation>
        <documentation>When set to `false` location information will **not** be computed.

The default value depends on the logger context implementation: it is `false` for `AsyncLoggerContext` and `true` for `LoggerContext`.</documentation>
      </annotation>
    </attribute>
  </complexType>
  <complexType name="org.apache.logging.log4j.core.config.LoggersPlugin">
    <annotation>
      <documentation>A wrapper for a list of logger configurations.</documentation>
    </annotation>
    <sequence>
      <group ref="log4j:org.apache.logging.log4j.core.config.LoggerConfig" minOccurs="0" maxOccurs="unbounded">
        <annotation>
          <documentation>A list of logger configurations.</documentation>
        </annotation>
      </group>
    </sequence>
  </complexType>
  <complexType name="org.apache.logging.log4j.core.config.PropertiesPlugin">
    <annotation>
      <documentation>A wrapper for a list of properties.</documentation>
    </annotation>
    <sequence>
      <element name="Property" type="log4j:org.apache.logging.log4j.core.config.Property" minOccurs="0" maxOccurs="unbounded">
        <annotation>
          <documentation>A list of properties.</documentation>
        </annotation>
      </element>
    </sequence>
  </complexType>
  <complexType name="org.apache.logging.log4j.core.config.Property">
    <annotation>
      <documentation>Represents a key/value pair in the configuration.</documentation>
    </annotation>
    <attribute name="name" type="string">
      <annotation>
        <documentation>Name of the property.</documentation>
      </annotation>
    </attribute>
    <attribute name="value" type="string">
      <annotation>
        <documentation>Value of the property.</documentation>
      </annotation>
    </attribute>
  </complexType>
  <complexType name="org.apache.logging.log4j.core.filter.BurstFilter">
    <annotation>
      <documentation>The BurstFilter is a logging filter that regulates logging traffic.
Use this filter when you want to control the mean rate and maximum burst of log statements that can be sent to an appender.</documentation>
    </annotation>
    <attribute name="onMatch" type="log4j:org.apache.logging.log4j.core.Filter.Result">
      <annotation>
        <documentation>Action to perform if the filter matches.</documentation>
      </annotation>
    </attribute>
    <attribute name="onMismatch" type="log4j:org.apache.logging.log4j.core.Filter.Result">
      <annotation>
        <documentation>Action to perform if the filter does not match.</documentation>
      </annotation>
    </attribute>
    <attribute name="level" type="log4j:org.apache.logging.log4j.Level">
      <annotation>
        <documentation>Log events less specific than this level are filtered, while events with level equal or more specific always match.</documentation>
      </annotation>
    </attribute>
    <attribute name="rate" type="float">
      <annotation>
        <documentation>Sets the average number of events per second to allow.</documentation>
      </annotation>
    </attribute>
    <attribute name="maxBurst" type="long">
      <annotation>
        <documentation>Sets the maximum number of events that can occur before events are filtered for exceeding the average rate.</documentation>
      </annotation>
    </attribute>
  </complexType>
  <complexType name="org.apache.logging.log4j.core.layout.PatternLayout">
    <annotation>
      <documentation>A flexible layout configurable with pattern string.

The goal of this class is to {@link org.apache.logging.log4j.core.Layout#toByteArray format} a {@link LogEvent} and return the results.
The format of the result depends on the _conversion pattern_.

The conversion pattern is closely related to the conversion pattern of the printf function in C.
A conversion pattern is composed of literal text and format control expressions called _conversion specifiers_.</documentation>
    </annotation>
    <attribute name="pattern" type="string">
      <annotation>
        <documentation>The pattern to use to format log events.</documentation>
      </annotation>
    </attribute>
  </complexType>
</schema>