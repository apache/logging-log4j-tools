<?xml version="1.0" encoding="UTF-8"?>
<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

-->
<schema xmlns="http://www.w3.org/2001/XMLSchema"
        xmlns:log4j="http://logging.apache.org/log4j/2.0/config"
        xmlns:html="http://www.w3.org/1999/xhtml"
        targetNamespace="http://logging.apache.org/log4j/2.0/config"
        elementFormDefault="qualified">

    <element name="Configuration">
        <annotation>
            <documentation>
                <html:p>A Log4j 2.x configuration contains many components, two of them <html:code>Appenders</html:code>
                and <html:code>Loggers</html:code> are required.</html:p>
            </documentation>
        </annotation>
        <complexType>
            <sequence>
                <element name="Appenders" type="log4j:org.apache.logging.log4j.core.config.AppendersPlugin">
                    <annotation>
                        <documentation>
                            Container for a list of appenders.
                        </documentation>
                    </annotation>
                </element>
            </sequence>
        </complexType>
    </element>

    <!-- Plugins with the same interface -->

    <group name="org.apache.logging.log4j.core.Appender">
        <choice>
            <element name="Console" type="log4j:org.apache.logging.log4j.core.appender.ConsoleAppender"/>
        </choice>
    </group>

    <group name="org.apache.logging.log4j.core.Filter">
        <choice>
            <element name="ThresholdFilter" type="log4j:org.apache.logging.log4j.core.filter.ThresholdFilter"/>
        </choice>
    </group>

    <group name="org.apache.logging.log4j.core.Layout">
        <choice>
            <element name="PatternLayout" type="log4j:org.apache.logging.log4j.core.layout.PatternLayout"/>
        </choice>
    </group>

    <!-- Enums and other simple types -->

    <simpleType name="org.apache.logging.log4j.core.appender.ConsoleAppender.Target">
        <restriction base="string">
            <enumeration value="SYSTEM_OUT"/>
            <enumeration value="SYSTEM_ERR"/>
        </restriction>
    </simpleType>

    <simpleType name="org.apache.logging.log4j.core.Filter.Result">
        <restriction base="string">
            <enumeration value="ACCEPT"/>
            <enumeration value="DENY"/>
            <enumeration value="NEUTRAL"/>
        </restriction>
    </simpleType>

    <!-- Plugins -->

    <complexType name="org.apache.logging.log4j.core.config.AppendersPlugin">
        <sequence>
            <group ref="log4j:org.apache.logging.log4j.core.Appender" minOccurs="0"/>
        </sequence>
    </complexType>

    <complexType name="org.apache.logging.log4j.core.filter.AbstractFilterable">
        <sequence>
            <group ref="log4j:org.apache.logging.log4j.core.Filter" minOccurs="0">
                <annotation>
                    <documentation>
                        A filter to apply to the log events processed by this component.
                    </documentation>
                </annotation>
            </group>
            <element name="Property" type="log4j:org.apache.logging.log4j.core.config.Property" minOccurs="0"
                     maxOccurs="unbounded">
                <annotation>
                    <documentation>
                        A list of properties to add to the context data of the log event.
                    </documentation>
                </annotation>
            </element>
        </sequence>
    </complexType>

    <complexType name="org.apache.logging.log4j.core.appender.AbstractAppender">
        <complexContent>
            <extension base="log4j:org.apache.logging.log4j.core.filter.AbstractFilterable">
                <sequence>
                    <group ref="log4j:org.apache.logging.log4j.core.Layout" minOccurs="0">
                        <annotation>
                            <documentation>
                                Specifies the way events are converted into strings.
                            </documentation>
                        </annotation>
                    </group>
                </sequence>
                <attribute name="ignoreExceptions" type="boolean" default="true"/>
                <attribute name="name" type="string" use="required">
                    <annotation>
                        <documentation>The name of the appender.</documentation>
                    </annotation>
                </attribute>
            </extension>
        </complexContent>
    </complexType>

    <complexType name="org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender">
        <complexContent>
            <extension base="log4j:org.apache.logging.log4j.core.appender.AbstractAppender">
                <attribute name="bufferedIo" type="boolean" default="true">
                    <annotation>
                        <documentation>If set to `true` the appender will buffer events.
                            This is incompatible with `immediateFlush`.
                        </documentation>
                    </annotation>
                </attribute>
                <attribute name="bufferSize" type="int">
                    <annotation>
                        <documentation>Size in bytes of the appender's buffer.</documentation>
                    </annotation>
                </attribute>
                <attribute name="immediateFlush" type="boolean" default="true">
                    <annotation>
                        <documentation>If set to `true` the output stream will be flushed after each event.
                        </documentation>
                    </annotation>
                </attribute>
            </extension>
        </complexContent>
    </complexType>

    <complexType name="org.apache.logging.log4j.core.appender.ConsoleAppender">
        <annotation>
            <documentation>
                <html:p>Appends log events to <html:code>System.out</html:code> or <html:code>System.err</html:code> using
                    a layout specified by the user.
                </html:p>
            </documentation>
        </annotation>
        <complexContent>
            <extension base="log4j:org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender">
                <attribute name="target" type="log4j:org.apache.logging.log4j.core.appender.ConsoleAppender.Target"
                           default="SYSTEM_OUT">
                    <annotation>
                        <documentation>Specifies the target of the console appender.</documentation>
                    </annotation>
                </attribute>
                <attribute name="follow" type="boolean" default="false">
                    <annotation>
                        <documentation>If set to `true`, the appender follows redirections performed using
                            `System#setOut()/setErr()`.
                        </documentation>
                    </annotation>
                </attribute>
                <attribute name="direct" type="boolean" default="false">
                    <annotation>
                        <documentation>If set to `true`, the appender uses the `FileDescriptor.out/err` descriptors
                            directly.
                        </documentation>
                    </annotation>
                </attribute>
            </extension>
        </complexContent>
    </complexType>

    <complexType name="org.apache.logging.log4j.core.filter.AbstractFilter">
        <attribute name="onMatch" type="log4j:org.apache.logging.log4j.core.Filter.Result" default="NEUTRAL">
            <annotation>
                <documentation>The result to return when the filter matches.</documentation>
            </annotation>
        </attribute>
        <attribute name="onMismatch" type="log4j:org.apache.logging.log4j.core.Filter.Result" default="DENY">
            <annotation>
                <documentation>The result to return when the filter does not match.</documentation>
            </annotation>
        </attribute>
    </complexType>

    <complexType name="org.apache.logging.log4j.core.filter.ThresholdFilter">
        <annotation>
            <documentation>
                This filter returns the `onMatch` result if the level in the `LogEvent` is the same or more specific
                than the configured level and the `onMismatch` value otherwise.
                For example, if the `ThresholdFilter` is configured with Level `ERROR` and the `LogEvent` contains Level
                `DEBUG` then the `onMismatch` value will be returned since `ERROR` events are more specific than
                `DEBUG`.
            </documentation>
        </annotation>
        <simpleContent>
            <extension base="log4j:org.apache.logging.log4j.core.filter.AbstractFilter">
                <attribute name="level" type="string" default="ERROR">
                    <annotation>
                        <documentation>The threshold level.</documentation>
                    </annotation>
                </attribute>
            </extension>
        </simpleContent>
    </complexType>

    <complexType name="org.apache.logging.log4j.core.layout.PatternLayout">
        <annotation>
            <documentation>
                <html:h1>
                    A flexible layout configurable with pattern string.
                </html:h1>
                <html:p>
                    The goal of this class is to {@link org.apache.logging.log4j.core.Layout#toByteArray format} a
                    {@link LogEvent} and
                    return the results. The format of the result depends on the <html:em>conversion pattern</html:em>.
                </html:p>
                <html:p>
                    The conversion pattern is closely related to the conversion pattern of the printf function in C. A
                    conversion pattern
                    is composed of literal text and format control expressions called <html:em>conversion specifiers</html:em>.
                </html:p>
            </documentation>
        </annotation>
        <attribute name="pattern" default="%m%n">
            <annotation>
                <documentation>The pattern to use to format log events.</documentation>
            </annotation>
        </attribute>
    </complexType>

    <complexType name="org.apache.logging.log4j.core.config.Property">
        <annotation>
            <documentation>Represents a key/value pair in the configuration.</documentation>
        </annotation>
        <attribute name="key" type="string" use="required">
            <annotation>
                <documentation>The key.</documentation>
            </annotation>
        </attribute>
        <attribute name="value" type="string" use="required">
            <annotation>
                <documentation>The value.</documentation>
            </annotation>
        </attribute>
    </complexType>
</schema>