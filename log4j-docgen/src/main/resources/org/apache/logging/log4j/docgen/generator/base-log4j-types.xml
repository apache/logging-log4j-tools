<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Licensed to the Apache Software Foundation (ASF) under one or more
  ~ contributor license agreements.  See the NOTICE file distributed with
  ~ this work for additional information regarding copyright ownership.
  ~ The ASF licenses this file to you under the Apache License, Version 2.0
  ~ (the "License"); you may not use this file except in compliance with
  ~ the License.  You may obtain a copy of the License at
  ~
  ~      http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<pluginSet xmlns="https://logging.apache.org/xml/ns/plugins" version="0.1.0">

  <groupId>org.apache.logging.log4j</groupId>
  <artifactId>log4j-core</artifactId>
  <description>Basic definitions untraceable from the plugin hierarchy.</description>

  <scalars>

    <!-- `Level` is not a scalar, but for the purpose of the XSD we can limit its values to the standard ones. -->
    <scalar className="org.apache.logging.log4j.Level">
      <description><![CDATA[Represents a logging level.
NOTE: The Log4j API supports custom levels, the following list contains only the standard ones.]]></description>
      <values>
        <value name="OFF">
          <description><![CDATA[Special level that disables logging.
No events should be logged at this level.]]></description>
        </value>
        <value name="FATAL">
          <description>A fatal event that will prevent the application from continuing</description>
        </value>
        <value name="ERROR">
          <description>An error in the application, possibly recoverable</description>
        </value>
        <value name="WARN">
          <description>An event that might possible lead to an error</description>
        </value>
        <value name="INFO">
          <description>An event for informational purposes</description>
        </value>
        <value name="DEBUG">
          <description>A general debugging event</description>
        </value>
        <value name="TRACE">
          <description>A fine-grained debug message, typically capturing the flow through the application</description>
        </value>
        <value name="ALL">
          <description>Special level indicating all events should be logged</description>
        </value>
      </values>
    </scalar>

  </scalars>

  <plugins>

    <!--
      ~ The main `Configuration` element is not a plugin, so we add a fake entry for it.
      -->
    <plugin name="Configuration" namespace="Core" className="org.apache.logging.log4j.core.config.Configuration">

      <description>A Log4j configuration contains many components of which two are required: `Appenders` and `Loggers`.</description>

      <attributes>

        <attribute name="dest" defaultValue="err">
          <description><![CDATA[Specifies the destination for status logger events.
The possible values are:

* `out` for using standard out (default)
* `err` for using standard error
* a string that is interpreted in order as URI, URL or the path to a local file

If the provided value is invalid, then the default destination of standard out will be used.]]></description>
        </attribute>

        <attribute name="name" required="true">
          <description>Name of the configuration</description>
        </attribute>

        <attribute name="monitorInterval" type="int" defaultValue="0">
          <description>Number of seconds between polls for configuration changes</description>
        </attribute>

        <attribute name="schema">
          <description>The name of a classpath resource to use to validate the configuration</description>
        </attribute>

        <attribute name="shutdownHook">
          <description><![CDATA[Indicates if Log4j should automatically shut down when the JVM shuts down.
Possible values are `enable` and `disable`.
The shutdown hook is enabled by default, unless Log4j detects the presence of the Servlet API.]]></description>
        </attribute>

        <attribute name="shutdownTimeout" type="int">
          <description>Timeout in milliseconds of the logger context shut down</description>
        </attribute>

        <attribute name="status" type="org.apache.logging.log4j.Level" defaultValue="ERROR">
          <description>Sets the level of the status logger</description>
        </attribute>

        <attribute name="strict" type="boolean" defaultValue="false">
          <description>If set to `true` the configuration file will be validated using an XML schema.</description>
        </attribute>

      </attributes>

      <elements>

        <element type="org.apache.logging.log4j.core.config.PropertiesPlugin">
          <description>Wrapper element for a list of properties</description>
        </element>

        <element type="org.apache.logging.log4j.core.config.AppendersPlugin" required="true">
          <description>Wrapper element for a list of appenders</description>
        </element>

        <element type="org.apache.logging.log4j.core.config.CustomLevels">
          <description>Wrapper element for a list of custom levels</description>
        </element>

        <element type="org.apache.logging.log4j.core.config.LoggersPlugin">
          <description>Wrapper element for a list of logger configurations</description>
        </element>

      </elements>

    </plugin>

  </plugins>

</pluginSet>
